<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\Models\SuppliesModels\Supplier;

class SupplierApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation addSupplier
     *
     * Add a new supplier.
     *
     *
     * @return Http response
     */
    public function addSupplier()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addSupplier');
        }
        $body = $input['body'];


        return response('How about implementing addSupplier as a POST method ?');
    }
    /**
     * Operation updateSupplier
     *
     * Update an existing supplier.
     *
     *
     * @return Http response
     */
    public function updateSupplier()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateSupplier');
        }
        $body = $input['body'];


        return response('How about implementing updateSupplier as a PUT method ?');
    }
    /**
     * Operation deleteSupplier
     *
     * Deletes an supplier.
     *
     * @param int $supplier_id supplier id to delete (required)
     *
     * @return Http response
     */
    public function deleteSupplier($supplier_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteSupplier as a DELETE method ?');
    }
    /**
     * Operation getSupplierById
     *
     * Find supplier by ID.
     *
     * @param int $supplier_id ID of supplier to return object (required)
     *
     * @return Http response
     */
    public function getSupplierById($supplier_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getSupplierById as a GET method ?');
    }
    /**
     * Operation suppliersGet
     *
     * suppliers List.
     *
     *
     * @return Http response
     */
    public function suppliersGet()
    {
        $input = Request::all();
        $response;

        //path params validation


        //not path params validation
        // $supplier_id = $input['supplier_id'];


         $response = Supplier::where("deleted_at",null)        
                        ->orderBy('supplier_name','asc')
                        ->get();

          return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }
}
