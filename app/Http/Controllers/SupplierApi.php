<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\Models\SuppliesModels\Supplier;

class SupplierApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }























    

    /**
     * Operation addSupplier
     *
     * Add a new supplier.
     *
     *
     * @return Http response
     */
    public function addSupplier()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addSupplier');
        }
        $body = $input['body'];


        return response('How about implementing addSupplier as a POST method ?');
    }













    /**
     * Operation updateSupplier
     *
     * Update an existing supplier.
     *
     *
     * @return Http response
     */
    public function updateSupplier()
    {
        $input = Request::all();

        // path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLpo');
        }

        $body = $input['body'];

         $supplier = Supplier::find($body['id']);



        $supplier->bank_id                           =   (int)   $body['bank_id'];
        $supplier->bank_branch_id                    =   (int)   $body['bank_branch_id'];
        $supplier->supplier_name                     =           $body['supplier_name'];
        $supplier->address                           =           $body['address'];
        $supplier->telephone                         =           $body['telephone'];
        $supplier->email                             =           $body['email'];
        $supplier->website                           =           $body['website'];
        $supplier->bank_account                      =           $body['bank_account'];
        $supplier->mobile_payment_number             =           $body['mobile_payment_number'];
        $supplier->chaque_address                    =           $body['chaque_address'];
        $supplier->payment_mode_id                   =   (int)   $body['payment_mode_id'];
        $supplier->bank_code                         =           $body['bank_code'];
        $supplier->swift_code                        =           $body['swift_code'];
        $supplier->usd_account                       =           $body['usd_account'];
        $supplier->alternative_email                 =           $body['alternative_email'];
        $supplier->currency_id                       =   (int)   $body['currency_id'];
        $supplier->mobile_payment_name               =           $body['mobile_payment_name'];
        $supplier->city_id                           =   (int)   $body['city_id'];
        $supplier->qb                                =           $body['qb'];
        $supplier->status_id                         =   (int)   $body['status_id'];
        $supplier->staff_id                          =   (int)   $body['staff_id'];
        $supplier->password                          =           $body['password'];
        $supplier->quick_books                       =           $body['quick_books'];
        $supplier->tax_pin                           =           $body['tax_pin'];
        $supplier->contact_name_1                    =           $body['contact_name_1'];
        $supplier->contact_email_1                   =           $body['contact_email_1'];
        $supplier->contact_phone_1                   =           $body['contact_phone_1'];
        $supplier->contact_name_2                    =           $body['contact_name_2'];
        $supplier->contact_email_2                   =           $body['contact_email_2'];
        $supplier->contact_phone_2                   =           $body['contact_phone_2'];


        if($supplier->save()) {

            return Response()->json(array('msg' => 'Success: Supplier updated','supplier' => $supplier), 200);
        }
    }





















    /**
     * Operation deleteSupplier
     *
     * Deletes an supplier.
     *
     * @param int $supplier_id supplier id to delete (required)
     *
     * @return Http response
     */
    public function deleteSupplier($supplier_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteSupplier as a DELETE method ?');
    }























    
    /**
     * Operation getSupplierById
     *
     * Find supplier by ID.
     *
     * @param int $supplier_id ID of supplier to return object (required)
     *
     * @return Http response
     */
    public function getSupplierById($supplier_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getSupplierById as a GET method ?');
    }























    
    /**
     * Operation suppliersGet
     *
     * suppliers List.
     *
     *
     * @return Http response
     */
    public function suppliersGet()
    {
        $input = Request::all();
        $response;

        //path params validation


        //not path params validation
        // $supplier_id = $input['supplier_id'];


         $response = Supplier::where("deleted_at",null)        
                        ->orderBy('supplier_name','asc')
                        ->get();

          return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }
}
