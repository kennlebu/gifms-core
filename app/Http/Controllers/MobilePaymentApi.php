<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;
use App\Models\MobilePaymentModels\MobilePayment;
use App\Models\MobilePaymentModels\MobilePaymentStatus;
use App\Models\MobilePaymentModels\MobilePaymentPayee;
use App\Models\ProjectsModels\Project;
use App\Models\AccountingModels\Account;
use Exception;
use PDF;
use Excel;
use App;
use JWTAuth;
use Config;
use Anchu\Ftp\Facades\Ftp;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Mail;
use App\Mail\NotifyMobilePayment;
use App\Mail\MobilePaymentInstructBank;
use App\Models\AllocationModels\Allocation;
use App\Models\ApprovalsModels\Approval;
use App\Models\ApprovalsModels\ApprovalLevel;
use App\Models\StaffModels\Staff;
use App\Models\PaymentModels\Payment;
use App\Models\PaymentModels\PaymentMode;
use App\Models\PaymentModels\PaymentBatch;
use App\Models\LookupModels\Currency;
use App\Models\BankingModels\BankBranch;
use App\Exceptions\NotFullyAllocatedException;
use App\Exceptions\ApprovalException;
use App\Models\PaymentModels\VoucherNumber;
use App\Models\ReportModels\ReportingObjective;
use App\Mail\RequestMPBankSigning;

class MobilePaymentApi extends Controller
{


    private $default_status = '';
    private $approvable_statuses = [];
    /**
     * Constructor
     */
    public function __construct()
    {
        $status = MobilePaymentStatus::where('default_status','1')->first();
        $this->approvable_statuses = MobilePaymentStatus::where('approvable','1')->get();
        $this->default_status = $status->id;
    }
















    /**
     * Operation addMobilePayment
     *
     * Add a new mobile_payment.
     *
     *
     * @return Http response
     */
    public function addMobilePayment()
    {
        $input = Request::all();

        try{

            $form = Request::only(
                'requested_by_id',
                'request_action_by_id',
                'account_id',
                'mobile_payment_type_id',
                'expense_desc',
                'expense_purpose',
                'payment_document',
                'status_id',
                'project_manager_id',
                'region_id',
                'county_id',
                'attendance_sheet',
                'payees_upload_mode_id',
                'rejection_reason',
                'file',
                'rejected_by_id',
                'program_activity_id'
                );
                
            $file = $form['file'];

            $mobile_payment = new MobilePayment;

            $mobile_payment->requested_by_id                =   (int)   $form['requested_by_id'];
            $mobile_payment->request_action_by_id           =   (int)   $form['request_action_by_id'];
            $mobile_payment->mobile_payment_type_id         =   (int)   $form['mobile_payment_type_id'];
            $mobile_payment->expense_desc                   =           $form['expense_desc'];
            $mobile_payment->expense_purpose                =           $form['expense_purpose'];
            $mobile_payment->payment_document               =   (int)   $form['payment_document'];
            $mobile_payment->status_id                      =   (int)   $form['status_id'];
            $mobile_payment->project_manager_id             =   (int)   $form['project_manager_id'];
            $mobile_payment->region_id                      =   (int)   $form['region_id'];
            $mobile_payment->county_id                      =   (int)   $form['county_id'];
            $mobile_payment->attendance_sheet               =           $form['attendance_sheet'];
            $mobile_payment->payees_upload_mode_id          =   (int)   $form['payees_upload_mode_id'];
            $mobile_payment->rejection_reason               =           $form['rejection_reason'];
            $mobile_payment->rejected_by_id                 =   (int)   $form['rejected_by_id'];
            if(!empty($form['program_activity_id']))
            $mobile_payment->program_activity_id            =   (int)   $form['program_activity_id'];

            $mobile_payment->status_id                      =   $this->default_status;
            
            $user = JWTAuth::parseToken()->authenticate();
            $mobile_payment->request_action_by_id            =   (int)   $user->id;

            if($mobile_payment->save()) {

                $mobile_payment->disableLogging(); // Do not log the subsequent update(s)

                FTP::connection()->makeDir('/mobile_payments');
                FTP::connection()->makeDir('/mobile_payments/'.$mobile_payment->id);
                FTP::connection()->makeDir('/mobile_payments/'.$mobile_payment->id.'/signsheet');
                FTP::connection()->uploadFile($file->getPathname(), '/mobile_payments/'.$mobile_payment->id.'/signsheet/'.$mobile_payment->id.'.'.$file->getClientOriginalExtension());

                $mobile_payment->attendance_sheet           =   $mobile_payment->id.'.'.$file->getClientOriginalExtension();

                $mobile_payment->ref = "CHAI/MPYMT/#$mobile_payment->id/".date_format($mobile_payment->created_at,"Y/m/d");
                $mobile_payment->save();

                return Response()->json(array('msg' => 'Success: mobile payment added','mobile_payment' => $mobile_payment), 200);
            }

        }catch (JWTException $e){

            return response()->json(['error'=>'something went wrong'], 500);

        }
    }























    /**
     * Operation updateMobilePayment
     *
     * Update an existing mobile_payment.
     *
     *
     * @return Http response
     */
    public function updateMobilePayment()
    {
        $form = Request::all();

        $file = $form['file'];
        $mobile_payment = MobilePayment::find($form['id']);
        $mobile_payment->expense_desc                   =           $form['expense_desc'];
        $mobile_payment->expense_purpose                =           $form['expense_purpose'];
        $mobile_payment->project_manager_id             =   (int)   $form['project_manager_id'];
        if(!empty($form['program_activity_id']))
        $mobile_payment->program_activity_id            =   (int)   $form['program_activity_id'];

        if($mobile_payment->save()) {

            if($file!=0){
                FTP::connection()->makeDir('/mobile_payments');
                FTP::connection()->makeDir('/mobile_payments/'.$mobile_payment->id);
                FTP::connection()->makeDir('/mobile_payments/'.$mobile_payment->id.'/signsheet');
                FTP::connection()->uploadFile($file->getPathname(), '/mobile_payments/'.$mobile_payment->id.'/signsheet/'.$mobile_payment->id.'.'.$file->getClientOriginalExtension());
                $mobile_payment->attendance_sheet           =   $mobile_payment->id.'.'.$file->getClientOriginalExtension();
                $mobile_payment->save();
            }

            return Response()->json(array('msg' => 'Success: Mobile payment updated','mobile_payment' => $mobile_payment), 200);
        }
    }


















    /**
     * Operation getMobilePaymentById
     *
     * Find mobile_payment by ID.
     *
     * @param int $mobile_payment_id ID of mobile_payment to return object (required)
     *
     * @return Http response
     */
    public function getMobilePaymentById($mobile_payment_id)
    {
        $response = [];

        $user = JWTAuth::parseToken()->authenticate();

        try{
            $response   = MobilePayment::with(
                                    'requested_by',
                                    'requested_action_by',
                                    'project',
                                    'account',
                                    'mobile_payment_type',
                                    'invoice',
                                    'status',
                                    'project_manager',
                                    'region',
                                    'county',
                                    'currency',
                                    'rejected_by',
                                    'payees_upload_mode',
                                    'payees',
                                    'approvals',
                                    'logs',
                                    'vouchers',
                                    'payments',
                                    'allocations',
                                    'program_activity'
                                )->findOrFail($mobile_payment_id);


            foreach ($response->allocations as $key => $value) {
                $project = Project::find((int)$value['project_id']);
                $account = Account::find((int)$value['account_id']);
                $objective = ReportingObjective::find((int)$value['objective_id']);

                $response['allocations'][$key]['project']  =   $project;
                $response['allocations'][$key]['account']  =   $account;
                $response['allocations'][$key]['objective']=   $objective;
            }

            foreach ($response->logs as $key => $value) {
                
                $response['logs'][$key]['causer']   =   $value->causer;
                $response['logs'][$key]['subject']  =   $value->subject;
            }

            foreach ($response->approvals as $key => $value) {
                $approver = Staff::find((int)$value['approver_id']);
                $appoval_level = ApprovalLevel::find((int)$value['approval_level_id']);

                $response['approvals'][$key]['approver']  =   $approver;
                $response['approvals'][$key]['approval_level']  =   $appoval_level;
            }

            foreach ($response->payments as $key => $value) {
                $payment_mode           = PaymentMode::find((int)$value['payment_mode_id']);
                $currency               = Currency::find((int)$value['currency_id']);
                $payment_batch          = PaymentBatch::find((int)$value['payment_batch_id']);
                $paid_to_bank_branch    = BankBranch::with('bank')->find((int)$value['paid_to_bank_branch_id']);

                $response['payments'][$key]['payment_mode']   =   $payment_mode;
                $response['payments'][$key]['currency']       =   $currency;
                $response['payments'][$key]['payment_batch']  =   $payment_batch;
                $response['payments'][$key]['paid_to_bank_branch']   =   $paid_to_bank_branch;
            }

            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);

        }catch(Exception $e){

            $response =  ["error"=>"Mobile Payment could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }




















    /**
     * Operation approve
     *
     * Submit/Approve mobile_payment by ID.
     *
     * @param int $mobile_payment_id ID of mobile_payment to return object (required)
     *
     * @return Http response
     */
    public function approve($mobile_payment_id, $several=null)
    {

        $response = [];

        $user = JWTAuth::parseToken()->authenticate();

        try{
            $mobile_payment   = MobilePayment::with(
                                    'requested_by',
                                    'requested_action_by',
                                    'project',
                                    'account',
                                    'mobile_payment_type',
                                    'invoice',
                                    'status',
                                    'project_manager',
                                    'region',
                                    'county',
                                    'currency',
                                    'rejected_by',
                                    'payees_upload_mode',
                                    'payees',
                                    'approvals',
                                    'allocations'
                                )->findOrFail($mobile_payment_id);

            // if (!$user->can("APPROVE_MOBILE_PAYMENT_".$mobile_payment->status_id)){
            //     throw new ApprovalException("No approval permission");             
            // }
           
            $approvable_status  = $mobile_payment->status;
            $mobile_payment->status_id = $mobile_payment->status->new_next_status_id;


            $mobile_payment->disableLogging(); //! Do not log the update
            if($mobile_payment->save()) {

                $mobile_payment   = MobilePayment::with(
                                    'requested_by',
                                    'requested_action_by',
                                    'project',
                                    'account',
                                    'mobile_payment_type',
                                    'invoice',
                                    'status',
                                    'project_manager',
                                    'region',
                                    'county',
                                    'currency',
                                    'rejected_by',
                                    'payees_upload_mode',
                                    'payees',
                                    'approvals',
                                    'allocations'
                                )->findOrFail($mobile_payment_id);

                $approval = new Approval;

                $approval->approvable_id            =   (int)   $mobile_payment->id;
                $approval->approvable_type          =   "mobile_payments";
                $approval->approval_level_id        =   $approvable_status->approval_level_id;
                $approval->approver_id              =   (int)   $user->id;

                if($mobile_payment->status_id!=17){
                    $approval->save();               
                    Mail::queue(new NotifyMobilePayment($mobile_payment));
                }
                // Management approval or accountant approval after corrections
                elseif($mobile_payment->status_id==17){
                    $mgt_approval_time = new \DateTime();
                    $voucher_number = '';

                    // Only create a payment voucher if it's management approval
                    // if($mobile_payment->status_id==4){
                        $v = DB::select('call generate_voucher_no(?,?)',array($mobile_payment->id,"mobile_payments"));
                        $v_result = $v[0];
                        $voucher_number = $v_result['voucher_number'];
                    // }
                    // Get original voucher number if it's being resent to bank
                    // else if($mobile_payment->status_id==13){
                        // if(empty($mobile_payment->migration_id)){
                            // $v = VoucherNumber::where('payable_type', 'mobile_payments')
                            //                 ->where('payable_id', $mobile_payment->id)
                            //                 ->first();
                            // $voucher_number = $v->voucher_number;
                        // }
                        // else{
                        //     $voucher_number = 'CHAI'.$this->pad_zeros(5, $mobile_payment->migration_invoice_id);
                        // }
                    // }
                    
                    /* Get CSV data */
                    // date_default_timezone_set('Africa/Nairobi'); // Set timezone to Nairobi
                    // $date = date('Ymd');

                    // $csv_data = [];
                    
                    // foreach($mobile_payment->payees as $payee){
                    //     $name = '';
                    //     if(empty($payee->registered_name)) $name = $payee->full_name;
                    //     else $name = $payee->registered_name;
                    //     $data = array(
                    //         $date, // date
                    //         '99001', // bank_code
                    //         '', // blank space
                    //         preg_replace("/[^0-9]/", "", $payee->mobile_number), // phone
                    //         $name, // mobile_name
                    //         'NIC', // bank_name
                    //         '', // blank space
                    //         'KES', // currency
                    //         $payee->total, // amount
                    //         $voucher_number // chaipv
                    //     );
                        
                    //     // Add the data to the csv_data array
                    //     array_push($csv_data, $data);}

                    /* Get PDF data */                    
                    // $deputy_director = Staff::findOrFail((int) Config::get('app.director_id'));
                    // $director = Staff::findOrFail(37); //TODO: Pick this from config
                    // $pdf_data = array('mobile_payment' => $mobile_payment,
                    //     'addressee'=>'Maureen Adega',
                    //     'deputy_director'=>$deputy_director,
                    //     'director'=>$director,
                    //     'our_ref'=>$voucher_number
                    // );

                    /* Send Email */
                    Mail::queue(new NotifyMobilePayment($mobile_payment));
                    
                    // Save the approval if the bdirector has approved
                    // if($mobile_payment->status_id==17){
                        $approval->approval_level_id = 4;
                        $mobile_payment->management_approval_at = $mgt_approval_time;
                        // $mobile_payment->voucher_no = $voucher_id;
                        $mobile_payment->save();
                    // }
                    $approval->save();
                }
                // elseif($mobile_payment->status_id==8){
                //     $approval->save();
                // }

                // Logging
                activity()
                   ->performedOn($approval->approvable)
                   ->causedBy($user)
                   ->log('Approved');

                if($several!=true)
                return Response()->json(array('result' => 'Success: mobile payment approved','mobile_payment' => $mobile_payment), 200);
            }

        }catch(ApprovalException $ae){

            $response =  ["error"=>"You do not have the permissions to perform this action at this point"];
            return response()->json($response, 403,array(),JSON_PRETTY_PRINT);
        }catch(Exception $e){
            $response =  ["error"=>$e->getMessage(),"stack"=>$e->getTraceAsString()];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }








    public function sendToBank($mobile_payment_id){
        $response = [];
        try{
            $mobile_payment   = MobilePayment::findOrFail($mobile_payment_id);
            $mobile_payment->disableLogging(); //! Do not log the update

            /* Get CSV data */
            date_default_timezone_set('Africa/Nairobi'); // Set timezone to Nairobi
            $date = date('Ymd');

            $csv_data = [];
            
            foreach($mobile_payment->payees as $payee){
                $name = '';
                if(empty($payee->registered_name)) $name = $payee->full_name;
                else $name = $payee->registered_name;
                $data = array(
                    preg_replace("/[^0-9]/", "", $payee->mobile_number), // phone
                    $name // mobile_name
                );
                
                // Add the data to the csv_data array
                array_push($csv_data, $data);}

            /* Get PDF data */                    
            $deputy_director = Staff::findOrFail((int) Config::get('app.director_id'));
            $director = Staff::findOrFail(37); //TODO: Pick this from config
            $pdf_data = array('mobile_payment' => $mobile_payment,
                'addressee'=>'Maureen Adega',
                'deputy_director'=>$deputy_director,
                'director'=>$director
                // 'our_ref'=>$voucher_number
            );

            /* Send Email */
            Mail::queue(new MobilePaymentInstructBank($mobile_payment, $csv_data, $pdf_data));

            if($mobile_payment->status_id == 1 || $mobile_payment->status_id == 14 || $mobile_payment->status_id == 7){
                $mobile_payment->status_id = 15;  // Sent to Bank Awaiting verification
                // Logging
                activity()
                    ->performedOn($mobile_payment)
                    ->causedBy($this->current_user())
                    ->log('Sent to bank');
            }
            // If it was sent before, move to resent status
            elseif($mobile_payment->status_id == 15){
                $mobile_payment->status_id = 16;  // Resent to Bank Awaiting Verification
                // Logging
                activity()
                    ->performedOn($mobile_payment)
                    ->causedBy($this->current_user())
                    ->log('Resent to bank');
            }
            $mobile_payment->save();
            return Response()->json(array('result' => 'Success: mobile payment sent to bank','mobile_payment' => $mobile_payment), 200);
        }
        catch(Exception $e){
            $response =  ["error"=>$e->getMessage()];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }


    public function markAsUploaded($mobile_payment_id){
        $response = [];
        try{
            $mobile_payment   = MobilePayment::findOrFail($mobile_payment_id);
            $mobile_payment->disableLogging(); //! Do not log the update
            $mobile_payment->status_id = 4;  // Uploaded to bank, awaiting reconciliation
            
            // Logging
            activity()
                ->performedOn($mobile_payment)
                ->causedBy($this->current_user())
                ->log('Uploaded to bank');
            
            $mobile_payment->save();
            return Response()->json(array('result' => 'Success: mobile payment marked as uploaded to bank'), 200);
        }
        catch(Exception $e){
            $response =  ["error"=>$e->getMessage()];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }


    public function requestSignatories($mobile_payment_id){
        try{
            $mobile_payment = MobilePayment::findOrFail($mobile_payment_id);
            Mail::queue(new RequestMPBankSigning($mobile_payment_id));
            activity()
                ->performedOn($mobile_payment)
                ->causedBy($this->current_user())
                ->log('Requested bank signatories');

            return Response()->json(array('result' => 'Success: request sent'), 200);
        }
        catch(Exception $e){
            $response =  ["error"=>"There was an error uploading the mobile payment", "msg"=>$e->getMessage(), "stack"=>$e->getTraceAsString()];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }



















    /**
     * Operation reject
     *
     * Submit/Approve mobile_payment by ID.
     *
     * @param int $mobile_payment_id ID of mobile_payment to return object (required)
     *
     * @return Http response
     */
    public function reject($mobile_payment_id)
    {

        $form = Request::only(
            'rejection_reason'
            );

        $response = [];
        $user = JWTAuth::parseToken()->authenticate();

        try{
            $mobile_payment   = MobilePayment::with(
                                    'requested_by',
                                    'requested_action_by',
                                    'project',
                                    'account',
                                    'mobile_payment_type',
                                    'invoice',
                                    'status',
                                    'project_manager',
                                    'region',
                                    'county',
                                    'currency',
                                    'rejected_by',
                                    'payees_upload_mode',
                                    'payees',
                                    'approvals',
                                    'allocations'
                                )->findOrFail($mobile_payment_id);

            // if (!$user->can("APPROVE_MOBILE_PAYMENT_".$mobile_payment->status_id)){
            //     throw new ApprovalException("No approval permission");             
            // }
           // Set as rejected by bank if it was already approved by management
           // otherwise, set it as a normal rejection 
           if($mobile_payment->status_id==4||$mobile_payment->status_id==12||$mobile_payment->status_id==13) {
               $mobile_payment->status_id = 11;
            }
           else{
                $mobile_payment->status_id = 7;
           }
            $mobile_payment->rejected_by_id            =   (int)   $user->id;
            $mobile_payment->rejected_at              =   date('Y-m-d H:i:s');
            $mobile_payment->rejection_reason             =   $form['rejection_reason'];

            $mobile_payment->disableLogging(); //! Disable logging for the update
            if($mobile_payment->save()) {
                
            // Logging
            $mobile_payment->enableLogging();
            activity()
            ->performedOn($mobile_payment)
            ->causedBy($user)
            ->log('rejected');

                Mail::queue(new NotifyMobilePayment($mobile_payment));

                return Response()->json(array('msg' => 'Success: mobile_payment approved','mobile_payment' => $mobile_payment), 200);
            }

        }catch(ApprovalException $ae){

            $response =  ["error"=>"You do not have the permissions to perform this action at this point"];
            return response()->json($response, 403,array(),JSON_PRETTY_PRINT);
        }catch(Exception $e){

            $response =  ["error"=>"Mobile Payment could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }


































    /**
     * Operation postPayees
     *
     * post mobile_payment payees in acsv by ID.
     *
     * @param int $mobile_payment_id ID of mobile_payment to return object (required)
     *
     * @return Http response
     */
    public function postPayees($mobile_payment_id)
    {
        // $input = Request::all();

        //path params validation


        //not path params validation

        try{
            
            $user = JWTAuth::parseToken()->authenticate();
            $form = Request::only('file');

            $file = $form['file'];

            $ftp = FTP::connection()->getDirListing();

            $mobile_payment = MobilePayment::find($mobile_payment_id);

            $data = Excel::load($file->getPathname(), function($reader) {

            })->get()->toArray();

            foreach ($data as $key => $value) {
                $payee = new MobilePaymentPayee();

                // if((substr($value['phone'],0,6) == "(+254)") && ((int) strlen($value['phone'])== 15)) {
                if(strlen($value['phone'])==9 && substr($value['phone'],0,1)=='7'){
                    
                }else{
                    throw new Exception("Phone number for ".$value['name']." is not of the required format", 1);
                }
            }


            $dt = new \DateTime();
            $invoice_date = $dt->format('Y-m-d');
            DB::statement("UPDATE mobile_payment_payees SET deleted_at = '$invoice_date' WHERE  mobile_payment_id = '$mobile_payment_id' ");
        

            foreach ($data as $key => $value) {
                $payee = new MobilePaymentPayee();

                $payee->mobile_payment_id   = $mobile_payment_id;
                $payee->full_name           = $value['name'];
                $payee->registered_name     = $value['name'];
                $payee->amount              = $value['amount'];
                $payee->mobile_number       = "(+254)".$value['phone'];
                $payee->withdrawal_charges  = $payee->calculated_withdrawal_charges;
                $payee->total               = $payee->calculated_total;

                $payee->save();
            }

            activity()
            ->performedOn($mobile_payment)
            ->causedBy($user)
            ->log('uploaded payees');



            return Response()->json(array('msg' => 'Success: mobile_payment payees uploaded','mobile_payment' => $mobile_payment), 200);
        

        }catch (JWTException $e){

            return response()->json(['error'=>'You are not Authenticated'], 500);

        }catch(Exception $ex){
            return response()->json(['error'=>$ex->getMessage()], 500);
        }


    }
























    /**
     * Operation getDocumentById
     *
     * get mobile_payment document by ID.
     *
     * @param int $mobile_payment_id ID of mobile_payment to return object (required)
     *
     * @return Http response
     */
    public function getDocumentById($mobile_payment_id)
    {
        
        try{
            $mobile_payment   = MobilePayment::findOrFail($mobile_payment_id);

            $data = array(
                'mobile_payment'   => $mobile_payment
                );

            $pdf = PDF::loadView('pdf/mobile_payment', $data);

            $file_contents  = $pdf->stream();

            $response = Response::make($file_contents, 200);

            $response->header('Content-Type', 'application/pdf');

            return $response;
        }catch (Exception $e ){            

            $response       = Response::make("", 500);

            $response->header('Content-Type', 'application/pdf');

            return $response;  

        }
    }



















    /**
     * Operation getAttendanceSheetById
     *
     * get mobile_payment attendance sheet by ID.
     *
     * @param int $mobile_payment_id ID of mobile_payment to return object (required)
     *
     * @return Http response
     */
    public function getAttendanceSheetById($mobile_payment_id)
    {

        try{


            $mobile_payment      = MobilePayment::findOrFail($mobile_payment_id);

            $path           = '/mobile_payments/'.$mobile_payment->id.'/signsheet/'.$mobile_payment->attendance_sheet;

            $path_info      = pathinfo($path);

            $basename       = $path_info['basename'];

            $file_contents  = FTP::connection()->readFile($path);

            $response       = Response::make($file_contents, 200);

            $response->header('Content-Type', 'application/pdf');

            return $response;  
        }catch (Exception $e ){            

            $response       = Response::make(array('error'=>$e->getMessage()), 500);

            // $response->header('Content-Type', 'application/pdf');

            return $response;   

        }
    }


        /**
     * Operation getPaymentVoucherById
     *
     * get mobile_payment payment voucher by ID.
     *
     * @param int $mobile_payment_id ID of mobile_payment to return object (required)
     *
     * @return Http response
     */
    public function getPaymentVoucherById($mobile_payment_id)
    {

        try{
            $mobile_payment   = MobilePayment::findOrFail($mobile_payment_id);
            $voucher_no = '';
            if(empty($mobile_payment->migration_id)){
                if(empty($mobile_payment->voucher_no)) $voucher_no = '-';
                else{
                    // $voucher_no = VoucherNumber::find($mobile_payment->voucher_no);
                    // $voucher_no = $voucher_no->voucher_number;
                    
                    $voucher = VoucherNumber::where('payable_id', $mobile_payment->id)->first();
                    $voucher_no = $voucher->voucher_number;
                }
            }
            else{
                $voucher_no = 'CHAI'.$this->pad_zeros(5, $mobile_payment->migration_invoice_id);
            }
            $vendor = 'MOH OFFICIALS c/o '.Staff::find($mobile_payment->requested_by_id)->full_name;
            $unique_approvals = $this->unique_multidim_array($mobile_payment->approvals, 'approval_level_id');
            $data = array(
                'mobile_payment'   => $mobile_payment,
                'voucher_no' => $voucher_no,
                'vendor' => $vendor,
                'unique_approvals' => $unique_approvals,
                'bank_transaction' => $mobile_payment->bank_transaction
                );

            $pdf = PDF::loadView('pdf/mobile_payment_payment_voucher', $data);

            $file_contents  = $pdf->stream();

            $response = Response::make($file_contents, 200);

            $response->header('Content-Type', 'application/pdf');

            return $response;
        }catch (Exception $e ){  
            $response       = Response::make("", 500);

            $response->header('Content-Type', 'application/pdf');

            return $response;  

        }
    }




















    /**
     * Operation deleteMobilePayment
     *
     * Deletes an mobile_payment.
     *
     * @param int $mobile_payment_id mobile_payment id to delete (required)
     *
     * @return Http response
     */
    public function deleteMobilePayment($mobile_payment_id)
    {
        $deleted = MobilePayment::destroy($mobile_payment_id);

        if($deleted){
            return response()->json(['msg'=>"Mobile Payment deleted"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"Mobile Payment not found"], 404,array(),JSON_PRETTY_PRINT);
        }

    }























    /**
     * Operation submitForApproval
     *
     * Submit mobile_payment by ID.
     *
     * @param int $mobile_payment_id ID of mobile_payment to return object (required)
     *
     * @return Http response
     */
    public function submitForApproval($mobile_payment_id)
    {
        $response = [];
        $user = JWTAuth::parseToken()->authenticate();

        try{
            $mobile_payment = MobilePayment::with(
                                    'requested_by',
                                    'requested_action_by',
                                    'project',
                                    'account',
                                    'mobile_payment_type',
                                    'invoice',
                                    'status',
                                    'project_manager',
                                    'region',
                                    'county',
                                    'currency',
                                    'rejected_by',
                                    'payees_upload_mode',
                                    'payees',
                                    'approvals',
                                    'allocations'
                                )->findOrFail($mobile_payment_id);           

           if (($mobile_payment->total - $mobile_payment->amount_allocated) > 1 ){ //allowance of 1
             throw new NotFullyAllocatedException("This mobile payment has not been fully allocated");             
           }
            if($mobile_payment->status_id == 15 || $mobile_payment->status_id == 16){
                $mobile_payment->requested_at = date('Y-m-d H:i:s');
            }
            // else{
            //     // Logging resubmission
            //     activity()
            //        ->performedOn($mobile_payment)
            //        ->causedBy($user)
            //        ->log('re-submitted');
            // }

            $mobile_payment->disableLogging(); //! Do not log the update
            
            $mobile_payment->status_id = $mobile_payment->status->new_next_status_id;
            if($mobile_payment->save()) {
                // Logging submission
                activity()
                   ->performedOn($mobile_payment)
                   ->causedBy($user)
                   ->log('submitted for approval');
                   
                Mail::queue(new NotifyMobilePayment($mobile_payment));

                return Response()->json(array('msg' => 'Success: mobile_payment submitted','mobile_payment' => $mobile_payment), 200);
            }

        }catch(NotFullyAllocatedException $ae){

            $response =  ["error"=>"Mobile Payment not fully allocated"];
            return response()->json($response, 403,array(),JSON_PRETTY_PRINT);
        }catch(Exception $e){
            $response =  ["error"=>"Mobile Payment could not be found", "msg"=>$e->getMessage()];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }


































    /**
     * Operation approveSeveralMobilePayments
     *
     * Approve several Mobile Payments.
     *
     *
     * @return Http response
     */
    public function approveSeveralMobilePayments()
    {
        try {
            $form = Request::only("mobile_payments");
            $mobile_payment_ids = $form['mobile_payments'];

            foreach ($mobile_payment_ids as $key => $mobile_payment_id) {
                $this->approve($mobile_payment_id, true);
            }

            return response()->json(['mobile_payments'=>$form['mobile_payments']], 201,array(),JSON_PRETTY_PRINT);
            
        } catch (Exception $e) {
             return response()->json(['error'=>"An rerror occured during processing"], 500,array(),JSON_PRETTY_PRINT);
            
        }
    }



    /**
     * Operation resendBankInstruction
     * 
     * Resend bank instruction for failed emails
     * 
     * @return Http response
     */
    public function resendBankInstruction($mobile_payment_id){
        
        try{
            $voucher = VoucherNumber::where('payable_id', $mobile_payment_id)->firstOrFail();
            $voucher_number = $voucher->voucher_number;
            $mobile_payment = MobilePayment::find($mobile_payment_id);

            /* Get CSV data */
            date_default_timezone_set('Africa/Nairobi'); // Set timezone to Nairobi
            $date = date('Ymd');

            $csv_data = [];
            
            foreach($mobile_payment->payees as $payee){
                $data = array(
                    $date, // date
                    '99001', // bank_code
                    '', // blank space
                    preg_replace("/[^0-9]/", "", $payee->mobile_number), // phone
                    $payee->full_name, // mobile_name
                    'NIC', // bank_name
                    '', // blank space
                    'KES', // currency
                    $payee->calculated_total, // amount
                    $voucher_number // chaipv
                );
                
                // Add the data to the csv_data array
                array_push($csv_data, $data);}

            /* Get PDF data */                    
            $deputy_director = Staff::findOrFail((int) Config::get('app.director_id'));
            $director = Staff::findOrFail(37); //TODO: Pick this from db
            $pdf_data = array('mobile_payment' => $mobile_payment,
                'addressee'=>'Maureen Adega', //TODO: Set and pick this from db
                'deputy_director'=>$deputy_director,
                'director'=>$director,
                'our_ref'=>$voucher_number
            );

            /* Send Email */
            Mail::send(new MobilePaymentInstructBank($mobile_payment, $csv_data, $pdf_data, $voucher_number));
            return response()->json(['msg'=>"Mobile Payment email resent"], 200,array(),JSON_PRETTY_PRINT);
            
        } catch (Exception $e) {
             return response()->json(['error'=>$e->getMessage()], 500,array(),JSON_PRETTY_PRINT);
            
        }
        
    }





    /**
     * Operation recallMobilepayment
     * 
     * Recalls a Mobile Payment.
     * 
     * @param int $mobile_payment_id Mobile Payment id to recall (required)
     * 
     * @return Http response
     */
    public function recallMobilePayment($mobile_payment_id)
    {
        $input = Request::all();
        
        $mobile_payment = MobilePayment::find($mobile_payment_id);        

        // Ensure Mobile Payment is in the recallable statuses
        if(!in_array($mobile_payment->status_id, [9,2,3,8])){
            return response()->json(['msg'=>"you do not have permission to do this"], 403, array(), JSON_PRETTY_PRINT);
        }

        $mobile_payment->status_id = 14;

        // Logging recall
        activity()
        ->performedOn($mobile_payment)
        ->causedBy($this->current_user())
        ->log('recalled');

        $mobile_payment->disableLogging(); //! Do not log the update
        
        if($mobile_payment->save()){
            return response()->json(['msg'=>"mobile payment recalled"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"could not recall mobile payment"], 404,array(),JSON_PRETTY_PRINT);
        }

    }























    /**
     * Operation getTemplate
     *
     * Mobile Payments Template.
     *
     *
     * @return Http response
     */
    public function getTemplate()
    {
        try{
            $path           = '/templates/MPESA_TEMPLATE.xlsx';
            $path_info      = pathinfo($path);
            $ext            = $path_info['extension'];
            $basename       = $path_info['basename'];

            $file_contents  = FTP::connection()->readFile($path);
            $url            = storage_path("app".$path);
            $file           = File::get($url);

            $response       = Response::make($file, 200);
            $response->header('Content-Type', $this->get_mime_type($basename));
            return $response;  
        }
        catch (Exception $e ){
            $response       = Response::make("", 500);
            $response->header('Content-Type', 'application/vnd.ms-excel');
            return $response;  
        }
    }















    /**
     * Operation mobilePaymentsGet
     *
     * mobile_payments List.
     *
     *
     * @return Http response
     */
    public function mobilePaymentsGet()
    {
        $input = Request::all();
        //query builder
        $qb = DB::table('mobile_payments');
        $qb->whereNull('deleted_at');

        $response;
        $response_dt;
        $total_records          = $qb->count();
        $records_filtered       = 0;

        // Sent to bank, awaiting reconciliation
        if(array_key_exists('bank_approvable', $input) && $input['bank_approvable']==true){
            $qb->whereIn('status_id', ['4','13']);
            $qb->orderBy('created_at', 'desc');
        }

        // Corrected, awaiting accountant approval
        if(array_key_exists('corrected_approvable', $input) && $input['corrected_approvable']==true){
            $qb->where('status_id', '12');
        }

        // Approved, awaiting payment
        if(array_key_exists('awaiting_payment', $input) && $input['awaiting_payment']==true){
            $qb->where('status_id', '17');
        }

        //if status is set
        if(array_key_exists('status', $input)){
            $status_ = (int) $input['status'];

            if($status_ >-1){
                $qb->where('status_id', $input['status']);
                $qb->where('requested_by_id',$this->current_user()->id);
            }elseif ($status_==-1) {
                $qb->where('requested_by_id',$this->current_user()->id);
            }elseif ($status_==-2) {
                
            }elseif ($status_==-3) {
                $qb->where('project_manager_id',$this->current_user()->id);
            }
        }

        $app_stat = $this->approvable_statuses ;
        //if approvable is set

        if(array_key_exists('approvable', $input)){
            $qb->where(function ($query) use ($app_stat) {                    
                foreach ($app_stat as $key => $value) {
                    $query->orWhere('status_id',$value['id']);
                }
            });
        }

        if(array_key_exists('my_approvables', $input)){
            $current_user =  JWTAuth::parseToken()->authenticate();
            if($current_user->hasRole([
                'super-admin',
                'admin',
                'director',
                'associate-director',
                'financial-controller',
                'program-manager', 
                'accountant', 
                'assistant-accountant']
            )){                   
                $qb->where(function ($query) use ($app_stat,$current_user) {
                    foreach ($app_stat as $key => $value) {
                        $permission = 'APPROVE_MOBILE_PAYMENT_'.$value['id'];
                        if($current_user->can($permission)&&$value['id']==2){
                            $query->orWhere(function ($query1) use ($value,$current_user) {
                                $query1->Where('status_id',$value['id']);
                                $query1->Where('project_manager_id',$current_user->id);
                            });
                        }
                        else if($current_user->can($permission)){
                            $query->orWhere('status_id',$value['id']); 
                        }
                    }
                });
            }
            else{
                $qb->where('id',0);
            }
        }

        //searching
        if(array_key_exists('searchval', $input)){
            $qb->where(function ($query) use ($input) {                
                $query->orWhere('id','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('ref','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('expense_desc','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('expense_purpose','like', '\'%' . $input['searchval']. '%\'');
            });

            $sql = MobilePayment::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];
        }

        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction     = "asc";
            $order_column_name   = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }
            $qb->orderBy($order_column_name, $order_direction);
        }

        //limit
        if(array_key_exists('limit', $input)){
            $qb->limit($input['limit']);
        }

        //migrated
        if(array_key_exists('migrated', $input)){
            $mig = (int) $input['migrated'];
            if($mig==0){
                $qb->whereNull('migration_id');
            }else if($mig==1){
                $qb->whereNotNull('migration_id');
            }
        }

        if(array_key_exists('datatables', $input)){
            //searching
            $qb->where(function ($query) use ($input) {                
                $query->orWhere('id','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('ref','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('expense_desc','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('expense_purpose','like', '\'%' . $input['search']['value']. '%\'');
            });

            $sql = MobilePayment::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];

            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){
                $qb->orderBy($order_column_name, $order_direction);
            }
            
            //limit $ offset
            if((int)$input['start']!= 0 ){
                $response_dt    =   $qb->limit($input['length'])->offset($input['start']);
            }
            else{
                $qb->limit($input['length']);
            }

            $sql = MobilePayment::bind_presql($qb->toSql(),$qb->getBindings());

            $response_dt = DB::select($sql);
            $response_dt = json_decode(json_encode($response_dt), true);
            $response_dt    = $this->append_relationships_objects($response_dt);
            $response_dt    = $this->append_relationships_nulls($response_dt);
            $response_dt = $this->fill_projects_column($response_dt);
            $response       = MobilePayment::arr_to_dt_response( 
                $response_dt, $input['draw'],
                $total_records,
                $records_filtered
                );
        }
        else{
            $sql            = MobilePayment::bind_presql($qb->toSql(),$qb->getBindings());
            $response       = json_decode(json_encode(DB::select($sql)), true);
            if(!array_key_exists('lean', $input)){
                $response       = $this->append_relationships_objects($response);
                $response       = $this->append_relationships_nulls($response);
            }
        }

        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }


















    /**
     * Operation uploadBankFile
     *
     * Upload bank file for reconciliation.
     *
     * @return Http response
     */
    public function uploadBankFile()
    {
        $input = Request::all();
        try{
            $payees_ids = [];
            $payment_refs = [];
            $mobile_payment_ids = [];
            $form = Request::only('file');
            $file = $form['file'];

            $handle = fopen($file, 'r');
            $header = true;
            while($csvLine = fgetcsv($handle, 1000, ',')){
                if ($header) {
                    $header = false;
                } else {
                    $ref = explode(" ", $csvLine[1])[0];
                    array_push($mobile_payment_ids, (int)preg_replace("/[^0-9]/", "", $ref)); 
                }
            }
            // Get only unique values
            $mobile_payment_ids = array_unique($mobile_payment_ids);

            

            // Change status of the mobile payment(s) to paid
            foreach($mobile_payment_ids as $id){
                $mobile_payment = MobilePayment::findOrFail($id);
                $mobile_payment->status_id = 5;
                $mobile_payment->save();
                array_push($payment_refs, $mobile_payment->ref);

                // // Mark payees as paid
                // foreach($mobile_payment->payees as $pid){
                //     $payee = MobilePaymentPayee::findOrFail($pid);
                //     $payee->paid = 1;
                //     $payee->save();
                // }
            }

            return Response()->json(array('msg' => 'Success: Mobile Payment(s) reconciled','payments' => $payment_refs), 200);

        }
        catch (Exception $e){
            return response()->json(['error'=>$e->getMessage()], 500);
        }
    }
























    public function append_relationships_objects($data = array()){

        // print_r($data);

        foreach ($data as $key => $value) {

            $mobile_payment =MobilePayment::find($data[$key]['id']);

            $data[$key]['requested_by']                = $mobile_payment->requested_by;
            $data[$key]['requested_action_by']         = $mobile_payment->requested_action_by;
            $data[$key]['project']                     = $mobile_payment->project;
            $data[$key]['account']                     = $mobile_payment->account;
            $data[$key]['mobile_payment_type']         = $mobile_payment->mobile_payment_type;
            $data[$key]['invoice']                     = $mobile_payment->invoice;
            $data[$key]['status']                      = $mobile_payment->status;
            $data[$key]['project_manager']             = $mobile_payment->project_manager;
            $data[$key]['region']                      = $mobile_payment->region;
            $data[$key]['county']                      = $mobile_payment->county;
            $data[$key]['currency']                    = $mobile_payment->currency;
            $data[$key]['rejected_by']                 = $mobile_payment->rejected_by;
            $data[$key]['payees_upload_mode']          = $mobile_payment->payees_upload_mode;
            $data[$key]['payees']                      = $mobile_payment->payees;
            $data[$key]['approvals']                   = $mobile_payment->approvals;
            $data[$key]['allocations']                 = $mobile_payment->allocations;
            $data[$key]['totals']                      = $mobile_payment->totals;
            $data[$key]['program_activity']            = $mobile_payment->program_activity;

            foreach ($mobile_payment->allocations as $key1 => $value1) {
                $project = Project::find((int)$value1['project_id']);
                $account = Account::find((int)$value1['account_id']);
                $data[$key]['allocations'][$key1]['project']  =   $project;
                $data[$key]['allocations'][$key1]['account']  =   $account;
            }

        }

        return $data;


    }
















    



    public function append_relationships_nulls($data = array()){


        foreach ($data as $key => $value) {


            if($value["requested_by"]==null){
                $data[$key]['requested_by'] = array("full_name"=>"N/A");
                
            }
            if($value["requested_action_by"]==null){
                $data[$key]['requested_action_by'] = array("full_name"=>"N/A");
                
            }
            if($value["project"]==null){
                $data[$key]['project'] = array("project_name"=>"N/A");
                
            }
            if($value["account"]==null){
                $data[$key]['account'] = array("account_name"=>"N/A");
                
            }
            if($value["mobile_payment_type"]==null){
                $data[$key]['mobile_payment_type'] = array("desc"=>"N/A");
                
            }
            if($value["invoice"]==null){
                $data[$key]['invoice'] = array("invoice_title"=>"N/A");
                
            }
            if($value["status"]==null){
                $data[$key]['status'] = array("mobile_payment_status"=>"N/A");
                
            }
            if($value["project_manager"]==null){
                $data[$key]['project_manager'] = array("full_name"=>"N/A");
                
            }
            if($value["region"]==null){
                $data[$key]['region'] = array("region_name"=>"N/A");
                
            }
            if($value["county"]==null){
                $data[$key]['county'] = array("county_name"=>"N/A");
                
            }
            if($value["rejected_by"]==null){
                $data[$key]['rejected_by'] = array("full_name"=>"N/A");
                
            }
            if($value["payees_upload_mode"]==null){
                $data[$key]['payees_upload_mode'] = array("desc"=>"N/A");
                
            }
            if($data[$key]["currency"]==null){
                $data[$key]["currency"] = array("currency_name"=>"N/A");
            }
            if($data[$key]["program_activity"]==null){
                $data[$key]["program_activity"] = array("title"=>"N/A", "description"=>"N/A");
            }
        }

        return $data;


    }




















    public function fill_projects_column($data = array()){

        foreach ($data as $key => $value) {
            $id_holder = '';
            $rpt = false;

            //$query = "SELECT p.id, p.project_code, p.project_name FROM mobile_payments as m join allocations as a on m.id = a.allocatable_id join projects as p on a.project_id = p.id where a.allocatable_id = :val and a.allocatable_type = :alt";
            //$results = DB::select($query, ['val' => $value["id"], 'alt' => 'mobile_payments']);
            
            //query builder
            $qb = DB::table('mobile_payments')
            ->join('allocations', function ($join) use($value) {
                $join->on('mobile_payments.id', '=', 'allocations.allocatable_id')
                ->whereNull('mobile_payments.deleted_at')
                ->where('allocations.allocatable_type', 'mobile_payments')
                ->where('allocations.allocatable_id', $value["id"]);
            })
            ->join('projects', 'allocations.project_id', '=', 'projects.id')
            ->select('projects.id', 'projects.project_code', 'projects.project_name')
            ->get();

            if(count($qb) > 0){
                foreach($qb as $record){
                if($id_holder != $record['id'] && $id_holder != '') $rpt = true;
                $id_holder = $record['id'];

                if($rpt){
                    $data[$key]['project'] = array("project_name"=>'Multiple projects');
                    
                }
                else if(!$rpt){
                    $data[$key]['project'] = array("project_name"=>$record['project_name']);
                }
            }
                
            }
                else if($value["project"]==null){
                    $data[$key]['project'] = array("project_name"=>"N/A");
                    
                }
            

        }
        return $data;


    }


    public function downloadCSV($mobile_payment_id){
        $response = [];
        try{
            $mobile_payment = MobilePayment::findOrFail($mobile_payment_id);
            $mobile_payment->disableLogging(); //! Do not log the update

            /* Get CSV data */
            date_default_timezone_set('Africa/Nairobi'); // Set timezone to Nairobi
            $date = date('Ymd');

            $csv_data = [];

            $v = VoucherNumber::where('payable_type', 'mobile_payments')
                                ->where('payable_id', $mobile_payment->id)
                                ->first();
            $voucher_number = $v->voucher_number;
            
            foreach($mobile_payment->payees as $payee){
                $name = '';
                if(empty($payee->registered_name)) $name = $payee->full_name;
                else $name = $payee->registered_name;
                $data = array(
                    $date, // date
                    '99001', // bank_code
                    '', // blank space
                    preg_replace("/[^0-9]/", "", $payee->mobile_number), // phone
                    $name, // mobile_name
                    'NIC', // bank_name
                    '', // blank space
                    'KES', // currency
                    $payee->total, // amount
                    $voucher_number // chaipv
                );
                
                // Add the data to the csv_data array
                array_push($csv_data, $data);
            }

            return Response()->json(array('csv_data' => $csv_data,'voucher_number' => $voucher_number), 200);
        }
        catch(Exception $e){
            $response =  ["error"=>$e->getMessage()];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }


    public function markAsPaid(){
        try{
            $input = Request::all();

            if(empty($input['bank_ref']) && empty($input['amount'])){
                return response()->json(['error'=>'All fields are required'], 422);
            }

            $mobile_payment = MobilePayment::findOrFail($input['mobile_payment_id']);
            $voucher_no = $mobile_payment->voucher_number->voucher_number ?? '';

            $bank_trans = $mobile_payment->bank_transactions;
            $already_saved = false;
            foreach($bank_trans as $tran){
                if(trim($input['bank_ref']) == $tran->bank_ref) $already_saved = true;
            }
            if(!$already_saved){
                // Save transaction details
                $bank_transaction = array();
                $bank_transaction['bank_ref'] = trim($input['bank_ref']);
                $bank_transaction['chai_ref'] = $voucher_no;
                $bank_transaction['inputter'] = $this->current_user()->name;
                $bank_transaction['approver'] = 'N/A';
                $bank_transaction['amount'] = trim($input['amount']);
                $bank_transaction['txn_date'] =  date('Y-m-d');
                $bank_transaction['txn_time'] = date('H:m').'Hrs';
                // $bank_transaction['processing_date'] = $row['processing_date'];
                $bank_transaction['narrative'] = substr($mobile_payment->expense_desc, 0, 300).'...';
                DB::table('bank_transactions')->insert($bank_transaction);
            }

            if($mobile_payment->status_id != 5){   // It was already marked as paid
                $mobile_payment->disableLogging();
                $mobile_payment->status_id = 5; //Paid
                $mobile_payment->save();
                activity()
                    ->performedOn($mobile_payment)
                    ->causedBy($this->current_user())
                    ->log('Paid');
                    
                return Response()->json(array('success' => 'Mobile Payment already marked as paid'), 200);
            }
            
            return Response()->json(array('success' => 'Mobile Payment marked as paid'), 200);
        }
        catch(Exception $e){
            return response()->json(['error'=>'Something went wrong during processing', 'msg'=>$e->getMessage()], 500);
        }
    }









    /**
     * Adds zeros at the beginning of string until the desired
     * length is reached.
     */
    public function pad_zeros($desired_length, $data){
        if(strlen($data)<$desired_length){
            return str_repeat('0', $desired_length-strlen($data)).$data;
        }
        else{
            return $data;
        }
    }





    public function downloadDump(){
        $input = Request::all();
        $start_date = date('Y-m-d', strtotime($input['start_date'])) ?? '';
        $end_date = date('Y-m-d', strtotime($input['end_date'])) ?? '';

        $mps = MobilePayment::query();
        if(!empty($start_date) && !empty($end_date)){
            $mps = $mps->where('created_at', '>=', $start_date)->where('created_at', '<=', $start_date);
        }

        $mps = $mps->get();

        $excel_data = array();

        $headings = array('id','ref','submitted_at','requested_by','description','expense_purpose','payees_upload_mode','status','
        currency','project_manager','registered_name','mobile_number','amount','withdrawal_charges','total',
            'rejected_by','rejection_reason','rejected_at','management_approval_at','voucher_number','total_amount');

        
        foreach($mps as $mp){
            $row = array();
            $row['id'] = $mp->id;
            $row['ref'] = $mp->ref;
            $row['submitted_at'] = $mp->requested_at ?? "";
            $row['requested_by'] = $mp->requested_by->name ?? '-';
            $row['description'] = $mp->expense_desc ?? '';
            $row['expense_purpose'] = $mp->expense_purpose;
            $row['payees_upload_mode'] = $mp->payees_upload_mode->desc ?? '';
            $row['status'] = $mp->status->mobile_payment_status ?? "";
            $row['currency'] = $mp->currency->currency_name ?? '';
            $row['project_manager'] = $mp->project_manager->name ?? '';
            $row['rejected_by'] = $mp->rejected_by->name ?? "";
            $row['rejection_reason'] = $mp->rejection_reason ?? '';
            $row['rejected_at'] = $mp->rejected_at ?? '';
            $row['management_approval_at'] = $mp->management_approval_at ?? '';
            $row['voucher_number'] = $mp->voucher_number->voucher_number ?? '';
            $row['total_amount'] = number_format((float)$mp->totals, 2, '.', '') ?? '';
            $row['registered_name'] = '';
            $row['mobile_number'] = '';
            $row['amount'] = '';
            $row['qty_description'] = '';
            $row['withdrawal_charges'] = '';
            $row['total'] = '';

            $excel_data[] = $row;

            foreach($mp->payees as $payee){
                $row = array();
                $row['id'] = '';
                $row['ref'] = '';
                $row['submitted_at'] = "";
                $row['requested_by'] = '';
                $row['description'] = '';
                $row['expense_purpose'] = '';
                $row['payees_upload_mode'] = '';
                $row['status'] = "";
                $row['currency'] = '';
                $row['project_manager'] = '';
                $row['rejected_by'] = "";
                $row['rejection_reason'] = '';
                $row['rejected_at'] = '';
                $row['management_approval_at'] = '';
                $row['voucher_number'] = '';
                $row['total_amount'] = '';
                $row['registered_name'] = $payee->item;
                $row['mobile_number'] = $payee->mobile_number;
                $row['amount'] = $payee->amount;
                $row['qty_description'] = $payee->qty_description;
                $row['withdrawal_charges'] = $payee->withdrawal_charges;
                $row['total'] = number_format((float)$payee->total, 2, '.', '');

                $excel_data[] = $row;
            }
        }

        $headers = [
            'Access-Control-Allow-Origin'      => '*',
            'Allow'                            => 'GET, POST, OPTIONS',
            'Access-Control-Allow-Headers'     => 'Origin, Content-Type, Accept, Authorization, X-Requested-With',
            'Access-Control-Allow-Credentials' => 'true'
        ];
        // Build excel
        $file = Excel::create('Mobile Payments', function($excel) use ($excel_data) {

            // Set the title
            $excel->setTitle('Mobile Payments');

            // Chain the setters
            $excel->setCreator('GIFMS')->setCompany('Clinton Health Access Initiative - Kenya');

            $excel->setDescription('A list of Mobile Payments and their payees');

            $headings = array('id','ref','submitted_at','requested_by','description','expense_purpose','payees_upload_mode','status','currency','project_manager',
            'registered_name','mobile_number','amount','withdrawal_charges','total',
            'rejected_by','rejection_reason','rejected_at','management_approval_at','voucher_number','total_amount');

            $excel->sheet('Mobile Payments', function ($sheet) use ($excel_data, $headings) {
                foreach($excel_data as $data_row){

                    $sheet->appendRow($data_row);
                }
                
                $sheet->prependRow(1, $headings);
                $sheet->mergeCells('AK:O1');
                $sheet->getCell('K1')->setValue('attendance sheet');
                $sheet->setFontSize(10);
                $sheet->setHeight(1, 25);
                $sheet->row(1, function($row){
                    $row->setFontSize(11);
                    $row->setFontWeight('bold');
                    $row->setAlignment('center');
                    $row->setValignment('center');
                    $row->setBorder('none', 'thin', 'none', 'thin');
                    $row->setBackground('#004080');                        
                    $row->setFontColor('#ffffff');
                });
                $sheet->setWidth(array(
                    'B' => 15,
                    'C' => 20,
                    'D' => 20,
                    'E' => 15,
                    'F' => 35,
                    'J' => 15,
                    'K' => 20,
                    'L' => 20
                ));
            });

        })->download('xlsx', $headers);
        
    }






}
