<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator bank_branch.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;

use App\Models\BankingModels\BankBranch;
use Exception;
class BankBranchApi extends Controller
{
    /**
     * Operation addBankBranch
     * Add a new bank_branch.
     * @return Http response
     */
    public function addBankBranch()
    {
        $form = Request::all();
        $bank_branch = new BankBranch;
        $bank_branch->branch_name = $form['branch_name'];
        $bank_branch->bank_id = $form['bank_id'];
        $bank_branch->branch_code = $form['branch_code'];
        if($bank_branch->save()) {
            return Response()->json(array('msg' => 'Success: bank_branch added','bank_branch' => $bank_branch), 200);
        }
    }




    /**
     * Operation updateBankBranch
     * Update an existing bank_branch.
     * @return Http response
     */
    public function updateBankBranch()
    {
        $form = Request::all();
        $bank_branch = BankBranch::find($form['id']);
        $bank_branch->branch_name = $form['branch_name'];
        $bank_branch->bank_id = $form['bank_id'];
        $bank_branch->branch_code  = $form['branch_code'];
        if($bank_branch->save()) {
            return Response()->json(array('msg' => 'Success: bank_branch updated','bank_branch' => $bank_branch), 200);
        }
    }
    


    /**
     * Operation deleteBankBranch
     * Deletes an bank_branch.
     * @param int $bank_branch_id bank_branch id to delete (required)
     * @return Http response
     */
    public function deleteBankBranch($bank_branch_id)
    {
        $deleted = BankBranch::destroy($bank_branch_id);
        if($deleted){
            return response()->json(['msg'=>"bank_branch deleted"], 200);
        }else{
            return response()->json(['error'=>"Something went wrong"], 500);
        }
    }




    /**

     * Operation getBankBranchById
     * Find bank_branch by ID.
     * @param int $bank_branch_id ID of bank_branch to return object (required)
     * @return Http response
     */
    public function getBankBranchById($bank_branch_id)
    {
        try{
            $response = BankBranch::findOrFail($bank_branch_id);           
            return response()->json($response, 200);

        }catch(Exception $e){
            return response()->json(["error"=>"Something went wrong"], 500);
        }
    }




    /**
     * Operation bankBranchesGet
     * bank_branches List.
     * @return Http response
     */
    public function bankBranchesGet()
    {
        $input = Request::all();
        //query builder
        $qb = BankBranch::query();
        if(!array_key_exists('lean', $input)){
            $qb = BankBranch::with('bank');
        }

        $total_records = $qb->count();
        $records_filtered = 0;

        //searching
        if(array_key_exists('searchval', $input)){
            $qb = $qb->where(function ($query) use ($input) {                
                $query->orWhere('bank_branches.branch_name','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('bank_branches.branch_code','like', '\'%' . $input['searchval']. '%\'');
            });

            $records_filtered = (int) $qb->count();
        }

        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction = "asc";
            $order_column_name = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }
            $qb = $qb->orderBy($order_column_name, $order_direction);
        }

        //limit
        if(array_key_exists('limit', $input)){
            $qb = $qb->limit($input['limit']);
        }

        //bank_id
        if(array_key_exists('bank_id', $input)){
            $qb = $qb->where('bank_id', $input['bank_id']);
        }

        if(array_key_exists('datatables', $input)){
            //searching
            if(!empty($input['search']['value'])){
                $qb = $qb->where(function ($query) use ($input) {
                    $query->orWhere('bank_branches.branch_name','like', '\'%' . $input['search']['value']. '%\'');
                    $query->orWhere('bank_branches.branch_code','like', '\'%' . $input['search']['value']. '%\'');
                });
            }

            $records_filtered = $qb->count();

            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){
                $qb = $qb->orderBy($order_column_name, $order_direction);
            }

            //limit $ offset
            if((int)$input['start']!= 0 ){
                $response_dt = $qb->limit($input['length'])->offset($input['start']);
            }else{
                $qb = $qb->limit($input['length']);
            }
            $response = BankBranch::arr_to_dt_response( 
                $qb->get(), $input['draw'],
                $total_records,
                $records_filtered
                );
        }
        else {
            $response = $qb->get();
        }

        return response()->json($response, 200);
    }
     
}