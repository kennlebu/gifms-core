<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator permission.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;

use App\Models\StaffModels\Permission;
use App\Models\StaffModels\Staff;
use Exception;

class PermissionApi extends Controller
{
    /**
     * Operation addPermission
     *
     * Add a new permission.
     *
     *
     * @return Http response
     */
    public function addPermission()
    {
        $form = Request::only(
            'name',
            'display_name',
            'description',
            'entity',
            'operation_type',
            'at_status_id',
            'approval_level_id'
            );

        $permission = new Permission;
        $permission->name                              =         $form['name'];
        $permission->display_name                      =         $form['display_name'];
        $permission->description                       =         $form['description'];
        $permission->entity                            =         $form['entity'];
        $permission->operation_type                    =         $form['operation_type'];
        $permission->at_status_id                      =   (int) $form['at_status_id'];
        $permission->approval_level_id                 =   (int) $form['approval_level_id'];

        if($permission->save()) {
            return Response()->json(array('msg' => 'Success: permission added','permission' => $permission), 200);
        }
    }
    




















    /**
     * Operation updatePermission
     *
     * Update an existing permission.
     *
     *
     * @return Http response
     */
    public function updatePermission()
    {
        $form = Request::only(
            'id',
            'name',
            'display_name',
            'description',
            'entity',
            'operation_type',
            'at_status_id',
            'approval_level_id'
            );

        $permission = Permission::find($form['id']);
        $permission->name                              =         $form['name'];
        $permission->display_name                      =         $form['display_name'];
        $permission->description                       =         $form['description'];
        $permission->entity                            =         $form['entity'];
        $permission->operation_type                    =         $form['operation_type'];
        $permission->at_status_id                      =   (int) $form['at_status_id'];
        $permission->approval_level_id                 =   (int) $form['approval_level_id'];

        if($permission->save()) {
            return Response()->json(array('msg' => 'Success: permission updated','permission' => $permission), 200);
        }
    }
    




















    /**
     * Operation deletePermission
     *
     * Deletes an permission.
     *
     * @param int $permission_id permission id to delete (required)
     *
     * @return Http response
     */
    public function deletePermission($permission_id)
    {
        $deleted = Permission::destroy($permission_id);
        if($deleted){
            return response()->json(['msg'=>"permission deleted"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"Something went wrong"], 500,array(),JSON_PRETTY_PRINT);
        }
    }
    
    



















    /**

     * Operation getPermissionById
     *
     * Find permission by ID.
     *
     * @param int $permission_id ID of permission to return object (required)
     *
     * @return Http response
     */
    public function getPermissionById($permission_id)
    {
        try{
            $response   = Permission::findOrFail($permission_id);           
            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
        }catch(Exception $e){
            $response =  ["error"=>"Something went wrong"];
            return response()->json($response, 500,array(),JSON_PRETTY_PRINT);
        }
    }
    




















    /**
     * Operation permissionsGet
     *
     * permissions List.
     *
     *
     * @return Http response
     */
    public function permissionsGet()
    {
        $input = Request::all();
        //query builder
        $qb = DB::table('permissions');

        $qb->whereNull('permissions.deleted_at');

        $response;
        $response_dt;

        $total_records          = $qb->count();
        $records_filtered       = 0;

        //searching
        if(array_key_exists('searchval', $input)){
            $qb->where(function ($query) use ($input) {                
                $query->orWhere('permissions.id','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('permissions.name','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('permissions.display_name','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('permissions.description','like', '\'%' . $input['searchval']. '%\'');
            });

            $sql = Staff::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];
        }

        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction     = "asc";
            $order_column_name   = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }
            $qb->orderBy($order_column_name, $order_direction);
        }

        //limit
        if(array_key_exists('limit', $input)){
            $qb->limit($input['limit']);
        }

        if(array_key_exists('datatables', $input)){
            //searching
            $qb->where(function ($query) use ($input) {                
                $query->orWhere('permissions.id','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('permissions.name','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('permissions.display_name','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('permissions.description','like', '\'%' . $input['search']['value']. '%\'');
            });

            $sql = Staff::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];

            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){
                $qb->orderBy($order_column_name, $order_direction);
            }

            //limit $ offset
            if((int)$input['start']!= 0 ){
                $response_dt    =   $qb->limit($input['length'])->offset($input['start']);
            }else{
                $qb->limit($input['length']);
            }

            $sql = Staff::bind_presql($qb->toSql(),$qb->getBindings());

            $response_dt = DB::select($sql);
            $response_dt = json_decode(json_encode($response_dt), true);
            $response_dt    = $this->append_relationships_objects($response_dt);
            $response_dt    = $this->append_relationships_nulls($response_dt);
            $response       = Staff::arr_to_dt_response( 
                $response_dt, $input['draw'],
                $total_records,
                $records_filtered
                );
        }
        else{
            $sql            = Staff::bind_presql($qb->toSql(),$qb->getBindings());
            $response       = json_decode(json_encode(DB::select($sql)), true);
            if(!array_key_exists('lean', $input)){
                $response       = $this->append_relationships_objects($response);
                $response       = $this->append_relationships_nulls($response);
            }
        }

        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }




















    public function append_relationships_objects($data = array()){
        foreach ($data as $key => $value) {
            $permissions = Permission::find($data[$key]['id']);            
            $data[$key]['approval_level'] = $permissions->approval_level;
        }

        return $data;
    }










    



    public function append_relationships_nulls($data = array()){
        foreach ($data as $key => $value) {
            if($data[$key]["approval_level"]==null){
                $data[$key]["approval_level"] = array("approval_level"=>"N/A");
            }
        }

        return $data;
    }
}
