<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;
use JWTAuth;
use Illuminate\Support\Facades\Request;
use App\Models\AllocationModels\Allocation;
use App\Models\AdvancesModels\Advance;
use App\Models\ClaimsModels\Claim;
use App\Models\InvoicesModels\Invoice;
use App\Models\MobilePaymentModels\MobilePayment;
use App\Models\AccountingModels\Account;
use App\Models\AllocationModels\OfficeCostAllocation;
use App\Models\AllocationModels\OfficeCostAllocationItem;
use App\Models\ProjectsModels\Project;
use Excel;
use Illuminate\Http\Request as HttpRequest;
use Illuminate\Support\Facades\DB;

class AllocationApi extends Controller
{
    /**
     * Operation addAllocation
     *
     * Add a new allocation.
     *
     *
     * @return Http response
     */
    public function addAllocation()
    {
        $allocation = new Allocation;

        try{
            $form = Request::all();
            $allocation->account_id             =               $form['account_id'];
            $allocation->allocatable_id         =               $form['allocatable_id'];
            $allocation->allocatable_type       =               $form['allocatable_type'];
            $allocation->amount_allocated       =               $form['amount'];
            if(!empty($form['month']))
            $allocation->allocation_month       =               $form['month'];
            $allocation->percentage_allocated   =               $form['percentage'];
            $allocation->project_id             =               $form['project_id'];
            $allocation->allocation_purpose     =               $form['purpose'];
            if(!empty($form['year']))
            $allocation->allocation_year        =               $form['year'];
            if(!empty($form['allocation_step']))
            $allocation->allocation_step        =               $form['allocation_step'];
            if(!empty($form['activity_id']))
            $allocation->activity_id = $form['activity_id'];
            if(!empty($form['objective_id']))
            $allocation->objective_id = $form['objective_id'];

            $user = JWTAuth::parseToken()->authenticate();
            $allocation->allocated_by_id            =   (int)   $user->id;
            $allocation->disableLogging();

            if($allocation->save()) {
                activity()
                   ->performedOn($allocation->allocatable)
                   ->causedBy($user)
                   ->log('Allocated');
                return Response()->json(array('success' => 'allocation added','allocation' => $allocation), 200);
            }

        }catch (JWTException $e){
            return response()->json(['error'=>'You are not Authenticated'], 500);
        }
    }


















    
    /**
     * Operation updateAllocation
     *
     * Update an existing allocation.
     *
     *
     * @return Http response
     */
    public function updateAllocation()
    {
        try{
            $form = Request::all();

            $allocation = Allocation::findOrFail($form['id']);
            $allocation->account_id             =               $form['account_id'];
            $allocation->allocatable_id         =               $form['allocatable_id'];
            $allocation->allocatable_type       =               $form['allocatable_type'];
            $allocation->amount_allocated       =               $form['amount'];
            if(!empty($form['month']))
            $allocation->allocation_month       =               $form['month'];
            $allocation->percentage_allocated   =               $form['percentage'];
            $allocation->project_id             =               $form['project_id'];
            $allocation->allocation_purpose     =               $form['purpose'];
            if(!empty($form['year']))
            $allocation->allocation_year        =               $form['year'];
            if(!empty($form['activity_id']))
            $allocation->activity_id = $form['activity_id'];
            if(!empty($form['objective_id']))
            $allocation->objective_id = $form['objective_id'];

            $user = JWTAuth::parseToken()->authenticate();
            $allocation->allocated_by_id            =   (int)   $user->id;
            $allocation->disableLogging();

            if($allocation->save()) {
                $user = JWTAuth::parseToken()->authenticate();
                activity()
                   ->performedOn($allocation->allocatable)
                   ->causedBy($user)
                   ->log('re-allocated');
                $allocation->save();
                return Response()->json(array('success' => 'allocation updated','allocation' => $allocation), 200);
            }

        }catch (JWTException $e){
            return response()->json(['error'=>'You are not Authenticated'], 401);
        }
        catch (\Exception $e){
            return response()->json(['error'=>'Something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }


















    
    /**
     * Operation deleteAllocation
     *
     * Deletes an allocation.
     *
     * @param int $allocation_id allocation id to delete (required)
     *
     * @return Http response
     */
    public function deleteAllocation($allocation_id)
    {
        $allocation = Allocation::findOrFail($allocation_id);
        $allocation->disableLogging();
        $user = JWTAuth::parseToken()->authenticate();
        activity()
           ->performedOn($allocation->allocatable)
           ->causedBy($user)
           ->log('de-allocated');
               
        $deleted_allocation = Allocation::destroy($allocation_id);

        if($deleted_allocation){
            return response()->json(['msg'=>"Allocation deleted"], 200);
        }else{
            return response()->json(['error'=>"Something went wrong"], 500);
        }
    }


















    
    /**
     * Operation getAllocationById
     *
     * Find allocation by ID.
     *
     * @param int $allocation_id ID of allocation to return object (required)
     *
     * @return Http response
     */
    public function getAllocationById($allocation_id)
    {
        $response = [];

        try{
            $response   = Allocation::with( 
                                        'allocatable',
                                        'allocated_by',
                                        'project',
                                        'account',
                                        'objective'
                                    )->findOrFail($allocation_id);

            return response()->json($response, 200);

        }catch(Exception $e){
            $response =  ["error"=>"Allocation could not be found"];
            return response()->json($response, 404);
        }
    }





    /**
     * Operation uploadAllocations
     * CSV file with allocations
     * @return Http response
     */
    public function uploadAllocations(){
        $form = Request::all();

        try{
            $file = $form['file'];
            $payable_type = $form['payable_type'];
            $payable_id = $form['payable_id'];            
            $user = JWTAuth::parseToken()->authenticate();
            $payable = null;
            $total = 0;

            if($payable_type=='claims'){
                $payable = Claim::find($payable_id);
                $total = $payable->total;
            }
            else if($payable_type=='advances'){
                $payable = Advance::find($payable_id);
                $total = $payable->total;
            }
            else if($payable_type=='invoices'){
                $payable = Invoice::find($payable_id);
                $total = $payable->total;
            }
            else if($payable_type=='mobile_payments'){
                $payable = MobilePayment::find($payable_id)->with('totals');
                $total = $payable->totals;
            }

            $data = Excel::load($file->getPathname())->get()->toArray();

            $allocations_array = [];
            foreach ($data as $key => $value) {
                $allocation = new Allocation();

                if(!empty($value['pid'])){
                    try{
                        $project = Project::whereRaw("TRIM(project_code) = '".trim($value['pid'])."'")->first();
                        $account = Account::whereRaw("TRIM(account_code) = '".trim($value['account_code'])."'")->first();

                        if(empty($account)){
                            return response()->json(["error"=>'Account '.trim($value['account_code']).' not found. Please use form to allocate.'], 404);
                        }
                        if(empty($project)){
                            return response()->json(["error"=>'Project '.trim($value['pid']).' not found. Please use form to allocate.'], 404);
                        }
    
                        $allocation->allocatable_id = $payable_id;
                        $allocation->allocatable_type = $payable_type;
                        $allocation->amount_allocated = $value['amount_allocation'];
                        $allocation->allocation_purpose = $value['specific_journal_rference'];
                        $allocation->percentage_allocated = (string) $this->getPercentage($value['amount_allocation'], $total);
                        $allocation->allocated_by_id =  (int) $user->id;
                        $allocation->account_id =  $account->id;
                        $allocations_array[] = $allocation;
    
                    }
                    catch(\Exception $e){
                        $response =  ["error"=>'Account or Project not found. Please use form to allocate.',
                                        "msg"=>$e->getMessage()];
                        return response()->json($response, 404);
                    }
                        $allocation->project_id = $project->id;
                }
            }

            foreach($allocations_array as $allocation){
                $allocation->save();
            }

            // Logging
            activity()
                ->performedOn($payable)
                ->causedBy($user)
                ->log('Uploaded allocations');
            return Response()->json(['success' => 'allocations added','payable' => $payable], 200);

        }
        catch(\Exception $e){
            return response()->json(['error'=>'Something went wrong'], 500);
        }
    }

    public function getPercentage($amount, $total){
        return ($amount / $total) * 100;
    }

    public function applyOfficeCostShare(HttpRequest $request) {
        $cost_allocations = OfficeCostAllocation::with('items')->whereYear('date', date('Y'))->whereMonth('date', date('m'))->first();
        if(empty($cost_allocations)) {
            return response()->json(['error'=>'There are no office allocations for this month'], 403);
        }

        $allocation_purpose = '';
        if($request->allocatable_type == 'invoices') {
            $allocatable = Invoice::find($request->allocatable_id);
            $allocation_purpose = $allocatable->expense_desc.'; '.$allocatable->expense_purpose;
        }
        else if($request->allocatable_type == 'claims') {
            $allocatable = Claim::find($request->allocatable_id);
            $allocation_purpose = $allocatable->expense_desc.'; '.$allocatable->expense_purpose;
        }
        else if($request->allocatable_type == 'mobile_paymetns') {
            $allocatable = MobilePayment::find($request->allocatable_id);
            $allocation_purpose = $allocatable->expense_desc.'; '.$allocatable->expense_purpose;
        }

        foreach($cost_allocations->items as $percentage) {
            $allocation = new Allocation();
            $allocation->account_id = $percentage->account_id;
            $allocation->allocatable_id = $request->allocatable_id;
            $allocation->allocatable_type = $request->allocatable_type;
            $allocation->amount_allocated = round(($request->amount * $percentage->percentage) / 100, 2);
            $allocation->percentage_allocated = $percentage->percentage;
            $allocation->project_id = $percentage->project_id;
            $allocation->allocation_purpose = $allocation_purpose;

            $allocation->allocated_by_id = $this->current_user()->id;
            $allocation->disableLogging();
            $allocation->save();
        }

        activity()
            ->performedOn($allocation->allocatable)
            ->causedBy($this->current_user())
            ->log('Applied office cost allocations');

        return response()->json(['success' => 'Office cost allocations applied'], 200);
    }

    public function getOfficeCostAllocations(HttpRequest $request) {
        try{
            $input = Request::all();

            $allocations = OfficeCostAllocation::with('items.project', 'items.account','created_by');

            if(array_key_exists('month', $input)){                            // Month
                $allocations = $allocations->whereMonth('date', date('m', strtotime($input['month'])))
                                            ->whereYear('date', date('Y', strtotime($input['month'])));
            }

            if(!empty(array_key_exists('datatables', $input))){             // Datatables
                    $total_records = $allocations->count();

                    $records_filtered = $allocations->count();
        
                    //ordering
                    $order_column_id    = (int) $input['order'][0]['column'];
                    $order_column_name  = $input['columns'][$order_column_id]['order_by'];
                    $order_direction    = $input['order'][0]['dir'];
        
                    if($order_column_name!=''){
                        $allocations = $allocations->orderBy($order_column_name, $order_direction);
                    }
        
                    //limit offset
                    if((int)$input['start']!= 0 ){
                        $allocations = $allocations->limit($input['length'])->offset($input['start']);
                    }
                    else{
                        $allocations = $allocations->limit($input['length']);
                    }
        
                    $allocations = $allocations->get();
        
                    $allocations = OfficeCostAllocation::arr_to_dt_response( 
                        $allocations, $input['draw'],
                        $total_records,
                        $records_filtered
                        );
            }
            else{
                $allocations = $allocations->get();
            }

            return response()->json($allocations, 200); 
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }   
    }

    public function addOfficeCostAllocations(HttpRequest $request) {
        try {
            $exists = OfficeCostAllocation::whereYear('date', date('Y'))->whereMonth('date', date('m'))->exists();
            if($exists) {
                return response()->json(['error'=>'There is already an allocation for this month'], 403);
            }

            $allocation = new OfficeCostAllocation();
            $allocation->date = $request->date;
            $allocation->created_by_id = $this->current_user()->id;
            $allocation->disableLogging();
            $allocation->save();

            $allocation_items = json_decode($request->allocations);
            foreach($allocation_items as $item) {
                OfficeCostAllocationItem::create([
                    'office_cost_allocation_id' => $allocation->id,
                    'percentage' => $item->percentage,
                    'account_id' => $item->account_id,
                    'project_id' => $item->project_id
                ]);
            }

            return response()->json(['msg' => 'success'], 200);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }

    public function deleteOfficeCostAllocation($id) {
        $allocation = OfficeCostAllocation::with('items')->find($id);
        $allocation->delete();

        foreach($allocation->items as $item) {
            $cost_item = OfficeCostAllocationItem::find($item->id);
            $cost_item->disableLogging();
            $cost_item->delete();
        }

        return response()->json(['msg' => 'success'], 200);
    }

    public function getOfficeCostAllocationById($id) {
        try {
            $allocation = OfficeCostAllocation::with('items.account', 'items.project')->find($id);
            return response()->json($allocation, 200);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }

    public function updateOfficeCostAllocation(HttpRequest $request) {
        try {
            $allocation = OfficeCostAllocation::findOrFail($request->id);
            $allocation->date = date('Y-m-d', strtotime($request->date));
            $allocation->disableLogging();
            $allocation->save();

            $allocation_items = json_decode($request->allocations);
            foreach($allocation_items as $item) {
                $allocation_item = OfficeCostAllocationItem::find($item->id);
                $allocation_item->percentage = $item->percentage;
                $allocation_item->account_id = $item->account_id;
                $allocation_item->project_id = $item->project_id;
                $allocation_item->disableLogging();
                $allocation_item->save();
            }

            return response()->json(['msg' => 'success'], 200);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
}
