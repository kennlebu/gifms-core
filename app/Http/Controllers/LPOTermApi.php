<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\Models\LPOModels\LpoTerm;
use JWTAuth;
use App\Models\LPOModels\Lpo;

class LPOTermApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }
































    

    /**
     * Operation addLpoTerm
     *
     * Add a new lpo term.
     *
     *
     * @return Http response
     */
    public function addLpoTerm()
    {
        $input = Request::all();

        $lpo_term = new LpoTerm;


        try{


            $form = Request::all();
            $is_hotel = false;

            $term_exists = LpoTerm::where('lpo_id', $form['lpo_id'])
                                ->where('terms', 'like', '\'%Day 1 to be charged as per confirmed number%\'')
                                ->first();
            if(array_key_exists('for_hotel', $form) && empty($term_exists)){
                $lpo = LPO::find($form['lpo_id']);
                if($lpo->lpo_type == 'prenegotiated'){
                    if($lpo->supplier->supply_category_id == 1 || $lpo->supplier->supply_category_id == 2){    //Conferences (incl Accomodation), Accomodation Only
                        $is_hotel = true;
                    }
                }
                else{
                    if($lpo->preffered_quotation->supplier->supply_category_id == 1 || $lpo->preffered_quotation->supplier->supply_category_id == 2){
                        $is_hotel = true;
                    }
                }
            }

            if(array_key_exists('for_hotel', $form) && !$is_hotel){
                return Response()->json(array('success' => 'not a hotel'), 200);
            }

            $lpo_term->lpo_id                     =   (int)       $form['lpo_id'];
            $lpo_term->terms                      =               $form['terms'];
            $lpo_term->lpo_migration_id           =     0 ;


            if($lpo_term->save()) {

                $lpo = LPO::find($lpo_term->lpo_id);
                $user = JWTAuth::parseToken()->authenticate();
                activity()
                   ->performedOn($lpo)
                   ->causedBy($user)
                   ->log('added terms');

                return Response()->json(array('success' => 'lpo term added','lpo_term' => $lpo_term), 200);
            }


        }catch (JWTException $e){

                return response()->json(['error'=>'You are not Authenticated'], 500);

        }

    }
































    
    /**
     * Operation updateLpoTerm
     *
     * Update an existing LPO Term.
     *
     *
     * @return Http response
     */
    public function updateLpoTerm()
    {
        $input = Request::all();




        try{


            $form = Request::only(
                'id',
                'lpo_id',
                'terms'
                );


            $term = LpoTerm::findOrFail($form['id']);


            $term->lpo_id              =               $form['lpo_id'];
            $term->terms               =               $form['terms'];

            $user = JWTAuth::parseToken()->authenticate();
            // $allocation->allocated_by_id            =   (int)   $user->id;


            if($term->save()) {


                $lpo = LPO::find($term->lpo_id);
                activity()
                   ->performedOn($lpo)
                   ->causedBy($user)
                   ->log('terms updated');

                return Response()->json(array('success' => 'Terms updated','lpo_term' => $term), 200);
            }


        }catch (JWTException $e){

            return response()->json(['error'=>'You are not Authenticated'], 500);

        }
    }
































    
    /**
     * Operation deleteLpoTerm
     *
     * Deletes an lpo_term.
     *
     * @param int $lpo_term_id lpo term id to delete (required)
     *
     * @return Http response
     */
    public function deleteLpoTerm($lpo_term_id)
    {
        $input = Request::all();

        $deleted_lpo_term = LpoTerm::destroy($lpo_term_id);


        if($deleted_lpo_term){
            return response()->json(['msg'=>"lpo term deleted"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"lpo term not found"], 404,array(),JSON_PRETTY_PRINT);
        }
    }
































    
    /**
     * Operation getLpoTermById
     *
     * Find lpo term by ID.
     *
     * @param int $lpo_term_id ID of lpo term to return object (required)
     *
     * @return Http response
     */
    public function getLpoTermById($lpo_term_id)
    {

       $input = Request::all();

       try{

            $response = LpoTerm::findOrFail($lpo_term_id);

            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);

        }catch(Exception $e){

            $response =  ["error"=>"lpo could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }
































    
    /**
     * Operation lpoTermsGet
     *
     * lpo terms List.
     *
     *
     * @return Http response
     */
    public function lpoTermsGet()
    {
        $input = Request::all();
        $response;

        //path params validation


        //not path params validation
        // $lpo_id = $input['lpo_id'];


        // return response('How about implementing lpoTermsGet as a GET method ?');
        if(array_key_exists('lpo_id', $input)){

            $response = LpoTerm::where("deleted_at",null)
                ->where('lpo_id', $input['lpo_id'])
                ->get();

        }else{

            $response = LpoTerm::all();

        }


        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }
}
