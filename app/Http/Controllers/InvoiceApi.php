<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kenlebu@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use JWTAuth;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;
use App\Models\InvoicesModels\Invoice;
use App\Models\InvoicesModels\InvoiceStatus;
use App\Models\LPOModels\Lpo;
use Anchu\Ftp\Facades\Ftp;
use PDF;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Mail;
use App\Mail\NotifyInvoice;
use App\Models\AllocationModels\Allocation;
use App\Models\ApprovalsModels\Approval;
use App\Models\PaymentModels\Payment;
use App\Models\PaymentModels\PaymentBatch;
use App\Exceptions\NotFullyAllocatedException;
use App\Exceptions\ApprovalException;
use App\Models\FinanceModels\TaxRate;
use App\Models\FinanceModels\WithholdingVatRate;
use App\Models\PaymentModels\VoucherNumber;
use Excel;
use App\Models\Requisitions\Requisition;
use App\Models\Requisitions\RequisitionItem;
use App\Models\StaffModels\Staff;

class InvoiceApi extends Controller
{
    private $default_status = '';
    private $default_log_status = '';
    private $approvable_statuses = [];
    /**
     * Constructor
     */
    public function __construct()
    {
        $status = InvoiceStatus::where('default_status','1')->first();
        $log_status = InvoiceStatus::where('default_log_status','1')->first();
        $this->approvable_statuses = InvoiceStatus::where('approvable','1')->get();
        $this->default_status = $status->id;
        $this->default_log_status = $log_status->id;
    }



    /**
     * Operation addInvoice
     *
     * Add a new invoice.
     *
     *
     * @return Http response
     */
    public function addInvoice()
    {
        $invoice = new Invoice;
        try{
            $form = Request::only(
                'id',
                'raised_by_id',
                'received_by_id',
                'external_ref',
                'expense_desc',
                'expense_purpose',
                'invoice_date',
                'lpo_id',
                'supplier_id',
                'payment_mode_id',
                'project_manager_id',
                'total',
                'currency_id',
                'file',
                'submission_type',
                'lpo_variation_reason',
                'program_activity_id',
                'requisition_id'
                );

            $file = $form['file'];

            if($form['submission_type']=='full' || $form['submission_type']=='log'){
                $DT = new \DateTime();
                $dt = $DT->createFromFormat('D M d Y H:i:s T +',$form['invoice_date']);
                $invoice_date = $dt->format('Y-m-d');
            }

            if(Invoice::where('external_ref', $invoice->external_ref)->where('supplier_id', $form['supplier_id'])->whereNull('deleted_at')->exists() && $form['submission_type']!='upload_logged' && $form['submission_type']!='finish_allocations'){
                return response()->json(['error'=>'Invoice with the same invoice number already exists'], 409);
            }

            if($form['submission_type']=='full'){

                $invoice->received_by_id                    =   (int)       $form['raised_by_id'];//received_by_id must be =raised_by_id
                $invoice->raised_by_id                      =   (int)       $form['raised_by_id'];
                $invoice->external_ref                      =               trim($form['external_ref']);
                $invoice->expense_desc                      =               $form['expense_desc'];
                $invoice->expense_purpose                   =               $form['expense_purpose'];
                $invoice->invoice_date                      =               $invoice_date;
                $invoice->lpo_id                            =   (((int) $form['lpo_id'])>0)?$form['lpo_id']:null;
                $invoice->supplier_id                       =   (int)       $form['supplier_id'];
                $invoice->payment_mode_id                     =   (int)       $form['payment_mode_id'];
                $invoice->project_manager_id                =   (int)       $form['project_manager_id'];
                $invoice->total                             =   (double)    $form['total'];
                $invoice->currency_id                       =   (int)       $form['currency_id'];
                $invoice->received_at                       =   date('Y-m-d H:i:s');
                $invoice->raised_at                         =   date('Y-m-d H:i:s');
                if(!empty($form['lpo_variation_reason']))
                $invoice->lpo_variation_reason = $form['lpo_variation_reason'];
                if(!empty($form['program_activity_id']))
                $invoice->program_activity_id = $form['program_activity_id'];
                if(!empty($form['requisition_id']))
                $invoice->requisition_id = $form['requisition_id'] ?? null;

                $invoice->status_id                         =   $this->default_status;

                if(Invoice::where('external_ref', $invoice->external_ref)->where('supplier_id', $form['supplier_id'])->exists()){
                    return response()->json(["error"=>"Invoice with the same invoice number already exists"], 409,array(),JSON_PRETTY_PRINT);
                }

            }
            else if($form['submission_type']=='log'){

                $tax_rate = TaxRate::where('charge', 'VAT')->first();

                if($invoice->lpo_id){
                    $m_lpo = Lpo::find($invoice->lpo_id);
                    if($m_lpo->requisition && $m_lpo->requisition->status_id != 3){
                        return response()->json(['error'=>'Requisition needs to be approved first'], 409);
                    }
                    if($m_lpo->approver_id && $m_lpo->approver_id != 0){
                        $invoice->approver_id = $m_lpo->approver_id;
                    }
                    $invoice->vat_percentage = $m_lpo->vat_percentage;
                }
                else {
                    $invoice->vat_percentage = $tax_rate->rate;
                }

                $invoice->received_by_id                    =   (int)       $form['received_by_id'];
                $invoice->raised_by_id                      =   (int)       $form['raised_by_id'];
                $invoice->external_ref                      =               trim($form['external_ref']); 
                $invoice->invoice_date                      =               $invoice_date;              
                $invoice->lpo_id                            =   (((int) $form['lpo_id'])>0)?$form['lpo_id']:null;
                $invoice->supplier_id                       =   (int)       $form['supplier_id'];
                $invoice->payment_mode_id                   =   (int)       $form['payment_mode_id'];
                $invoice->total                             =   (double)    $form['total'];
                $invoice->currency_id                       =   (int)       $form['currency_id'];
                $invoice->received_at                       =   date('Y-m-d H:i:s');
                if(!empty($form['lpo_variation_reason']))
                $invoice->lpo_variation_reason = $form['lpo_variation_reason'];
                if(!empty($form['program_activity_id']))
                $invoice->program_activity_id = $form['program_activity_id'];
                if(!empty($form['requisition_id']))
                $invoice->requisition_id = $form['requisition_id'] ?? null;

                $invoice->status_id                         =   $this->default_log_status;

                if(Invoice::where('external_ref', $invoice->external_ref)->where('supplier_id', $form['supplier_id'])->exists()){
                    return response()->json(["error"=>"Invoice with the same invoice number already exists"], 409,array(),JSON_PRETTY_PRINT);
                }

                if(!empty($invoice->lpo_id)){
                    $lpo = Lpo::find($invoice->lpo_id);
                    if(!empty($lpo)){
                        $invoice->expense_desc = $lpo->expense_desc;
                        $invoice->expense_purpose = $lpo->expense_purpose;
                        $invoice->project_manager_id = $lpo->project_manager_id;
                    }
                }

            }else if($form['submission_type']=='upload_logged'){

                $invoice = Invoice::find((int) $form['id']);

                $invoice->raised_by_id                      =   (int)       $form['raised_by_id'];
                $invoice->external_ref                      =               trim($form['external_ref']);
                $invoice->expense_desc                      =               $form['expense_desc'];
                $invoice->expense_purpose                   =               $form['expense_purpose'];
                $invoice->lpo_id                            =   (((int) $form['lpo_id'])>0)?$form['lpo_id']:null;
                $invoice->supplier_id                       =   (int)       $form['supplier_id'];
                $invoice->project_manager_id                =   (int)       $form['project_manager_id'];
                $invoice->total                             =   (double)    $form['total'];
                $invoice->currency_id                       =   (int)       $form['currency_id'];
                $invoice->received_at                       =   date('Y-m-d H:i:s');
                $invoice->raised_at                         =   date('Y-m-d H:i:s');
                if (($invoice->total - $invoice->amount_allocated) <= 0 && abs($invoice->total - $invoice->amount_allocated == 0)){
                    $invoice->status_id = $invoice->status->next_status_id;  
                }
                if(!empty($form['lpo_variation_reason']))
                $invoice->lpo_variation_reason = $form['lpo_variation_reason'];
                if(!empty($form['approver_id']))
                $invoice->approver_id = $form['approver_id'];

                if(!empty($invoice->lpo) && $invoice->total - $invoice->lpo->totals != 0){
                    foreach($invoice->allocations as $alloc){
                        $allocation = Allocation::find($alloc->id);
                        $allocation->amount_allocated = ($invoice->total * ($alloc->percentage_allocated/100));
                        $allocation->disableLogging();
                        $allocation->save();
                    }
                }
                
            }
            else if($form['submission_type']=='finish_allocations'){
                $invoice = Invoice::find((int) $form['id']);
                $invoice->total = (double)    $form['total'];

                if ((($invoice->total - $invoice->amount_allocated) <= 1 ) && $invoice->status_id==11){ //allowance of 1
                    $invoice->status_id = $invoice->status->next_status_id;  
                }
                
            }

            $invoice->disableLogging();
            if($invoice->save()) {               

                if($form['submission_type']=='log'){
                    if(!empty($invoice->lpo)){
                        foreach($invoice->lpo->allocations as $alloc){
                            $allocation = new Allocation();
                            $allocation->account_id = $alloc->account_id;
                            $allocation->project_id = $alloc->project_id;
                            $allocation->allocatable_id = $invoice->id;
                            $allocation->allocatable_type = 'invoices';
                            $allocation->amount_allocated = ($invoice->total * (float)$alloc->percentage_allocated/100);
                            $allocation->percentage_allocated = ($allocation->amount_allocated/$invoice->total)*100;
                            $allocation->allocation_purpose = $alloc->allocation_purpose;
                            $allocation->objective_id = $alloc->objective_id;
                            $allocation->allocated_by_id = $invoice->raised_by_id;
                            $allocation->disableLogging();
                            $allocation->save();
                        }

                        if($lpo->requisition_id){
                            $requisition = Requisition::find($lpo->requisition_id);

                            if(!empty($lpo->lpo_requisition_items)){
                                foreach($lpo->lpo_requisition_items as $req_item){
                                    if(!empty($req_item->id)){
                                        $item = RequisitionItem::find($req_item->id);
                                        if(!empty($item)){
                                            $item->status_id = 4;
                                            $item->disableLogging();
                                            $item->save();
                                        }
                                    }                                                                        
                                }
                                $invoice->approver_id = $lpo->approver_id;
                            }
                            $invoice->requisition_id = $lpo->requisition_id;
                            $invoice->ref = $requisition->ref.'-INV-'.$this->pad_with_zeros(2, $invoice->getNextRefNumber());
                            $invoice->save();

                            activity()
                                ->performedOn($requisition)
                                ->causedBy($this->current_user())
                                ->withProperties(['detail' => 'Created invoice '.$invoice->ref, 'summary'=> true])
                                ->log('Logged invoice');
                        }
                    }

                    if(empty($invoice->lpo) || empty($invoice->lpo->requisition_id)){
                        $invoice->ref = "CHAI/INV/#$invoice->id/".date_format($invoice->created_at,"Y/m/d");
                        $invoice->save();

                        activity()
                            ->performedOn($invoice)
                            ->causedBy($this->current_user())
                            ->withProperties(['detail' => 'Logged invoice '.$invoice->ref, 'summary'=> true])
                            ->log('Logged');
                            
                        // Add activity notification
                        $this->addActivityNotification('Invoice <strong>'.$invoice->external_ref.' ('. ($invoice->supplier->supplier_name ?? 'no supplier') .')</strong> logged', null, $this->current_user()->id, $invoice->raised_by_id, 'info', 'invoices', false);
                    }

                }

                if($form['submission_type']=='full'||$form['submission_type']=='upload_logged'){
                    
                    FTP::connection()->makeDir('/invoices');
                    FTP::connection()->makeDir('/invoices/'.$invoice->id);
                    FTP::connection()->uploadFile($file->getPathname(), '/invoices/'.$invoice->id.'/'.$invoice->id.'.'.$file->getClientOriginalExtension());

                    $invoice->invoice_document = $invoice->id.'.'.$file->getClientOriginalExtension();
                    $invoice->save();

                    activity()
                        ->performedOn($invoice)
                        ->causedBy($this->current_user())
                        ->withProperties(['detail' => 'Uploaded invoice '.$invoice->ref])
                        ->log('Uploaded');

                }
                else if($form['submission_type']=='log'){
                    $invoice->save();
                    Mail::queue(new NotifyInvoice($invoice));
                }
                
                return Response()->json(array('success' => 'Invoice Added','invoice' => $invoice), 200);
            }
        }
        catch (JWTException $e){
            return response()->json(['error'=>'Something went wrong'], 500);
        }
    }
























    /**
     * Operation updateInvoice
     *
     * Update an existing invoice.
     *
     *
     * @return Http response
     */
    public function updateInvoice()
    {
        try{
            $form = Request::only(
                'id',
                'raised_by_id',
                'received_by_id',
                'external_ref',
                'expense_desc',
                'expense_purpose',
                'invoice_date',
                'lpo_id',
                'supplier_id',
                'payment_mode_id',
                'project_manager_id',
                'total',
                'currency_id',
                'file',
                'submission_type',
                'lpo_variation_reason',
                'program_activity_id'
                );
            
            $file = $form['file'];

            $DT = new \DateTime();
            $dt = $DT->createFromFormat('D M d Y H:i:s T +',$form['invoice_date']);
            $invoice_date = $dt->format('Y-m-d');

            $invoice = Invoice::findOrFail($form['id']);

            $invoice->raised_by_id                      =   (int)       $form['raised_by_id'];
            $invoice->expense_desc                      =               $form['expense_desc'];
            $invoice->expense_purpose                   =               $form['expense_purpose'];
            $invoice->external_ref                      =               trim($form['external_ref']);
            $invoice->invoice_date                      =               $invoice_date;
            $invoice->lpo_id                            =   (((int) $form['lpo_id'])>0)?$form['lpo_id']:null;
            $invoice->supplier_id                       =   (int)       $form['supplier_id'];
            $invoice->payment_mode_id                   =   (int)       $form['payment_mode_id'];
            $invoice->project_manager_id                =   (int)       $form['project_manager_id'];
            $invoice->total                             =   (double)    $form['total'];
            $invoice->currency_id                       =   (int)       $form['currency_id'];
            if(!empty($form['lpo_variation_reason']))
                $invoice->lpo_variation_reason = $form['lpo_variation_reason'];    
            if(!empty($form['program_activity_id']))
                $invoice->program_activity_id = $form['program_activity_id'];
            if(!empty($form['approver_id']))
                $invoice->approver_id = $form['approver_id'];

            if(Invoice::where('external_ref', $invoice->external_ref)->where('supplier_id', $form['supplier_id'])->where('id', '!=', $form['id'])->exists()){
                return response()->json(["error"=>"Invoice with the same invoice number already exists"], 409,array(),JSON_PRETTY_PRINT);
            }

            if($invoice->save()) {

                if(!empty($invoice->lpo) && $invoice->total - $invoice->lpo->totals != 0){
                    foreach($invoice->allocations as $alloc){
                        $allocation = Allocation::find($alloc->id);
                        $allocation->amount_allocated = ($invoice->total * ($alloc->percentage_allocated/100));
                        $allocation->disableLogging();
                        $allocation->save();
                    }
                }

                $invoice->disableLogging(); //! Do not log the update again
                if($form['submission_type']=='full' && $file!=0){

                    FTP::connection()->makeDir('/invoices');
                    FTP::connection()->makeDir('/invoices/'.$invoice->id);
                    FTP::connection()->uploadFile($file->getPathname(), '/invoices/'.$invoice->id.'/'.$invoice->id.'.'.$file->getClientOriginalExtension());

                    $invoice->invoice_document           =   $invoice->id.'.'.$file->getClientOriginalExtension();
                    $invoice->ref                        = "CHAI/INV/#$invoice->id/".date_format($invoice->created_at,"Y/m/d");
                    $invoice->save();
                }
                
                return Response()->json(array('success' => 'Invoice updated','invoice' => $invoice), 200);
            }
        }
        catch (JWTException $e){
            return response()->json(['error'=>'You are not Authenticated'], 500);
        }
    }
























    /**
     * Operation deleteInvoice
     *
     * Deletes an invoice.
     *
     * @param int $invoice_id invoice id to delete (required)
     *
     * @return Http response
     */
    public function deleteInvoice($invoice_id)
    {
        try {     
            $invoice = Invoice::findOrFail($invoice_id);      
            if(!empty($invoice->lpo->requisition_id)){
                foreach($invoice->lpo->items as $item){
                    $requisition_item = RequisitionItem::find($item->requisition_item_id);
                    if(!empty($requisition_item)){
                        $requisition_item->status_id = 2;
                        $requisition_item->disableLogging();
                        $requisition_item->save();
                    }                    
                }

                // Logging delete
                activity()
                    ->performedOn(Requisition::find($invoice->lpo->requisition_id))
                    ->causedBy($this->current_user())
                    ->withProperties(['detail'=>'Invoice '.$invoice->external_ref.' has been deleted'])
                    ->log('Invoice deleted');
                    
                // Add activity notification
                $this->addActivityNotification('Deleted invoice <strong>'.$invoice->external_ref.'</strong>', null, $this->current_user()->id, $invoice->requisitioned_by_id ?? $invoice->raised_by_id, 'danger', 'invoices', false);
            }

            $invoice->delete();

            // Delete the allocations too
            Allocation::where('allocatable_id', $invoice_id)->where('allocatable_type', 'invoices')->delete();
            return response()->json(['msg'=>"Invoice deleted"], 200);
        }
        catch (\Exception $e) {
            return response()->json(['error'=>"Something went wrong"], 500);            
        }
    }
























    /**
     * Operation getInvoiceById
     *
     * Find invoice by ID.
     *
     * @param int $invoice_id ID of invoice to return object (required)
     *
     * @return Http response
     */
    public function getInvoiceById($invoice_id)
    {
        $response = [];

        try{
            $response = Invoice::with( 
                                        'raised_by',
                                        'received_by',
                                        'raise_action_by',
                                        'status',
                                        'project_manager',
                                        'supplier',
                                        'currency',
                                        'lpo.requisition',
                                        'rejected_by',
                                        'approvals.approver', 'approvals.approval_level',
                                        'payments.payment_mode','payments.currency','payments.payment_batch','payments.paid_to_bank_branch','payments.voucher_number',
                                        'payment_mode',
                                        'allocations.project','allocations.account','allocations.objective',
                                        'logs.causer',
                                        'vouchers',
                                        'comments',
                                        'program_activity',
                                        'requisition.documents',
                                        'documents'
                                    )->findOrFail($invoice_id);

            return response()->json($response, 200);
        }
        catch(Exception $e){;
            return response()->json(["error"=>"Something went wrong"], 500);
        }
    }
























    /**
     * Operation approveInvoice
     *
     * Approve invoice by ID.
     *
     * @param int $invoice_id ID of invoice to return object (required)
     *
     * @return Http response
     */
    public function approveInvoice($invoice_id, $several=null)
    {
        $invoice = [];
        $user = JWTAuth::parseToken()->authenticate();
        try{
            $invoice   = Invoice::findOrFail($invoice_id);
           
            if (!$user->can("APPROVE_INVOICE_".$invoice->status_id)){
                throw new ApprovalException("No approval permission");             
            }

            $approvable_status  = $invoice->status;
            $invoice->status_id = $this->getNextStatusId($invoice->status_id);
            
            $invoice->disableLogging();
            if($invoice->save()) {

                $invoice   = Invoice::findOrFail($invoice_id);

                $approval = new Approval;
                $approval->approvable_id            =   (int)   $invoice->id;
                $approval->approvable_type          =   "invoices";
                $approval->approval_level_id        =   $approvable_status->approval_level_id;
                $approval->approver_id              =   (int)   $user->id;
                $approval->disableLogging();
                $approval->save();

                if($approval->approval_level_id==4){

                    $payable = [
                        'payable_type'                  =>  'invoices', 
                        'payable_id'                    =>  $invoice->id, 
                        'debit_bank_account_id'         =>  $invoice->currency_id, 
                        'currency_id'                   =>  $invoice->currency_id, 
                        'payment_desc'                  =>  $invoice->expense_desc, 
                        'paid_to_name'                  =>  $invoice->supplier->supplier_name, 
                        'paid_to_mobile_phone_no'       =>  $invoice->supplier->mobile_payment_number, 
                        'paid_to_bank_account_no'       =>  $invoice->supplier->bank_account, 
                        'paid_to_bank_id'               =>  $invoice->supplier->bank_id, 
                        'paid_to_bank_branch_id'        =>  $invoice->supplier->bank_branch_id, 
                        'payment_mode_id'               =>  $invoice->payment_mode_id, 
                        'amount'                        =>  $invoice->total, 
                        'payment_batch_id'              =>  "", 
                        'bank_charges'                  =>  "",
                        "withholding_tax"               =>  $invoice->withholding_tax,
                        "withholding_vat"               =>  $invoice->withholding_vat,
                        "usd_rate"                      =>  $invoice->usd_rate
                    ];
                    
                    // Pick USD account if currency is USD
                    if($invoice->currency_id == 2){
                        $payable['paid_to_bank_account_no'] = $invoice->supplier->usd_account;
                    }
                    
                    $this->generate_payable_payment($payable);
                }

                // Logging
                activity()
                   ->performedOn($invoice)
                   ->causedBy($user)
                   ->withProperties(['detail' => 'Invoice '.$invoice->external_ref.' approved', 'summary'=> true])
                   ->log($approval->approval_level->approval_level);
                   
                // Add activity notification
                $this->addActivityNotification('Invoice <strong>'.$invoice->external_ref.' ('. ($invoice->supplier->supplier_name ?? 'no supplier') .')</strong> approved', null, $this->current_user()->id, $invoice->raised_by_id, 'success', 'invoices', false);

                Mail::queue(new NotifyInvoice($invoice));

                if($several!=true)
                return Response()->json(array('msg' => 'Success: invoice approved','invoice' => $invoice), 200);
            }
        }
        catch(ApprovalException $ae){
            $response =  ["error"=>"You do not have the permissions to perform this action at this point"];
            return response()->json($response, 403);
        }
        catch(Exception $e){
            $response =  ["error"=>"Something went wrong"];
            return response()->json($response, 500);
        }
    }



    public function getNextStatusId($current_status_id){
        $current_status = InvoiceStatus::find($current_status_id);

        if($current_status->next_status->skippable == 1){
            if($current_status->next_status_id == 2){    // FM
                $fm_exists = Staff::whereHas('roles', function($query){
                    $query->where('role_id', 5);  
                })->exists();

                if(!$fm_exists){
                    return $this->getNextStatusId($current_status->next_status_id);
                }
                else {
                    return $current_status->next_status_id;
                }
            }
            elseif($current_status->next_status_id == 12){    // Accountant
                $acc_exists = Staff::whereHas('roles', function($query){
                    $query->where('role_id', 8);  
                })->exists();

                if(!$acc_exists){
                    return $this->getNextStatusId($current_status->next_status_id);
                }
                else {
                    return $current_status->next_status_id;
                }
            }
            elseif($current_status->next_status_id == 14){    // FR
                $acc_exists = Staff::whereHas('roles', function($query){
                    $query->where('role_id', 13);  
                })->exists();

                if(!$acc_exists){
                    return $this->getNextStatusId($current_status->next_status_id);
                }
                else {
                    return $current_status->next_status_id;
                }
            }
            else {
                return $current_status->next_status_id;
            }
        }
        else {
            return $current_status->next_status_id;
        }
    }















    /**
     * Operation rejectInvoice
     * Reject invoice by ID.
     * @param int $invoice_id ID of invoice to return object (required)
     * @return Http response
     */
    public function rejectInvoice($invoice_id)
    {
        $form = Request::only('rejection_reason');
        $user = $this->current_user();
        try{
            $invoice = Invoice::findOrFail($invoice_id);
           
            if (!$user->can("APPROVE_INVOICE_".$invoice->status_id)){
                throw new ApprovalException("No approval permission");             
            }

            $invoice->status_id = 9;
            $invoice->rejected_by_id            =   (int)   $user->id;
            $invoice->rejected_at               =   date('Y-m-d H:i:s');
            $invoice->rejection_reason          =   $form['rejection_reason'];

            $invoice->disableLogging();
            if($invoice->save()) {
                Mail::queue(new NotifyInvoice($invoice));

                activity()
                   ->performedOn($invoice)
                   ->causedBy($user)
                   ->withProperties(['detail' => 'Invoice '.$invoice->external_ref.' returned. REASON: '.$invoice->rejection_reason, 'summary'=> true])
                   ->log('Returned');
                   
                // Add activity notification
                $this->addActivityNotification('Invoice <strong>'.$invoice->external_ref.' ('. ($invoice->supplier->supplier_name ?? 'no supplier') .')</strong> returned', null, $this->current_user()->id, $invoice->raised_by_id, 'danger', 'invoices', false);

                return Response()->json(array('msg' => 'Success: invoice approved','invoice' => $invoice), 200);
            }

        }catch(ApprovalException $ae){

            $response =  ["error"=>"You do not have the permissions to perform this action at this point"];
            return response()->json($response, 403);
        }catch(Exception $e){

            $response =  ["error"=>"Something went wrong"];
            return response()->json($response, 500);
        }
    }



    /**
     * Operation getDocumentById
     * get invoice document by ID.
     * @param int $invoice_id ID of invoice to return object (required)
     * @return Http response
     */
    public function getDocumentById($invoice_id)
    {
        try{
            $invoice        = Invoice::findOrFail($invoice_id);
            $path           = '/invoices/'.$invoice->id.'/'.$invoice->invoice_document;
            $file_contents  = FTP::connection()->readFile($path);
            $response       = Response::make($file_contents, 200);
            $response->header('Content-Type', 'application/pdf');
            return $response;  
        }
        catch (Exception $e){
            $response = Response::make("", 500);
            $response->header('Content-Type', 'application/pdf');
            return $response;
        }
    }



    /**
     * Operation getPaymentVoucherById
     * get payment Voucher by ID.
     * @param int $invoice_id ID of invoice to return object (required)
     * @return Http response
     */
    public function getPaymentVoucherById($invoice_id)
    {
        try{
            $invoice = Invoice::findOrFail($invoice_id);
            $payment = Payment::with('voucher_number')->where('payable_id', $invoice->id)->where('payable_type', 'invoices')->first();
            $voucher_date = '-';
            $vendor = '-';
            $voucher_no = '-';

            if(empty($invoice->migration_id)) {
                if(!empty($payment->voucher_no)) {
                    $voucher = VoucherNumber::where('payable_id', $payment->id)->first();
                    $voucher_no = $voucher->voucher_number;
                }
            }
            else {
                $voucher_no = 'CHAI'.$this->pad_zeros(5, $invoice->migration_id);
            }

            if(!empty($payment->payment_batch_id) && $payment->payment_batch_id > 0){
                $batch = PaymentBatch::find($payment->payment_batch_id);
                $voucher_date = $batch->created_at;
            }

            $vendor = $invoice->supplier->supplier_name ?? '';

            $unique_approvals = $this->unique_multidim_array($invoice->approvals, 'approval_level_id');
            $data = [
                    'payable'   => $invoice,
                    'voucher_date' => $voucher_date,
                    'vendor'=>$vendor,
                    'voucher_no'=>$voucher_no,
                    'payable_type'=>'Invoice',
                    'unique_approvals' => $unique_approvals,
                    'bank_transactions' => $invoice->bank_transactions,
                    'payment' => $payment
                ];

            $pdf            = PDF::loadView('pdf/payment_voucher', $data);
            $file_contents  = $pdf->stream();
            $response       = Response::make($file_contents, 200);
            $response->header('Content-Type', 'application/pdf');
            return $response;
        }
        catch (Exception $e ){
            $response       = Response::make("", 500);
            $response->header('Content-Type', 'application/pdf');
            return $response;  
        }
    }















    /**
     * Operation submitInvoiceForApproval
     *
     * Submit invoice by ID.
     *
     * @param int $invoice_id ID of invoice to return object (required)
     *
     * @return Http response
     */
    public function submitInvoiceForApproval($invoice_id)
    {
        try{
            $invoice = Invoice::findOrFail($invoice_id);

            if(!empty($invoice->lpo) && !empty($invoice->lpo->requisition)){
                if($invoice->lpo->requisition->status_id != 3){
                    return response()->json(['error'=>'Requisition must be approved before you can submit this invoice'], 403);
                }
            }

            if (($invoice->total - $invoice->amount_allocated) > 1 ){ //allowance of 1
                throw new NotFullyAllocatedException("This invoice has not been fully allocated");             
            }

            $invoice->status_id = $this->getNextStatusId($invoice->status_id);
            if($invoice->status_id  != 9){ // Only set request time if its not after corrections
                $invoice->raised_at = date('Y-m-d H:i:s');
            }

            $invoice->disableLogging(); //! Do not log the update
            if($invoice->save()) {
                Mail::queue(new NotifyInvoice($invoice));

                activity()
                   ->performedOn($invoice)
                   ->causedBy($this->current_user())
                   ->log('Submited for approval');
                   
                // Add activity notification
                // $this->addActivityNotification('Invoice '.$invoice->ref.' submitted', null, $this->current_user()->id, $invoice->raised_by_id, 'info', 'invoices', false);

                return Response()->json(array('msg' => 'Success: invoice submitted','invoice' => $invoice), 200);
            }

        }catch(NotFullyAllocatedException $ae){

            $response =  ["error"=>"Invoice not fully allocated"];
            return response()->json($response, 403);
        }catch(Exception $e){

            $response =  ["error"=>"Something went wrong"];
            return response()->json($response, 500);
        }
    }

























    /**
     * Operation approveSeveralInvoices
     *
     * Approve several Invoices.
     *
     *
     * @return Http response
     */
    public function approveSeveralInvoices()
    {   
        try {
            $form = Request::only("invoices");
            $invoice_ids = $form['invoices'];

            foreach ($invoice_ids as $key => $invoice_id) {
                $this->approveInvoice($invoice_id, true);
            }

            return response()->json(['invoices'=>$form['invoices']], 201);
            
        } catch (Exception $e) {
             return response()->json(['error'=>"An rerror occured during processing"], 500);
            
        }
    }
























    /**
     * Operation getInvoices
     *
     * invoices List.
     *
     *
     * @return Http response
     */
    public function getInvoices()
    {
        $input = Request::all();

        $qb = Invoice::query();
        if(!array_key_exists('lean', $input)){
            $qb = Invoice::with('raised_by','received_by','status','project_manager','supplier','currency');
        }

        $qb = $qb->whereNotNull('raised_by_id');
        $qb = $qb->where(function($query){
            $query->whereNull('archived')->orWhere('archived', '!=', 1);
        });

        $total_records          = $qb->count();
        $records_filtered       = 0;
        
        //if status is set
        if(array_key_exists('status', $input)){
            $status_ = (int) $input['status'];

            if($status_ >-1){
                $qb = $qb->where('status_id', $input['status'])->where('raised_by_id',$this->current_user()->id);
            }elseif ($status_==-1) {
                $qb = $qb->where('raised_by_id',$this->current_user()->id);
            }elseif ($status_==-2) {
                
            }elseif ($status_==-3) {
                $qb = $qb->where('project_manager_id',$this->current_user()->id);
            }
        }

        $app_stat = $this->approvable_statuses ;
        //if approvable is set

        if(array_key_exists('approvable', $input)){
            $qb = $qb->where(function ($query) use ($app_stat) {                    
                foreach ($app_stat as $key => $value) {
                    $query->orWhere('status_id',$value['id']);
                }
            });
        }

        if(array_key_exists('my_approvables', $input)){
            $current_user = $this->current_user();
            if($current_user->hasRole([
                'super-admin',
                'admin',
                'director',
                'associate-director',
                'financial-controller',
                'program-manager', 
                'accountant', 
                'assistant-accountant',
                'financial-reviewer']
            )){                   
                $qb = $qb->where(function ($query) use ($app_stat,$current_user) {
                    foreach ($app_stat as $key => $value) {
                        $permission = 'APPROVE_INVOICE_'.$value['id'];
                        if($current_user->can($permission)&&$value['id']==1){
                            $query->orWhere(function ($query1) use ($value,$current_user) {

                                $query1->where(function ($query1) use ($value,$current_user) {
                                    $query1->where('status_id',$value['id']);
                                    $query1->where('project_manager_id',$current_user->id)
                                            ->whereNull('approver_id');
                                });
                                $query1->orWhere(function ($query1) use ($value,$current_user) {
                                    $query1->where('status_id',$value['id']);
                                    $query1->where('approver_id',$current_user->id);
                                });
                            });
                        }
                        else if($current_user->can($permission)){
                            $query->orWhere('status_id',$value['id']); 
                        }
                    }
                });
            }
        }

        if(array_key_exists('for_supplier', $input)){
            $qb = $qb->where('supplier_id', $input['supplier_id']);
        }

        //searching
        if(array_key_exists('searchval', $input)){
            $qb = $qb->where(function ($query) use ($input) {                
                $query->orWhere('ref','like', '%' . $input['search']['value']. '%');
                $query->orWhere('external_ref','like', '%' . $input['search']['value']. '%');
                $query->orWhere('total','like', '%' . $input['search']['value']. '%');
                $query->orWhere('expense_desc','like', '%' . $input['searchval']. '%');
                $query->orWhere('expense_purpose','like', '%' . $input['searchval']. '%');
                $query->orWhereHas('supplier', function ($query) use ($input) {
                    $query->where('supplier_name','like','%' .$input['searchval']. '%');
                });
            });

            $records_filtered = $qb->count();
        }

        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction     = "asc";
            $order_column_name   = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }

            $qb = $qb->orderBy($order_column_name, $order_direction);
        }

        //limit
        if(array_key_exists('limit', $input)){
            $qb = $qb->limit($input['limit']);
        }

        if(array_key_exists('datatables', $input)){
            //searching
            if(!empty($input['search']['value'])){
                $qb = $qb->where(function ($query) use ($input) {                
                    $query->orWhere('ref','like', '%' . $input['search']['value']. '%');
                    $query->orWhere('external_ref','like', '%' . $input['search']['value']. '%');
                    $query->orWhere('total','like', '%' . $input['search']['value']. '%');
                    $query->orWhere('expense_desc','like', '%' . $input['search']['value']. '%');
                    $query->orWhere('expense_purpose','like', '%' . $input['search']['value']. '%');
                    $query->orWhereHas('supplier', function ($query) use ($input) {
                        $query->where('supplier_name','like','%' .$input['search']['value']. '%');
                    });
                });
            }

            foreach($input['columns'] as $column){
                if(!empty($column['search']['value']) && !empty($column['name'])){

                    if($column['name'] == 'raised_by' || $column['name'] == 'project_manager'){
                        $qb = $qb->where(function ($query) use ($column) {                
                            $query->whereHas($column['name'], function ($query) use ($column) {
                                $query->where('f_name','like','%' .$column['search']['value']. '%');
                                $query->orWhere('l_name','like','%' .$column['search']['value']. '%');
                            });
                        });
                    }
                    else if ($column['name'] == 'supplier_name'){
                        $qb = $qb->where(function ($query) use ($column) {                
                            $query->whereHas('supplier', function ($query) use ($column) {
                                $query->where('supplier_name','like','%' .$column['search']['value']. '%');
                            });
                        });
                    }
                    else {
                        $qb = $qb->where(function ($query) use ($column) {                
                            $like = (!empty($column['filter']) && $column['filter'] == 'absolute') ? '' : '%';        
                            $query->where($column['name'],'like', $like . $column['search']['value']. $like);
                        });
                    }
                    
                }
            }

            $records_filtered = $qb->count();

            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){
                $qb = $qb->orderBy($order_column_name, $order_direction);
            }

            //limit $ offset
            if((int)$input['start']!= 0 ){
                $qb = $qb->limit($input['length'])->offset($input['start']);
            }
            else{
                $qb = $qb->limit($input['length']);
            }

            $response = Invoice::arr_to_dt_response( 
                $qb->get(), $input['draw'],
                $total_records,
                $records_filtered
                );
        }
        else{
            $response = $qb->get();
        }

        return response()->json($response, 200);
    }









    /**
     * Adds zeros at the beginning of string until the desired
     * length is reached.
     */
    public function pad_zeros($desired_length, $data){
        if(strlen($data)<$desired_length){
            return str_repeat('0', $desired_length-strlen($data)).$data;
        }
        else{
            return $data;
        }
    }


    public function exportInvoices(){
        $invoices = Invoice::with('raised_by','received_by','status','project_manager','supplier','payment_mode',
                'rejected_by','currency','lpo')->get();

        $excel_data = array();
        
        foreach($invoices as $invoice){
            $row = array();
            $row['id'] = $invoice->id;
            $row['ref'] = $invoice->ref;
            $row['lpo_id'] = $invoice->lpo_id;
            $row['supplier'] = empty($invoice->supplier->supplier_name)?"":$invoice->supplier->supplier_name;
            $row['expense_description'] = $invoice->expense_desc;
            $row['expense_purpose'] = $invoice->expense_purpose;
            $row['invoice_no'] = $invoice->external_ref;
            $row['invoice_date'] = $invoice->invoice_date;
            $row['received_by'] = empty($invoice->received_by->full_name)?'':$invoice->received_by->full_name;
            $row['received_at'] = $invoice->received_at;
            $row['total'] = $invoice->total;
            $row['project_manager'] = empty($invoice->project_manager->full_name)?"":$invoice->project_manager->full_name;
            $row['status'] = empty($invoice->status->invoice_status)?"":$invoice->status->invoice_status;
            $row['payment_mode'] = empty($invoice->payment_mode->abrv)?"":$invoice->payment_mode->abrv;
            $row['comments'] = $invoice->comments;
            $row['currency'] = empty($invoice->currency->currency_name)?'':$invoice->currency->currency_name;
            $row['rejection_reason'] = $invoice->rejection_reason;
            $row['rejected_by'] = empty($invoice->rejected_by->full_name)?"":$invoice->rejected_by->full_name;
            $row['rejected_at'] = $invoice->rejected_at;
            if(!empty($invoice->migration_id)) {
                $row['pv_no'] = 'CHAI'.$this->pad_zeros(5, $invoice->id);
            }
            else {
                $payment = Payment::where('payable_id',$invoice->id)->where('payable_type', 'invoices')->first();
                $voucher_no = '-';
                if(!empty($payment)) $voucher = VoucherNumber::find($payment->voucher_no);
                if(!empty($voucher->voucher_number)) $voucher_no = $voucher->voucher_number;
                $row['pv_no'] = $voucher_no;
            }
            
            foreach($invoice->allocations as $allocation){
                $row['allocation_account_code'] = empty($allocation->account->account_code)?"":$allocation->account->account_code;
                $row['allocation_account_name'] = empty($allocation->account->account_name)?"":$allocation->account->account_name;
                $row['allocation_purpose'] = $allocation->allocation_purpose;
                $row['project'] = empty($allocation->project->project_code)?"":$allocation->project->project_code;

                array_push($excel_data, $row);
            }
            

        }

        $headers = [
            'Access-Control-Allow-Origin'      => '*',
            'Allow'                            => 'GET, POST, OPTIONS',
            'Access-Control-Allow-Headers'     => 'Origin, Content-Type, Accept, Authorization, X-Requested-With',
            'Access-Control-Allow-Credentials' => 'true'
        ];
        // Build excel
        $file = Excel::create('Invoices', function($excel) use ($excel_data) {

            // Set the title
            $excel->setTitle('Invoices');

            // Chain the setters
            $excel->setCreator('GIFMS')->setCompany('Clinton Health Access Initiative - Kenya');

            $excel->setDescription('A list of invoices and their allocations and pv numbers');

            $headings = array('id','ref','lpo_id',
            'supplier','expense_description','expense_purpose','invoice_no','invoice_date','received_by','received_at','total','project_manager','status','payment_mode',
            'comments','currency','rejection_reason','rejected_by','rejected_at','pv_no','allocation_account_code','allocation_account_name','allocation_purpose','project');

            $excel->sheet('Invoices', function ($sheet) use ($excel_data, $headings) {
                foreach($excel_data as $data_row){

                    $sheet->appendRow($data_row);
                }
                
                $sheet->prependRow(1, $headings);
                $sheet->setFontSize(10);
                $sheet->setHeight(1, 25);
                $sheet->row(1, function($row){
                    $row->setFontSize(11);
                    $row->setFontWeight('bold');
                    $row->setAlignment('center');
                    $row->setValignment('center');
                    $row->setBorder('none', 'thin', 'none', 'thin');
                    $row->setBackground('#004080');                        
                    $row->setFontColor('#ffffff');
                });
                $sheet->setWidth(array(
                    'B' => 15,
                    'C' => 20,
                    'D' => 20,
                    'E' => 15,
                    'F' => 35,
                    'J' => 15,
                    'K' => 20,
                    'L' => 20
                ));
            });

        })->download('xlsx', $headers);
    }




    /**
     * Operation recallInvoice
     * 
     * Recalls an Invoice.
     * 
     * @param int $invoice_id Invoice id to recall (required)
     * 
     * @return Http response
     */
    public function recallInvoice($invoice_id)
    {
        $invoice = Invoice::find($invoice_id); 
        $user = $this->current_user();       

        // Ensure Invoice is in the recallable statuses
        if(!in_array($invoice->status_id, [1,2,3,12,14])){
            return response()->json(['msg'=>"you do not have permission to do this"], 403, array(), JSON_PRETTY_PRINT);
        }

        $invoice->status_id = 13;   // 13 is the recalled status id
        
        $invoice->disableLogging(); //! Do not log the update
        if($invoice->save()){
            activity()
                   ->performedOn($invoice)
                   ->causedBy($user)
                   ->log('recalled');
                   
            // Add activity notification
            $this->addActivityNotification('Invoice <strong>'.$invoice->external_ref.' ('. ($invoice->supplier->supplier_name ?? 'no supplier') .')</strong> recalled', null, $this->current_user()->id, $invoice->raised_by_id, 'danger', 'invoices', false);

            return response()->json(['msg'=>"invoice recalled"], 200);
        }else{
            return response()->json(['error'=>"Something went wrong"], 500);
        }

    }




    public function copyInvoice($invoice_id){
        try{
            $invoice = Invoice::find($invoice_id);
            $new_invoice = new Invoice;
            $new_invoice->status_id = 11;   // Logged, pending upload
            $new_invoice->external_ref = $invoice->external_ref.'_copy';
            $new_invoice->invoice_date = date('Y-m-d H:i:s');
            $new_invoice->received_at  = date('Y-m-d H:i:s');
            $new_invoice->raised_at = date('Y-m-d H:i:s');
            $new_invoice->supplier_id = $invoice->supplier_id;
            $new_invoice->payment_mode_id = $invoice->payment_mode_id;
            $new_invoice->program_activity_id = $invoice->program_activity_id;
            $new_invoice->raised_by_id = $invoice->raised_by_id;
            $new_invoice->currency_id = $invoice->currency_id;
            $new_invoice->total = $invoice->total;
            $new_invoice->expense_desc = $invoice->expense_desc;
            $new_invoice->expense_purpose = $invoice->expense_purpose;
            $new_invoice->project_manager_id = $invoice->project_manager_id;
            $new_invoice->received_by_id = $this->current_user()->id;
            $new_invoice->raised_by_id = $this->current_user()->id;
            $new_invoice->created_at = date('Y-m-d H:i:s');
            
            if($new_invoice->save()){
                
                // Add activity notification
                $this->addActivityNotification('Invoice <strong>'.$invoice->external_ref.' ('. ($invoice->supplier->supplier_name ?? 'no supplier') .')</strong> created', null, $this->current_user()->id, $invoice->raised_by_id, 'info', 'invoices', false);

                //TODO: Change invoice ref to match the requisition format
                $new_invoice->ref = "CHAI/INV/#$new_invoice->id/".date_format($new_invoice->created_at,"Y/m/d");

                $new_invoice->disableLogging(); //! Do not log the update
                $new_invoice->save();

                foreach($invoice->allocations as $alloc){
                    $allocation = new Allocation;

                    $allocation->account_id             =               $alloc->account_id;
                    $allocation->allocatable_id         =               $new_invoice->id;
                    $allocation->allocatable_type       =               $alloc->allocatable_type;
                    $allocation->amount_allocated       =               $alloc->amount_allocated;
                    $allocation->allocation_month       =               $alloc->allocation_month;
                    $allocation->percentage_allocated   =               $alloc->percentage_allocated;
                    $allocation->project_id             =               $alloc->project_id;
                    $allocation->allocation_purpose     =               $alloc->allocation_purpose;
                    $allocation->allocation_year        =               $alloc->allocation_year;
                    $allocation->allocation_step        =               $alloc->allocation_step;
                    $allocation->activity_id            =               $alloc->activity_id;
                    $allocation->allocated_by_id        =       (int)   $this->current_user()->id;

                    if($allocation->save()) {
                        activity()
                        ->performedOn($allocation->allocatable)
                        ->causedBy($this->current_user())
                        ->log('allocated');
                    }
                }
            }
            return Response()->json(array('success' => 'Invoice Copied','invoice' => $new_invoice), 200);
        }
        catch (Exception $e){
            return response()->json(['error'=>'Something went wrong during processing', 'msg'=>$e->getMessage()], 500);
        }
    }



    public function withholdTax(){
        try{
            $input = Request::all();

            if(empty($input['withholding_tax']) && empty($input['withholding_vat'])){
                return response()->json(['error'=>'Withhold at least one tax'], 422);
            }

            $invoice = Invoice::findOrFail($input['invoice_id']);
            $invoice->disableLogging();
            $log_text = '';
            if(!empty($input['withholding_tax'])){
                $invoice->withholding_tax = $input['withholding_tax'];
            }
            if(!empty($input['withholding_vat'])){
                $invoice->withholding_vat = $input['withholding_vat'];
                $vat_rate = WithholdingVatRate::first();
                $invoice->vat_rate = $vat_rate->rate;
            }
            if(!empty($input['usd_rate'])){
                $invoice->usd_rate = $input['usd_rate'];
            }

            if(empty($input['withholding_vat']) && !empty($input['withholding_tax'])){
                $log_text = 'Withheld Income Tax';
            }
            else if(!empty($input['withholding_vat']) && empty($input['withholding_tax'])){
                $log_text = 'Withheld VAT';
            }
            else{
                $log_text = 'Withheld VAT and Income Tax';
            }

            if($invoice->save()){
                activity()
                   ->performedOn($invoice)
                   ->causedBy($this->current_user())
                   ->log($log_text);
                
                return Response()->json(array('success' => 'Taxes withheld'), 200);
            }
        }
        catch(Exception $e){
            return response()->json(['error'=>'Something went wrong during processing', 'msg'=>$e->getMessage()], 500);
        }
    }


    public function remove_tax(){
        try{
            $input = Request::all();
            $invoice = Invoice::findOrFail($input['invoice_id']);
            if(!empty($invoice)){
                $invoice->disableLogging();
                if($input['tax'] == 'vat'){
                    $invoice->withholding_vat = null;
                    $log_text = 'Removed VAT';
                }
                else if($input['tax'] == 'income'){
                    $invoice->withholding_tax = null;
                    $log_text = 'Removed income tax';
                }
                
                if($invoice->save()){
                    activity()
                       ->performedOn($invoice)
                       ->causedBy($this->current_user())
                       ->log($log_text);
                }
                    
                return Response()->json(array('success' => 'Taxes withheld', 'invoice'=>$invoice), 200);
            }            
        }
        catch(Exception $e){
            return response()->json(['error'=>'Something went wrong during processing', 'msg'=>$e->getMessage()], 500);
        }
    }



    public function markAsPaid(){
        try{
            $input = Request::all();

            if(empty($input['bank_ref']) && empty($input['amount'])){
                return response()->json(['error'=>'All fields are required'], 422);
            }

            $invoice = Invoice::findOrFail($input['invoice_id']);
            $payment = Payment::where('payable_type', 'invoices')->where('payable_id',$invoice->id)->firstOrFail();
            $payment->disableLogging();
            $payment->status_id = 4;
            $payment->save();
            $voucher_no = $payment->voucher_number->voucher_number ?? '';

            $bank_trans = $invoice->bank_transactions;
            $already_saved = false;
            foreach($bank_trans as $tran){
                if(trim($input['bank_ref']) == $tran->bank_ref) $already_saved = true;
            }
            if(!$already_saved){
                // Save transaction details
                $bank_transaction = array();
                $bank_transaction['bank_ref'] = trim($input['bank_ref']);
                $bank_transaction['chai_ref'] = $voucher_no;
                $bank_transaction['inputter'] = $this->current_user()->name;
                $bank_transaction['approver'] = 'N/A';
                $bank_transaction['amount'] = trim($input['amount']);
                $bank_transaction['txn_date'] =  date('Y-m-d');
                $bank_transaction['txn_time'] = date('H:m').'Hrs';
                $bank_transaction['narrative'] = substr($invoice->expense_desc, 0, 300).'...';
                DB::table('bank_transactions')->insert($bank_transaction);
            }

            if($invoice->status_id != 8){   // It was already marked as paid
                $invoice->disableLogging();
                $invoice->status_id = 8; //Paid
                $invoice->save();
                activity()
                    ->performedOn($invoice)
                    ->causedBy($this->current_user())
                    ->log('Paid');
                    
                return Response()->json(array('success' => 'Invoice already marked as paid'), 200);
            }
            
            return Response()->json(array('success' => 'Invoice marked as paid'), 200);
        }
        catch(Exception $e){
            return response()->json(['error'=>'Something went wrong during processing', 'msg'=>$e->getMessage()], 500);
        }
    }


}
