<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use JWTAuth;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;
use App\Models\InvoicesModels\Invoice;
use App\Models\InvoicesModels\InvoiceStatus;
use App\Models\ProjectsModels\Project;
use App\Models\AccountingModels\Account;
use App\Models\LPOModels\Lpo;
use Anchu\Ftp\Facades\Ftp;
use PDF;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Mail;
use App\Mail\NotifyInvoice;
use App\Models\AllocationModels\Allocation;
use App\Models\ApprovalsModels\Approval;
use App\Models\ApprovalsModels\ApprovalLevel;
use App\Models\StaffModels\Staff;
use App\Models\PaymentModels\Payment;
use App\Models\PaymentModels\PaymentMode;
use App\Models\PaymentModels\PaymentBatch;
use App\Models\PaymentModels\PaymentType;
use App\Models\LookupModels\Currency;
use App\Models\BankingModels\BankBranch;
use App\Exceptions\NotFullyAllocatedException;
use App\Exceptions\ApprovalException;
use App\Models\PaymentModels\VoucherNumber;
use Excel;
use App\Models\ReportModels\ReportingObjective;

class InvoiceApi extends Controller
{


    private $default_status = '';
    private $default_log_status = '';
    private $approvable_statuses = [];
    /**
     * Constructor
     */
    public function __construct()
    {
        $status = InvoiceStatus::where('default_status','1')->first();
        $log_status = InvoiceStatus::where('default_log_status','1')->first();
        $this->approvable_statuses = InvoiceStatus::where('approvable','1')->get();
        $this->default_status = $status->id;
        $this->default_log_status = $log_status->id;
    }

























    /**
     * Operation addInvoice
     *
     * Add a new invoice.
     *
     *
     * @return Http response
     */
    public function addInvoice()
    {

        $invoice = new Invoice;

        try{

            $form = Request::only(
                'id',
                'raised_by_id',
                'received_by_id',
                'external_ref',
                'expense_desc',
                'expense_purpose',
                'invoice_date',
                'lpo_id',
                'supplier_id',
                'payment_mode_id',
                'project_manager_id',
                'total',
                'currency_id',
                'file',
                'submission_type',
                'lpo_variation_reason',
                'program_activity_id'
                );

            // $ftp = FTP::connection()->getDirListing();

            $file = $form['file'];

            if($form['submission_type']=='full' || $form['submission_type']=='log'){
                $DT = new \DateTime();
                $dt = $DT->createFromFormat('D M d Y H:i:s T +',$form['invoice_date']);
                $invoice_date = $dt->format('Y-m-d');
            }

            $exists = Invoice::where('external_ref', $form['external_ref'])
                        ->where('supplier_id', $form['supplier_id'])
                        ->first();
            if(!empty($exists) && $form['submission_type']!='upload_logged'){
                return response()->json(['error'=>'Invoice with the same invoice number already exists'], 409);
            }

            if($form['submission_type']=='full'){

                $invoice->received_by_id                    =   (int)       $form['raised_by_id'];//received_by_id must be =raised_by_id
                $invoice->raised_by_id                      =   (int)       $form['raised_by_id'];
                $invoice->external_ref                      =               trim($form['external_ref']);
                $invoice->expense_desc                      =               $form['expense_desc'];
                $invoice->expense_purpose                   =               $form['expense_purpose'];
                $invoice->invoice_date                      =               $invoice_date;
                $invoice->lpo_id                            =   (((int) $form['lpo_id'])>0)?$form['lpo_id']:null;
                $invoice->supplier_id                       =   (int)       $form['supplier_id'];
                $invoice->payment_mode_id                     =   (int)       $form['payment_mode_id'];
                $invoice->project_manager_id                =   (int)       $form['project_manager_id'];
                $invoice->total                             =   (double)    $form['total'];
                $invoice->currency_id                       =   (int)       $form['currency_id'];
                $invoice->received_at                       =   date('Y-m-d H:i:s');
                $invoice->raised_at                         =   date('Y-m-d H:i:s');
                if(!empty($form['lpo_variation_reason']))
                $invoice->lpo_variation_reason = $form['lpo_variation_reason'];
                if(!empty($form['program_activity_id']))
                $invoice->program_activity_id = $form['program_activity_id'];

                $invoice->status_id                         =   $this->default_status;

                if(Invoice::where('external_ref', $invoice->external_ref)->where('supplier_id', $form['supplier_id'])->exists()){
                    return response()->json(["error"=>"Invoice with the same invoice number already exists"], 409,array(),JSON_PRETTY_PRINT);
                }

            }else if($form['submission_type']=='log'){

                $invoice->received_by_id                    =   (int)       $form['received_by_id'];
                $invoice->raised_by_id                      =   (int)       $form['raised_by_id'];
                $invoice->external_ref                      =               trim($form['external_ref']); 
                $invoice->invoice_date                      =               $invoice_date;              
                $invoice->lpo_id                            =   (((int) $form['lpo_id'])>0)?$form['lpo_id']:null;
                $invoice->supplier_id                       =   (int)       $form['supplier_id'];
                $invoice->payment_mode_id                  =   (int)       $form['payment_mode_id'];
                $invoice->total                             =   (double)    $form['total'];
                $invoice->currency_id                       =   (int)       $form['currency_id'];
                $invoice->received_at                       =   date('Y-m-d H:i:s');
                if(!empty($form['lpo_variation_reason']))
                $invoice->lpo_variation_reason = $form['lpo_variation_reason'];
                if(!empty($form['program_activity_id']))
                $invoice->program_activity_id = $form['program_activity_id'];

                $invoice->status_id                         =   $this->default_log_status;

                if(Invoice::where('external_ref', $invoice->external_ref)->where('supplier_id', $form['supplier_id'])->exists()){
                    return response()->json(["error"=>"Invoice with the same invoice number already exists"], 409,array(),JSON_PRETTY_PRINT);
                }

                if(!empty($invoice->lpo_id)){
                    $lpo = Lpo::find($invoice->lpo_id);
                    if(!empty($lpo)){
                        $invoice->expense_desc = $lpo->expense_desc;
                        $invoice->expense_purpose = $lpo->expense_purpose;
                        $invoice->project_manager_id = $lpo->project_manager_id;
                    }
                }

            }else if($form['submission_type']=='upload_logged'){

                $invoice = Invoice::with( 
                                        'raised_by',
                                        'received_by',
                                        'raise_action_by',
                                        'status',
                                        'project_manager',
                                        'supplier',
                                        'currency',
                                        'lpo',
                                        'rejected_by',
                                        'approvals',
                                        'allocations',
                                        'vouchers',
                                        'comments',
                                        'program_activity'
                                    )->find((int) $form['id']);

                $invoice->raised_by_id                      =   (int)       $form['raised_by_id'];
                $invoice->external_ref                      =               trim($form['external_ref']);
                $invoice->expense_desc                      =               $form['expense_desc'];
                $invoice->expense_purpose                   =               $form['expense_purpose'];
                $invoice->lpo_id                            =   (((int) $form['lpo_id'])>0)?$form['lpo_id']:null;
                $invoice->supplier_id                       =   (int)       $form['supplier_id'];
                $invoice->project_manager_id                =   (int)       $form['project_manager_id'];
                $invoice->total                             =   (double)    $form['total'];
                $invoice->currency_id                       =   (int)       $form['currency_id'];
                $invoice->received_at                       =   date('Y-m-d H:i:s');
                $invoice->raised_at                         =   date('Y-m-d H:i:s');
                if (($invoice->total - $invoice->amount_allocated) <= 0 && abs($invoice->total - $invoice->amount_allocated == 0)){
                    $invoice->status_id = $invoice->status->next_status_id;  
                }
                if(!empty($form['lpo_variation_reason']))
                $invoice->lpo_variation_reason = $form['lpo_variation_reason'];

                // if(Invoice::where('external_ref', $invoice->external_ref)->where('supplier_id', $form['supplier_id'])->exists()){
                //     return response()->json(["error"=>"Invoice with the same invoice number already exists"], 409,array(),JSON_PRETTY_PRINT);
                // }
                
            }else if($form['submission_type']=='finish_allocations'){


                $invoice = Invoice::find((int) $form['id']);
                $invoice->total = (double)    $form['total'];

                if ((($invoice->total - $invoice->amount_allocated) <= 1 ) && $invoice->status_id==11){ //allowance of 1
                    $invoice->status_id = $invoice->status->next_status_id;  
                }
                
            }

            if($invoice->save()) {

                $invoice->disableLogging(); //! Do not log the update
                if($form['submission_type']=='full'||$form['submission_type']=='upload_logged'){
                    
                    FTP::connection()->makeDir('/invoices');
                    FTP::connection()->makeDir('/invoices/'.$invoice->id);
                    FTP::connection()->uploadFile($file->getPathname(), '/invoices/'.$invoice->id.'/'.$invoice->id.'.'.$file->getClientOriginalExtension());

                    $invoice->invoice_document           =   $invoice->id.'.'.$file->getClientOriginalExtension();
                    $invoice->ref                        = "CHAI/INV/#$invoice->id/".date_format($invoice->created_at,"Y/m/d");
                    $invoice->save();

                }else if($form['submission_type']=='log'){
                    $invoice->ref                        = "CHAI/INV/#$invoice->id/".date_format($invoice->created_at,"Y/m/d");
                    $invoice->save();
                    try{
                    Mail::queue(new NotifyInvoice($invoice));
                    }catch(Exception $e){}

                }
                
                return Response()->json(array('success' => 'Invoice Added','invoice' => $invoice), 200);
            }
        

        }catch (JWTException $e){

            return response()->json(['error'=>'Something went wrong'], 500);

        }

    }
























    /**
     * Operation updateInvoice
     *
     * Update an existing invoice.
     *
     *
     * @return Http response
     */
    public function updateInvoice()
    {
        try{


            $form = Request::only(
                'id',
                'raised_by_id',
                'received_by_id',
                'external_ref',
                'expense_desc',
                'expense_purpose',
                'invoice_date',
                'lpo_id',
                'supplier_id',
                'payment_mode_id',
                'project_manager_id',
                'total',
                'currency_id',
                'file',
                'submission_type',
                'lpo_variation_reason',
                'program_activity_id'
                );

            $ftp = FTP::connection()->getDirListing();
            
            $file = $form['file'];

            $DT = new \DateTime();
            $dt = $DT->createFromFormat('D M d Y H:i:s T +',$form['invoice_date']);
            $invoice_date = $dt->format('Y-m-d');

            $invoice = Invoice::findOrFail($form['id']);

            $invoice->raised_by_id                      =   (int)       $form['raised_by_id'];
            $invoice->expense_desc                      =               $form['expense_desc'];
            $invoice->expense_purpose                   =               $form['expense_purpose'];
            $invoice->external_ref                      =               trim($form['external_ref']);
            $invoice->invoice_date                      =               $invoice_date;
            $invoice->lpo_id                            =   (((int) $form['lpo_id'])>0)?$form['lpo_id']:null;;
            $invoice->supplier_id                       =   (int)       $form['supplier_id'];
            $invoice->payment_mode_id                   =   (int)       $form['payment_mode_id'];
            $invoice->project_manager_id                =   (int)       $form['project_manager_id'];
            $invoice->total                             =   (double)    $form['total'];
            $invoice->currency_id                       =   (int)       $form['currency_id'];
            if(!empty($form['lpo_variation_reason']))
                $invoice->lpo_variation_reason = $form['lpo_variation_reason'];    
            if(!empty($form['program_activity_id']))
                $invoice->program_activity_id = $form['program_activity_id'];

            if(Invoice::where('external_ref', $invoice->external_ref)->where('supplier_id', $form['supplier_id'])->where('id', '!=', $form['id'])->exists()){
                return response()->json(["error"=>"Invoice with the same invoice number already exists"], 409,array(),JSON_PRETTY_PRINT);
            }

            if($invoice->save()) {

                $invoice->disableLogging(); //! Do not log the update again
                if($form['submission_type']=='full' && $file!=0){

                    FTP::connection()->makeDir('/invoices');
                    FTP::connection()->makeDir('/invoices/'.$invoice->id);
                    FTP::connection()->uploadFile($file->getPathname(), '/invoices/'.$invoice->id.'/'.$invoice->id.'.'.$file->getClientOriginalExtension());

                    $invoice->invoice_document           =   $invoice->id.'.'.$file->getClientOriginalExtension();
                    $invoice->ref                        = "CHAI/INV/#$invoice->id/".date_format($invoice->created_at,"Y/m/d");
                    $invoice->save();

                }
                
                return Response()->json(array('success' => 'Invoice updated','invoice' => $invoice), 200);
            }


        }catch (JWTException $e){

            return response()->json(['error'=>'You are not Authenticated'], 500);

        }

    }
























    /**
     * Operation deleteInvoice
     *
     * Deletes an invoice.
     *
     * @param int $invoice_id invoice id to delete (required)
     *
     * @return Http response
     */
    public function deleteInvoice($invoice_id)
    {
        $input = Request::all();
        try {
                   
            $deleted_allocation = Invoice::destroy($invoice_id);

            if($deleted_allocation){

                return response()->json(['msg'=>"Invoice deleted"], 200,array(),JSON_PRETTY_PRINT);
            }else{
                return response()->json(['error'=>"Invoice not found"], 404,array(),JSON_PRETTY_PRINT);
            }
    
        } catch (Exception $e) {
                return response()->json(['error'=>"Invoice not found"], 404,array(),JSON_PRETTY_PRINT);
            
        }




    }
























    /**
     * Operation getInvoiceById
     *
     * Find invoice by ID.
     *
     * @param int $invoice_id ID of invoice to return object (required)
     *
     * @return Http response
     */
    public function getInvoiceById($invoice_id)
    {
        $response = [];

        try{
            $response   = Invoice::with( 
                                        'raised_by',
                                        'received_by',
                                        'raise_action_by',
                                        'status',
                                        'project_manager',
                                        'supplier',
                                        'currency',
                                        'lpo',
                                        'rejected_by',
                                        'approvals',
                                        'payments',
                                        'payment_mode',
                                        'allocations',
                                        'logs',
                                        'vouchers',
                                        'comments',
                                        'program_activity'
                                    )->findOrFail($invoice_id);


            foreach ($response->allocations as $key => $value) {
                $project = Project::find((int)$value['project_id']);
                $account = Account::find((int)$value['account_id']);
                $objective = ReportingObjective::find((int)$value['objective_id']);
                
                $response['allocations'][$key]['project']  =   $project;
                $response['allocations'][$key]['account']  =   $account;
                $response['allocations'][$key]['objective']=   $objective;
            }

            foreach ($response->logs as $key => $value) {
                
                $response['logs'][$key]['causer']   =   $value->causer;
                $response['logs'][$key]['subject']  =   $value->subject;
            }

            foreach ($response->approvals as $key => $value) {
                $approver = Staff::find((int)$value['approver_id']);
                $appoval_level = ApprovalLevel::find((int)$value['approval_level_id']);

                $response['approvals'][$key]['approver']  =   $approver;
                $response['approvals'][$key]['approval_level']  =   $appoval_level;
            }

            foreach ($response->payments as $key => $value) {
                $payment_mode           = PaymentMode::find((int)$value['payment_mode_id']);
                $currency               = Currency::find((int)$value['currency_id']);
                $payment_batch          = PaymentBatch::find((int)$value['payment_batch_id']);
                $paid_to_bank_branch    = BankBranch::with('bank')->find((int)$value['paid_to_bank_branch_id']);

                $response['payments'][$key]['payment_mode']   =   $payment_mode;
                $response['payments'][$key]['currency']       =   $currency;
                $response['payments'][$key]['payment_batch']  =   $payment_batch;
                $response['payments'][$key]['paid_to_bank_branch']   =   $paid_to_bank_branch;
            }

            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);

        }catch(Exception $e){

            $response =  ["error"=>"Invoice could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }
























    /**
     * Operation approveInvoice
     *
     * Approve invoice by ID.
     *
     * @param int $invoice_id ID of invoice to return object (required)
     *
     * @return Http response
     */
    public function approveInvoice($invoice_id, $several=null)
    {
        $invoice = [];

        $user = JWTAuth::parseToken()->authenticate();

        try{
            $invoice   = Invoice::with( 
                                        'raised_by',
                                        'received_by',
                                        'raise_action_by',
                                        'status',
                                        'project_manager',
                                        'supplier',
                                        'payment_mode',
                                        'currency',
                                        'lpo',
                                        'rejected_by',
                                        'approvals',
                                        'allocations',
                                        'vouchers',
                                        'comments'
                                    )->findOrFail($invoice_id);

           
            if (!$user->can("APPROVE_INVOICE_".$invoice->status_id)){
                throw new ApprovalException("No approval permission");             
            }

            $approvable_status  = $invoice->status;
            $invoice->status_id = $invoice->status->next_status_id;
            
            $invoice->disableLogging(); //! Do not log the update
            if($invoice->save()) {

                $invoice   = Invoice::with( 
                                        'raised_by',
                                        'received_by',
                                        'raise_action_by',
                                        'status',
                                        'project_manager',
                                        'supplier',
                                        'payment_mode',
                                        'currency',
                                        'lpo',
                                        'rejected_by',
                                        'approvals',
                                        'allocations',
                                        'vouchers',
                                        'comments'
                                    )->findOrFail($invoice_id);

                $approval = new Approval;

                $approval->approvable_id            =   (int)   $invoice->id;
                $approval->approvable_type          =   "invoices";
                $approval->approval_level_id        =   $approvable_status->approval_level_id;
                $approval->approver_id              =   (int)   $user->id;

                $approval->save();


                if($approval->approval_level_id==4){

                    $payable    =   array(
                        'payable_type'                  =>  'invoices', 
                        'payable_id'                    =>  $invoice->id, 
                        'debit_bank_account_id'         =>  $invoice->currency_id, 
                        'currency_id'                   =>  $invoice->currency_id, 
                        'payment_desc'                  =>  $invoice->expense_desc, 
                        'paid_to_name'                  =>  $invoice->supplier->supplier_name, 
                        'paid_to_mobile_phone_no'       =>  $invoice->supplier->mobile_payment_number, 
                        'paid_to_bank_account_no'       =>  $invoice->supplier->bank_account, 
                        'paid_to_bank_id'               =>  $invoice->supplier->bank_id, 
                        'paid_to_bank_branch_id'        =>  $invoice->supplier->bank_branch_id, 
                        'payment_mode_id'               =>  $invoice->payment_mode_id, 
                        'amount'                        =>  $invoice->total, 
                        'payment_batch_id'              =>  "", 
                        'bank_charges'                  =>  "",
                        "withholding_tax"               =>  $invoice->withholding_tax,
                        "withholding_vat"               =>  $invoice->withholding_vat
                    );
                    
                    // Pick USD account if currency is USD
                    if($invoice->currency_id == 2){
                        $payable['paid_to_bank_account_no'] = $invoice->supplier->usd_account;
                    }
                    
                    $this->generate_payable_payment($payable);

                }

                activity()
                   ->performedOn($invoice)
                   ->causedBy($user)
                   ->log('approved');

                Mail::queue(new NotifyInvoice($invoice));

                if($several!=true)
                return Response()->json(array('msg' => 'Success: invoice approved','invoice' => $invoice), 200);
            }

        }catch(ApprovalException $ae){

            $response =  ["error"=>"You do not have the permissions to perform this action at this point"];
            return response()->json($response, 403,array(),JSON_PRETTY_PRINT);
        }catch(Exception $e){

            $response =  ["error"=>"Invoice could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }



















    /**
     * Operation rejectInvoice
     * Reject invoice by ID.
     * @param int $invoice_id ID of invoice to return object (required)
     * @return Http response
     */
    public function rejectInvoice($invoice_id)
    {
        $form = Request::only('rejection_reason');
        $user = JWTAuth::parseToken()->authenticate();
        try{
            $invoice = Invoice::with( 
                                        'raised_by',
                                        'received_by',
                                        'raise_action_by',
                                        'status',
                                        'project_manager',
                                        'supplier',
                                        'payment_mode',
                                        'currency',
                                        'lpo',
                                        'rejected_by',
                                        'approvals',
                                        'allocations',
                                        'vouchers',
                                        'comments'
                                    )->findOrFail($invoice_id);
           
            if (!$user->can("APPROVE_INVOICE_".$invoice->status_id)){
                throw new ApprovalException("No approval permission");             
            }

            $invoice->status_id = 9;
            $invoice->rejected_by_id            =   (int)   $user->id;
            $invoice->rejected_at               =   date('Y-m-d H:i:s');
            $invoice->rejection_reason          =   $form['rejection_reason'];

            $invoice->disableLogging(); //! Do not log the update
            if($invoice->save()) {

                Mail::queue(new NotifyInvoice($invoice));

                activity()
                   ->performedOn($invoice)
                   ->causedBy($user)
                   ->log('rejected');

                return Response()->json(array('msg' => 'Success: invoice approved','invoice' => $invoice), 200);
            }

        }catch(ApprovalException $ae){

            $response =  ["error"=>"You do not have the permissions to perform this action at this point"];
            return response()->json($response, 403,array(),JSON_PRETTY_PRINT);
        }catch(Exception $e){

            $response =  ["error"=>"Invoice could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }



    /**
     * Operation getDocumentById
     * get invoice document by ID.
     * @param int $invoice_id ID of invoice to return object (required)
     * @return Http response
     */
    public function getDocumentById($invoice_id)
    {
        try{
            $invoice        = Invoice::findOrFail($invoice_id);
            $path           = '/invoices/'.$invoice->id.'/'.$invoice->invoice_document;
            $file_contents  = FTP::connection()->readFile($path);
            $response       = Response::make($file_contents, 200);
            $response->header('Content-Type', 'application/pdf');
            return $response;  
        }
        catch (Exception $e){
            $response = Response::make("", 500);
            $response->header('Content-Type', 'application/pdf');
            return $response;
        }
    }



    /**
     * Operation getPaymentVoucherById
     * get payment Voucher by ID.
     * @param int $invoice_id ID of invoice to return object (required)
     * @return Http response
     */
    public function getPaymentVoucherById($invoice_id)
    {
        try{
            $invoice = Invoice::findOrFail($invoice_id);
            $payment = Payment::with('voucher_number')->where('payable_id', $invoice->id)->where('payable_type', 'invoices')->first();
            $voucher_date = '-';
            $vendor = '-';
            $voucher_no = '-';
            $bank_ref = '-';

            if(empty($invoice->migration_id)) {
                if(!empty($payment->voucher_no)) {
                    $voucher = VoucherNumber::find($payment->voucher_no);
                    $voucher_no = $voucher->voucher_number;
                }
            }
            else {
                $voucher_no = 'CHAI'.$this->pad_zeros(5, $invoice->migration_id);
            }

            if(!empty($payment->payment_batch_id) && $payment->payment_batch_id > 0){
                $batch = PaymentBatch::find($payment->payment_batch_id);
                $voucher_date = $batch->created_at;
            }

            $vendor = $invoice->supplier->supplier_name;

            $unique_approvals = $this->unique_multidim_array($invoice->approvals, 'approval_level_id');
            $data = array(
                    'payable'   => $invoice,
                    'voucher_date' => $voucher_date,
                    'vendor'=>$vendor,
                    'voucher_no'=>$voucher_no,
                    'payable_type'=>'Invoice',
                    'unique_approvals' => $unique_approvals,
                    'bank_transaction' => $invoice->bank_transaction
                    );

            $pdf            = PDF::loadView('pdf/payment_voucher', $data);

            $file_contents  = $pdf->stream();

            Storage::put('invoices/'.$invoice_id.'.voucher.temp', $file_contents);

            $url            = storage_path("app/invoices/".$invoice_id.'.voucher.temp');

            $file           = File::get($url);

            $response       = Response::make($file, 200);

            $response->header('Content-Type', 'application/pdf');

            return $response;
        }catch (Exception $e ){            

            $response       = Response::make("", 200);

            $response->header('Content-Type', 'application/pdf');

            return $response;  

        }
    }















    /**
     * Operation submitInvoiceForApproval
     *
     * Submit invoice by ID.
     *
     * @param int $invoice_id ID of invoice to return object (required)
     *
     * @return Http response
     */
    public function submitInvoiceForApproval($invoice_id)
    {
        try{
            $invoice   = Invoice::with( 
                                        'raised_by',
                                        'received_by',
                                        'raise_action_by',
                                        'status',
                                        'project_manager',
                                        'supplier',
                                        'payment_mode',
                                        'currency',
                                        'lpo',
                                        'rejected_by',
                                        'approvals',
                                        'allocations',
                                        'logs',
                                        'vouchers',
                                        'comments'
                                    )->findOrFail($invoice_id);

           if (($invoice->total - $invoice->amount_allocated) > 1 ){ //allowance of 1
             throw new NotFullyAllocatedException("This invoice has not been fully allocated");
             
           }

            $invoice->status_id = $invoice->status->next_status_id;
            if($invoice->status_id  != 9){ // Only set request time if its not after corrections
                $invoice->raised_at = date('Y-m-d H:i:s');
            }

            $invoice->disableLogging(); //! Do not log the update
            if($invoice->save()) {

                Mail::queue(new NotifyInvoice($invoice));

                $user = JWTAuth::parseToken()->authenticate();
                activity()
                   ->performedOn($invoice)
                   ->causedBy($user)
                   ->log('submited for approval');

                return Response()->json(array('msg' => 'Success: invoice submitted','invoice' => $invoice), 200);
            }

        }catch(NotFullyAllocatedException $ae){

            $response =  ["error"=>"Invoice not fully allocated"];
            return response()->json($response, 403,array(),JSON_PRETTY_PRINT);
        }catch(Exception $e){

            $response =  ["error"=>"Invoice could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }

























    /**
     * Operation approveSeveralInvoices
     *
     * Approve several Invoices.
     *
     *
     * @return Http response
     */
    public function approveSeveralInvoices()
    {   
        try {
            $form = Request::only("invoices");
            $invoice_ids = $form['invoices'];

            foreach ($invoice_ids as $key => $invoice_id) {
                $this->approveInvoice($invoice_id, true);
            }

            return response()->json(['invoices'=>$form['invoices']], 201,array(),JSON_PRETTY_PRINT);
            
        } catch (Exception $e) {
             return response()->json(['error'=>"An rerror occured during processing"], 500,array(),JSON_PRETTY_PRINT);
            
        }
    }
























    /**
     * Operation getInvoices
     *
     * invoices List.
     *
     *
     * @return Http response
     */
    public function getInvoices()
    {


        $input = Request::all();
        //query builder
        $qb = DB::table('invoices');
        $qb->leftJoin('suppliers', 'invoices.supplier_id', '=', 'suppliers.id');
        $qb->select('invoices.*');

        $qb->whereNull('invoices.deleted_at');

        $response;
        $response_dt;

        $total_records          = $qb->count();
        $records_filtered       = 0;
        

        //if status is set
        if(array_key_exists('status', $input)){

            $status_ = (int) $input['status'];

            if($status_ >-1){
                $qb->where('invoices.status_id', $input['status']);
                $qb->where('invoices.raised_by_id',$this->current_user()->id);
            }elseif ($status_==-1) {
                $qb->where('invoices.raised_by_id',$this->current_user()->id);
            }elseif ($status_==-2) {
                
            }elseif ($status_==-3) {
                $qb->where('invoices.project_manager_id',$this->current_user()->id);
            }
        }



        $app_stat = $this->approvable_statuses ;
        //if approvable is set

        if(array_key_exists('approvable', $input)){

            $qb->where(function ($query) use ($app_stat) {
                    
                foreach ($app_stat as $key => $value) {
                    $query->orWhere('invoices.status_id',$value['id']);
                }

            });
        }

        if(array_key_exists('my_approvables', $input)){


            $current_user =  JWTAuth::parseToken()->authenticate();
            if($current_user->hasRole([
                'super-admin',
                'admin',
                'director',
                'associate-director',
                'financial-controller',
                'program-manager', 
                'accountant', 
                'assistant-accountant']
            )){                   
                $qb->where(function ($query) use ($app_stat,$current_user) {
                    foreach ($app_stat as $key => $value) {
                        $permission = 'APPROVE_INVOICE_'.$value['id'];
                        if($current_user->can($permission)&&$value['id']==1){
                            $query->orWhere(function ($query1) use ($value,$current_user) {
                                $query1->Where('invoices.status_id',$value['id']);
                                $query1->Where('invoices.project_manager_id',$current_user->id);
                            });
                        }
                        else if($current_user->can($permission)){
                            $query->orWhere('invoices.status_id',$value['id']); 
                        }
                    }

                });


            }else{
                $qb->where('invoices.id',0);
            }
        }




        //searching
        if(array_key_exists('searchval', $input)){
            $qb->where(function ($query) use ($input) {
                
                $query->orWhere('invoices.id','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('invoices.ref','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('invoices.external_ref','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('invoices.total','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('invoices.expense_desc','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('invoices.expense_purpose','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('suppliers.supplier_name','like', '\'%' . $input['search']['value']. '%\'');

            });

            $sql = Invoice::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("invoices.*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];


        }


        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction     = "asc";
            $order_column_name   = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }

            $qb->orderBy('invoices.'.$order_column_name, $order_direction);
        }else{
            //$qb->orderBy("project_code", "asc");
        }

        //limit
        if(array_key_exists('limit', $input)){


            $qb->limit($input['limit']);


        }

        //migrated
        if(array_key_exists('migrated', $input)){

            $mig = (int) $input['migrated'];

            if($mig==0){
                $qb->whereNull('invoices.migration_id');
            }else if($mig==1){
                $qb->whereNotNull('invoices.migration_id');
            }


        }




        if(array_key_exists('datatables', $input)){

            //searching
            $qb->where(function ($query) use ($input) {
                
                $query->orWhere('invoices.id','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('invoices.ref','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('invoices.external_ref','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('invoices.total','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('invoices.expense_desc','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('invoices.expense_purpose','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('suppliers.supplier_name','like', '\'%' . $input['search']['value']. '%\'');

            });




            $sql = Invoice::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("`invoices`.*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];


            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){

                $qb->orderBy('invoices.'.$order_column_name, $order_direction);

            }






            //limit $ offset
            if((int)$input['start']!= 0 ){

                $response_dt    =   $qb->limit($input['length'])->offset($input['start']);

            }else{
                $qb->limit($input['length']);
            }




            $qb->addSelect('suppliers.supplier_name');
            $sql = Invoice::bind_presql($qb->toSql(),$qb->getBindings());

            // $response_dt = DB::select($qb->toSql(),$qb->getBindings());         //pseudo
            $response_dt = DB::select($sql);


            $response_dt = json_decode(json_encode($response_dt), true);

            $response_dt    = $this->append_relationships_objects($response_dt);
            $response_dt    = $this->append_relationships_nulls($response_dt);
            $response       = Invoice::arr_to_dt_response( 
                $response_dt, $input['draw'],
                $total_records,
                $records_filtered
                );


        }else{

            $sql            = Invoice::bind_presql($qb->toSql(),$qb->getBindings());
            $response       = json_decode(json_encode(DB::select($sql)), true);
            if(!array_key_exists('lean', $input)){
                $response       = $this->append_relationships_objects($response);
                $response       = $this->append_relationships_nulls($response);
            }
        }




        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }


























    public function append_relationships_objects($data = array()){

        // print_r($data);

        foreach ($data as $key => $value) {

            $invoice = Invoice::find($data[$key]['id']);

            $data[$key]['raised_by']                    = $invoice->raised_by;
            $data[$key]['received_by']                  = $invoice->received_by;
            $data[$key]['raise_action_by']              = $invoice->raise_action_by;
            $data[$key]['status']                       = $invoice->status;
            $data[$key]['project_manager']              = $invoice->project_manager;
            $data[$key]['supplier']                     = $invoice->supplier;
            $data[$key]['payment_mode']                 = $invoice->payment_mode;
            $data[$key]['currency']                     = $invoice->currency;
            $data[$key]['lpo']                          = $invoice->lpo;
            $data[$key]['rejected_by']                  = $invoice->rejected_by;
            $data[$key]['approvals']                    = $invoice->approvals;
            $data[$key]['allocations']                  = $invoice->allocations;
            $data[$key]['logs']                         = $invoice->logs;
            $data[$key]['vouchers']                     = $invoice->vouchers;
            $data[$key]['comments']                     = $invoice->comments;
            $data[$key]['program_activity']             = $invoice->program_activity;

            foreach ($invoice->allocations as $key1 => $value1) {
                $project = Project::find((int)$value1['project_id']);
                $account = Account::find((int)$value1['account_id']);
                $objective = ReportingObjective::find((int)$value1['objective_id']);
                $data[$key]['allocations'][$key1]['project']  =   $project;
                $data[$key]['allocations'][$key1]['account']  =   $account;
                $data[$key]['allocations'][$key1]['objective']=   $objective;
            }
        }

        return $data;


    }
















    



    public function append_relationships_nulls($data = array()){


        foreach ($data as $key => $value) {


            if($value["raised_by"]==null){
                $data[$key]['raised_by'] = array("full_name"=>"N/A");                
            }
            if($value["received_by"]==null){
                $data[$key]['received_by'] = array("full_name"=>"N/A");                
            }
            if($value["raise_action_by"]==null){
                $data[$key]['raise_action_by'] = array("full_name"=>"N/A");                
            }
            if($value["status"]==null){
                $data[$key]['status'] = array("invoice_status"=>"N/A");                
            }
            if($value["project_manager"]==null){
                $data[$key]['project_manager'] = array("full_name"=>"N/A");                
            }
            if($value["supplier"]==null){
                $data[$key]['supplier'] = array("supplier_name"=>"N/A");                
            }
            if($value["rejected_by"]==null){
                $data[$key]['rejected_by'] = array("full_name"=>"N/A");                
            }
            if($data[$key]["currency"]==null){
                $data[$key]["currency"] = array("currency_name"=>"N/A");
            }
            if($data[$key]["program_activity"]==null){
                $data[$key]["program_activity"] = array("program_activity"=>array("title"=>"N/A", "description"=>"N/A"));
            }
        }

        return $data;
    }

        /**
     * Adds zeros at the beginning of string until the desired
     * length is reached.
     */
    public function pad_zeros($desired_length, $data){
        if(strlen($data)<$desired_length){
            return str_repeat('0', $desired_length-strlen($data)).$data;
        }
        else{
            return $data;
        }
    }


    public function exportInvoices(){
        $invoices = Invoice::with('raised_by','received_by','status','project_manager','supplier','payment_mode',
                'rejected_by','currency','lpo')->get();

        $excel_data = array();
        
        foreach($invoices as $invoice){
            $row = array();
            $row['id'] = $invoice->id;
            $row['ref'] = $invoice->ref;
            $row['lpo_id'] = $invoice->lpo_id;
            $row['supplier'] = empty($invoice->supplier->supplier_name)?"":$invoice->supplier->supplier_name;
            $row['expense_description'] = $invoice->expense_desc;
            $row['expense_purpose'] = $invoice->expense_purpose;
            $row['invoice_no'] = $invoice->external_ref;
            $row['invoice_date'] = $invoice->invoice_date;
            $row['received_by'] = empty($invoice->received_by->full_name)?'':$invoice->received_by->full_name;
            $row['received_at'] = $invoice->received_at;
            $row['total'] = $invoice->total;
            $row['project_manager'] = empty($invoice->project_manager->full_name)?"":$invoice->project_manager->full_name;
            $row['status'] = empty($invoice->status->invoice_status)?"":$invoice->status->invoice_status;
            $row['payment_mode'] = empty($invoice->payment_mode->abrv)?"":$invoice->payment_mode->abrv;
            $row['comments'] = $invoice->comments;
            $row['currency'] = empty($invoice->currency->currency_name)?'':$invoice->currency->currency_name;
            $row['rejection_reason'] = $invoice->rejection_reason;
            // $row['project'] = empty($invoice->project->project_code)?"":$invoice->project->project_code;
            // $row['account'] = empty($invoice->account->account_name)?"":$invoice->account->account_name;
            $row['rejected_by'] = empty($invoice->rejected_by->full_name)?"":$invoice->rejected_by->full_name;
            $row['rejected_at'] = $invoice->rejected_at;
            if(!empty($invoice->migration_id)) {
                $row['pv_no'] = 'CHAI'.$this->pad_zeros(5, $invoice->id);
            }
            else {
                $payment = Payment::where('payable_id',$invoice->id)->where('payable_type', 'invoices')->first();
                $voucher_no = '-';
                if(!empty($payment)) $voucher = VoucherNumber::find($payment->voucher_no);
                if(!empty($voucher->voucher_number)) $voucher_no = $voucher->voucher_number;
                $row['pv_no'] = $voucher_no;
            }
            
            foreach($invoice->allocations as $allocation){
                $row['allocation_account_code'] = empty($allocation->account->account_code)?"":$allocation->account->account_code;
                $row['allocation_account_name'] = empty($allocation->account->account_name)?"":$allocation->account->account_name;
                $row['allocation_purpose'] = $allocation->allocation_purpose;
                $row['project'] = empty($allocation->project->project_code)?"":$allocation->project->project_code;

                array_push($excel_data, $row);
            }
            

        }

        $headers = [
            'Access-Control-Allow-Origin'      => '*',
            'Allow'                            => 'GET, POST, OPTIONS',
            'Access-Control-Allow-Headers'     => 'Origin, Content-Type, Accept, Authorization, X-Requested-With',
            'Access-Control-Allow-Credentials' => 'true'
        ];
        // Build excel
        $file = Excel::create('Invoices', function($excel) use ($excel_data) {

            // Set the title
            $excel->setTitle('Invoices');

            // Chain the setters
            $excel->setCreator('GIFMS')->setCompany('Clinton Health Access Initiative - Kenya');

            $excel->setDescription('A list of invoices and their allocations and pv numbers');

            $headings = array('id','ref','lpo_id',
            'supplier','expense_description','expense_purpose','invoice_no','invoice_date','received_by','received_at','total','project_manager','status','payment_mode',
            'comments','currency','rejection_reason','rejected_by','rejected_at','pv_no','allocation_account_code','allocation_account_name','allocation_purpose','project');

            $excel->sheet('Invoices', function ($sheet) use ($excel_data, $headings) {
                foreach($excel_data as $data_row){

                    $sheet->appendRow($data_row);
                }
                
                $sheet->prependRow(1, $headings);
                $sheet->setFontSize(10);
                $sheet->setHeight(1, 25);
                $sheet->row(1, function($row){
                    $row->setFontSize(11);
                    $row->setFontWeight('bold');
                    $row->setAlignment('center');
                    $row->setValignment('center');
                    $row->setBorder('none', 'thin', 'none', 'thin');
                    $row->setBackground('#004080');                        
                    $row->setFontColor('#ffffff');
                });
                $sheet->setWidth(array(
                    'B' => 15,
                    'C' => 20,
                    'D' => 20,
                    'E' => 15,
                    'F' => 35,
                    'J' => 15,
                    'K' => 20,
                    'L' => 20
                ));
            });

        })->download('xlsx', $headers);
    }




    /**
     * Operation recallInvoice
     * 
     * Recalls an Invoice.
     * 
     * @param int $invoice_id Invoice id to recall (required)
     * 
     * @return Http response
     */
    public function recallInvoice($invoice_id)
    {
        $input = Request::all();
        
        $invoice = Invoice::find($invoice_id); 
        $user = $this->current_user();       

        // Ensure Invoice is in the recallable statuses
        if(!in_array($invoice->status_id, [1,2,3,12])){
            return response()->json(['msg'=>"you do not have permission to do this"], 403, array(), JSON_PRETTY_PRINT);
        }

        $invoice->status_id = 13;   // 13 is the recalled status id
        
        $invoice->disableLogging(); //! Do not log the update
        if($invoice->save()){
            activity()
                   ->performedOn($invoice)
                   ->causedBy($user)
                   ->log('recalled');
            return response()->json(['msg'=>"invoice recalled"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"could not recall invoice"], 404,array(),JSON_PRETTY_PRINT);
        }

    }




    public function copyInvoice($invoice_id){
        try{
            $invoice = Invoice::find($invoice_id);
            $new_invoice = new Invoice;
            // $new_invoice = $invoice;
            $new_invoice->status_id = 11;   // Logged, pending upload
            $new_invoice->external_ref = $invoice->external_ref.'_copy';
            $new_invoice->invoice_date = date('Y-m-d H:i:s');
            $new_invoice->received_at  = date('Y-m-d H:i:s');
            $new_invoice->raised_at = date('Y-m-d H:i:s');
            $new_invoice->supplier_id = $invoice->supplier_id;
            $new_invoice->payment_mode_id = $invoice->payment_mode_id;
            // $new_invoice->lpo_id = $invoice->lpo_id;
            $new_invoice->program_activity_id = $invoice->program_activity_id;
            $new_invoice->raised_by_id = $invoice->raised_by_id;
            $new_invoice->currency_id = $invoice->currency_id;
            $new_invoice->total = $invoice->total;
            $new_invoice->expense_desc = $invoice->expense_desc;
            $new_invoice->expense_purpose = $invoice->expense_purpose;
            $new_invoice->project_manager_id = $invoice->project_manager_id;
            $new_invoice->received_by_id = $this->current_user()->id;
            $new_invoice->raised_by_id = $this->current_user()->id;
            // $new_invoice->invoice_document = $invoice->invoice_document;
            $new_invoice->created_at = date('Y-m-d H:i:s');
            
            if($new_invoice->save()){
                $new_invoice->ref = "CHAI/INV/#$new_invoice->id/".date_format($new_invoice->created_at,"Y/m/d");

                $new_invoice->disableLogging(); //! Do not log the update
                $new_invoice->save();

                foreach($invoice->allocations as $alloc){
                    $allocation = new Allocation;

                    $allocation->account_id             =               $alloc->account_id;
                    $allocation->allocatable_id         =               $new_invoice->id;
                    $allocation->allocatable_type       =               $alloc->allocatable_type;
                    $allocation->amount_allocated       =               $alloc->amount_allocated;
                    $allocation->allocation_month       =               $alloc->allocation_month;
                    $allocation->percentage_allocated   =               $alloc->percentage_allocated;
                    $allocation->project_id             =               $alloc->project_id;
                    $allocation->allocation_purpose     =               $alloc->allocation_purpose;
                    $allocation->allocation_year        =               $alloc->allocation_year;
                    $allocation->allocation_step        =               $alloc->allocation_step;
                    $allocation->activity_id            =               $alloc->activity_id;
                    $allocation->allocated_by_id        =       (int)   $this->current_user()->id;

                    if($allocation->save()) {
                        activity()
                        ->performedOn($allocation->allocatable)
                        ->causedBy($this->current_user())
                        ->log('allocated');
                    }
                }
            }
            return Response()->json(array('success' => 'Invoice Copied','invoice' => $new_invoice), 200);
        }
        catch (Exception $e){
            return response()->json(['error'=>'Something went wrong during processing', 'msg'=>$e->getMessage()], 500);
        }
    }



    public function withholdTax(){
        try{
            $input = Request::all();

            if(empty($input['withholding_tax']) && empty($input['withholding_vat'])){
                return response()->json(['error'=>'Withhold at least one tax'], 422);
            }

            $invoice = Invoice::findOrFail($input['invoice_id']);
            $invoice->disableLogging();
            $log_text = '';
            if(!empty($input['withholding_tax'])){
                $invoice->withholding_tax = $input['withholding_tax'];
            }
            if(!empty($input['withholding_vat'])){
                $invoice->withholding_vat = $input['withholding_vat'];
            }

            if(empty($input['withholding_vat']) && !empty($input['withholding_tax'])){
                $log_text = 'Withheld Income Tax';
            }
            else if(!empty($input['withholding_vat']) && empty($input['withholding_tax'])){
                $log_text = 'Withheld VAT';
            }
            else{
                $log_text = 'Withheld VAT and Income Tax';
            }

            if($invoice->save()){
                activity()
                   ->performedOn($invoice)
                   ->causedBy($this->current_user())
                   ->log($log_text);
                
                return Response()->json(array('success' => 'Taxes withheld'), 200);
            }
        }
        catch(Exception $e){
            return response()->json(['error'=>'Something went wrong during processing', 'msg'=>$e->getMessage()], 500);
        }
    }


}
