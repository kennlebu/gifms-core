<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\Models\ProjectsModels\Project;
use JWTAuth;
use DB;

class ProjectApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }































    

    /**
     * Operation addProject
     *
     * Add a new project.
     *
     *
     * @return Http response
     */
    public function addProject()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addProject');
        }
        $body = $input['body'];


        return response('How about implementing addProject as a POST method ?');
    }































    
    /**
     * Operation updateProject
     *
     * Update an existing project.
     *
     *
     * @return Http response
     */
    public function updateProject()
    {
        $form = Request::only(
            'id'
            );

        $project = Project::find($form['id']);

            // $project->requested_by_id                   =   (int)   $form['requested_by_id'];

        if($project->save()) {

            return Response()->json(array('msg' => 'Success: project updated','project' => $project), 200);
        }
    }































    
    /**
     * Operation deleteProject
     *
     * Deletes an project.
     *
     * @param int $project_id project id to delete (required)
     *
     * @return Http response
     */
    public function deleteProject($project_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteProject as a DELETE method ?');
    }































    
    /**
     * Operation getProjectById
     *
     * Find project by ID.
     *
     * @param int $project_id ID of project to return object (required)
     *
     * @return Http response
     */
    public function getProjectById($project_id)
    {
        $input = Request::all();

        try{

            $response   = Project::findOrFail($project_id);
           
            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);

        }catch(Exception $e){

            $response =  ["error"=>"project could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }































    
    /**
     * Operation projectsGet
     *
     * projects List.
     *
     *
     * @return Http response
     */
    public function projectsGet()
    {
        $input = Request::all();

        $response = Project::orderBy('project_code', 'desc')->get();


        $current_user = JWTAuth::parseToken()->authenticate();

        if(array_key_exists('my_assigned', $input)&& $input['my_assigned'] = "true"){


            // $current_user = JWTAuth::parseToken()->authenticate();

            $response = DB::table('projects')
                     ->select(DB::raw('projects.*'))
                     ->rightJoin('project_teams', 'project_teams.project_id', '=', 'projects.id')
                     ->rightJoin('staff', 'staff.id', '=', 'project_teams.staff_id')
                     ->where('staff.id', '=', $current_user->id)
                     ->groupBy('projects.id')
                     ->orderBy('projects.project_code', 'desc')
                     ->get();
                     
            if($current_user->hasRole(['accountant','assistant-accountant','financial-controller'])){
                $response = Project::orderBy('project_code', 'desc')->get();
            }
        }


        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }
}
