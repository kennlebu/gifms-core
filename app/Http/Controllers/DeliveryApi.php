<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;
use App\Models\DeliveriesModels\Delivery;

class DeliveryApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

























    /**
     * Operation getDeliveries
     *
     * deliveries List.
     *
     *
     * @return Http response
     */
    public function getDeliveries()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $delivery_id = $input['delivery_id'];


        return response('How about implementing getDeliveries as a GET method ?');
    }
























    /**
     * Operation addDelivery
     *
     * Add a new delivery.
     *
     *
     * @return Http response
     */
    public function addDelivery()
    {

        $input = Request::all();



        $form = Request::only(
            'received_by_id',
            'comment',
            'external_ref',
            'lpo_id'
            );

        try{

            $delivery = new Delivery;

            $delivery->received_by_id                    =   (int)   $form['received_by_id'];
            $delivery->comment                           =           $form['comment'];
            $delivery->external_ref                      =           $form['external_ref'];
            $delivery->lpo_id                            =   (int)   $form['lpo_id'];
            // $delivery->status_id                         =   2;

            // $user = JWTAuth::parseToken()->authenticate();
            // $delivery->request_action_by_id            =   (int)   $user->id;



            if($delivery->save()) {

                $delivery->ref = "CHAI/DLV/#$delivery->id/".date_format($delivery->created_at,"Y/m/d");
                $delivery->save();

                return Response()->json(array('msg' => 'Success: delivery added','delivery' => Delivery::find((int)$delivery->id)), 200);
            }

        }catch (JWTException $e){

            return response()->json(['error'=>'something went wrong'], 500);

        }
    }
























    /**
     * Operation updateDelivery
     *
     * Update an existing delivery.
     *
     *
     * @return Http response
     */
    public function updateDelivery()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateDelivery');
        }
        $body = $input['body'];


        return response('How about implementing updateDelivery as a PUT method ?');
    }
























    /**
     * Operation deleteDelivery
     *
     * Deletes an delivery.
     *
     * @param int $delivery_id delivery id to delete (required)
     *
     * @return Http response
     */
    public function deleteDelivery($delivery_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteDelivery as a DELETE method ?');
    }
























    /**
     * Operation getDeliveryById
     *
     * Find delivery by ID.
     *
     * @param int $delivery_id ID of delivery to return object (required)
     *
     * @return Http response
     */
    public function getDeliveryById($delivery_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getDeliveryById as a GET method ?');
    }
























    /**
     * Operation allocateDelivery
     *
     * Allocate delivery by ID.
     *
     * @param int $delivery_id ID of delivery to return object (required)
     *
     * @return Http response
     */
    public function allocateDelivery($delivery_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing allocateDelivery as a PATCH method ?');
    }
























    /**
     * Operation approveDelivery
     *
     * Approve delivery by ID.
     *
     * @param int $delivery_id ID of delivery to return object (required)
     *
     * @return Http response
     */
    public function approveDelivery($delivery_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing approveDelivery as a PATCH method ?');
    }
























    /**
     * Operation getDocumentById
     *
     * get delivery document by ID.
     *
     * @param int $delivery_id ID of delivery to return object (required)
     *
     * @return Http response
     */
    public function getDocumentById($delivery_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getDocumentById as a GET method ?');
    }
























    /**
     * Operation submitDeliveryForApproval
     *
     * Submit delivery by ID.
     *
     * @param int $delivery_id ID of delivery to return object (required)
     *
     * @return Http response
     */
    public function submitDeliveryForApproval($delivery_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing submitDeliveryForApproval as a PATCH method ?');
    }
}
