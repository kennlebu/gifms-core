<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\Models\LPOModels\Lpo;
use App\Models\LPOModels\LpoQuotation;
use Anchu\Ftp\Facades\Ftp;
use Illuminate\Support\Facades\Response;

class LPOQuotationApi extends Controller
{
    /**
     * Operation addLpoQuotation
     *
     * Add a new lpo quotation.
     *
     *
     * @return Http response
     */
    public function addLpoQuotation()
    {
        $lpo_quotation = new LpoQuotation;
        try{
            $form = Request::only(
                'lpo_id',
                'uploaded_by_id',
                'supplier_id',
                'amount',
                'file'
                );

            $file = $form['file'];

            $lpo_quotation->uploaded_by_id                      =   (int)       $form['uploaded_by_id'];
            $lpo_quotation->supplier_id                         =   (int)       $form['supplier_id'];
            $lpo_quotation->amount                              =   (double)    $form['amount'];
            $lpo_quotation->lpo_id                              =   (int)       $form['lpo_id'];

            if($lpo_quotation->save()) {
                FTP::connection()->makeDir('/lpos');
                FTP::connection()->makeDir('/lpos/'.$lpo_quotation->lpo_id);
                FTP::connection()->makeDir('/lpos/'.$lpo_quotation->lpo_id.'/quotations');
                FTP::connection()->makeDir('/lpos/'.$lpo_quotation->lpo_id.'/quotations/'.$lpo_quotation->id);
                FTP::connection()->uploadFile($file->getPathname(), '/lpos/'.$lpo_quotation->lpo_id.'/quotations/'.$lpo_quotation->id.'/'.$lpo_quotation->id.'.'.$file->getClientOriginalExtension());

                $lpo_quotation->quotation_doc                   =   $lpo_quotation->id.'.'.$file->getClientOriginalExtension();
                $lpo_quotation->save();                

                $lpo = Lpo::with("preffered_quotation")->findOrFail($lpo_quotation->lpo_id);
                if (is_null($lpo->preffered_quotation)) {
                    $lpo->preffered_quotation_id = $lpo_quotation->id;

                    activity()
                        ->performedOn($lpo)
                        ->causedBy($this->current_user())
                        ->log('quotation added');

                    $lpo->disableLogging(); //! Do not log the update
                    $lpo->save();
                }

                return Response()->json(array('success' => 'lpo quoatation added','lpo_quotation' => $lpo_quotation), 200);
            }
        }
        catch (JWTException $e){
            return response()->json(['error'=>'You are not Authenticated'], 401);
        }
    }




































    /**
     * Operation updateLpoQuotation
     *
     * Update an existing LPO Quotation.
     *
     *
     * @return Http response
     */
    public function updateLpoQuotation()
    {
        try{
            $form = Request::all();
            $quotation = LpoQuotation::findOrFail($form['id']);
            $file = $form['file'];
            $quotation->supplier_id              =               $form['supplier_id'];
            $quotation->amount                   =               $form['amount'];
            $quotation->disableLogging();

            if($quotation->save()) {
                if($file!=0){
                    FTP::connection()->makeDir('/lpos');
                    FTP::connection()->makeDir('/lpos/'.$quotation->lpo_id);
                    FTP::connection()->makeDir('/lpos/'.$quotation->lpo_id.'/quotations');
                    FTP::connection()->makeDir('/lpos/'.$quotation->lpo_id.'/quotations/'.$quotation->id);
                    FTP::connection()->uploadFile($file->getPathname(), '/lpos/'.$quotation->lpo_id.'/quotations/'.$quotation->id.'/'.$quotation->id.'.'.$file->getClientOriginalExtension());
                }

                return Response()->json(array('success' => 'Quotation updated','lpo_quotation' => $quotation), 200);
            }
        }
        catch (JWTException $e){
            return response()->json(['error'=>'You are not Authenticated'], 401);
        }
    }




















    /**
     * Operation deleteLpoQuotation
     *
     * Deletes an lpo_quotation.
     *
     * @param int $lpo_quotation_id lpo quotation id to delete (required)
     *
     * @return Http response
     */
    public function deleteLpoQuotation($lpo_quotation_id)
    {
        $deleted_lpo_quotation = LpoQuotation::destroy($lpo_quotation_id);
        if($deleted_lpo_quotation){
            return response()->json(['msg'=>"lpo quotation deleted"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"Somethnig went wrong"], 500,array(),JSON_PRETTY_PRINT);
        }
    }




















    /**
     * Operation getLpoQuotationById
     *
     * Find lpo quotation by ID.
     *
     * @param int $lpo_quotation_id ID of lpo quotation to return object (required)
     *
     * @return Http response
     */
    public function getLpoQuotationById($lpo_quotation_id)
    {
       try{
        $response = LpoQuotation::with('supplier','uploaded_by')->where('id', $lpo_quotation_id)->firstOrFail();
        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }
    catch(Exception $e){
        $response =  ["error"=>"Something went wrong"];
        return response()->json($response, 500,array(),JSON_PRETTY_PRINT);
    }
}












    /**
     * Operation getLpoQuotationDocumentById
     *
     * Find lpo quotation document by ID.
     *
     * @param int $lpo_quotation_id ID of lpo quotation to return object (required)
     *
     * @return Http response
     */
    public function getLpoQuotationDocumentById($lpo_quotation_id)
    {   
        try{
            $quotation      = LpoQuotation::findOrFail($lpo_quotation_id);
            $path           = '/lpos/'.$quotation->lpo_id.'/quotations/'.$quotation->id.'/'.$quotation->quotation_doc;
            $path_info      = pathinfo($path);
            $basename       = $path_info['basename'];
            $file_contents  = FTP::connection()->readFile($path);
            $response       = Response::make($file_contents, 200);
            $response->header('Content-Type', $this->get_mime_type($basename));
            return $response;  
        }
        catch (Exception $e ){
            $response       = Response::make("", 200);
            $response->header('Content-Type', 'application/pdf');
            return $response;  
        }
    }

















    
    /**
     * Operation lpoQuotationsGet
     *
     * lpo quotations List.
     *
     *
     * @return Http response
     */
    public function lpoQuotationsGet()
    {
        $input = Request::all();
        $response = LpoQuotation::with('supplier','uploaded_by');

        if(array_key_exists('lpo_id', $input)){
            $response->where('lpo_id', $input['lpo_id']);
        }
        $response = $response->get();

        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }
}
