<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kenlebu@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\Models\LookupModels\Holiday;
use App\Models\LeaveManagementModels\LeaveType;

class LeaveManagementApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }
   

    /**
     * Operation getHolidays
     * holidays List.
     * @return Http response
     */
    public function holidaysGet()
    {
        try{
            $input = Request::all();
            $holidays = Holiday::query();

            $response;
            $response_dt;

            $total_records          = $holidays->count();
            $records_filtered       = 0;

            //searching
            if(array_key_exists('searchval', $input)){
                $rooms = $rooms->where(function ($query) use ($input) {                    
                    $query->orWhere('name','like', '\'%' . $input['searchval']. '%\'');
                    $query->orWhere('date','like', '\'%' . $input['searchval']. '%\'');
                });

                $dt = $holidays->get();

                $records_filtered = $holidays->count();
            }

            //ordering
            if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
                $order_direction     = "asc";
                $order_column_name   = $input['order_by'];
                if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                    $order_direction = $input['order_dir'];
                }

                $holidays = $holidays->orderBy($order_column_name, $order_direction);
            }

            //limit
            if(array_key_exists('limit', $input)){
                $holidays = $holidays->limit($input['limit']);
            }

            if(array_key_exists('datatables', $input)){
  
                $records_filtered = $holidays->count();    
    
                //ordering
                $order_column_id    = (int) $input['order'][0]['column'];
                $order_column_name  = $input['columns'][$order_column_id]['order_by'];
                $order_direction    = $input['order'][0]['dir'];
    
                if($order_column_name!=''){    
                    $holidays = $holidays->orderBy($order_column_name, $order_direction);    
                }    
    
                //limit $ offset
                if((int)$input['start']!= 0 ){    
                    $response_dt =  $holidays->limit($input['length'])->offset($input['start']);
                }else{
                    $holidays = $holidays->limit($input['length']);
                }
    
                $response_dt = $holidays->get();

                $response = Holiday::arr_to_dt_response( 
                    $response_dt, $input['draw'],
                    $total_records,
                    $records_filtered
                    );
            }
            else{    
                $response = $holidays->get();
            }

            return response()->json($response, 200);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation addHoliday
     * Add a new holiday.
     * @return Http response
     */
    public function addHoliday()
    {
        $input = Request::all();

        $holiday = new Holiday;
        $holiday->name = $input['name'];
        $holiday->date = $input['date'];

        if($holiday->save()){
            return response()->json($holiday, 200,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation updateHoliday
     * Update an existing holiday.
     * @return Http response
     */
    public function updateHoliday()
    {
        $input = Request::all();
        try{
            $holiday = Holiday::findOrFail($input['id']);
            $holiday->name = $input['name'];
            $holiday->date = $input['date'];

            if($holiday->save()){
                return Response()->json(array('msg' => 'Holiday updated','holiday' => $holiday), 200);
            }
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation deleteHoliday
     * Deletes a holiday.
     * @param int $holiday_id holiday id to delete (required)
     * @return Http response
     */
    public function deleteHoliday($holiday_id)
    {
        $deleted = Holiday::destroy($holiday_id);

        if($deleted){
            return response()->json(['msg'=>"Holiday removed"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"Holiday not found"], 404,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation getHolidayById
     * Find holiday by ID.
     * @param int $holiday_id ID of holiday to return object (required)
     * @return Http response
     */
    public function getHolidayById($holiday_id)
    {
        try{
            $holiday = Holiday::find($holiday_id);
            return response()->json($holiday, 200,array(),JSON_PRETTY_PRINT);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
   

    // Leave Types //
    /**
     * Operation getLeaveTypes
     * holidays List.
     * @return Http response
     */
    public function leaveTypesGet()
    {
        try{
            $input = Request::all();
            $leave_types = LeaveType::query();

            $response;
            $response_dt;

            $total_records          = $leave_types->count();
            $records_filtered       = 0;

            //searching
            if(array_key_exists('searchval', $input)){
                $leave_types = $leave_types->where(function ($query) use ($input) {                    
                    $query->orWhere('name','like', '\'%' . $input['searchval']. '%\'');
                    $query->orWhere('days_entitled','like', '\'%' . $input['searchval']. '%\'');
                });

                $dt = $leave_types->get();

                $records_filtered = $leave_types->count();
            }

            //ordering
            if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
                $order_direction     = "asc";
                $order_column_name   = $input['order_by'];
                if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                    $order_direction = $input['order_dir'];
                }

                $leave_types = $leave_types->orderBy($order_column_name, $order_direction);
            }

            //limit
            if(array_key_exists('limit', $input)){
                $leave_types = $leave_types->limit($input['limit']);
            }

            if(array_key_exists('datatables', $input)){
  
                $records_filtered = $leave_types->count();    
    
                //ordering
                $order_column_id    = (int) $input['order'][0]['column'];
                $order_column_name  = $input['columns'][$order_column_id]['order_by'];
                $order_direction    = $input['order'][0]['dir'];
    
                if($order_column_name!=''){    
                    $leave_types = $leave_types->orderBy($order_column_name, $order_direction);    
                }    
    
                //limit $ offset
                if((int)$input['start']!= 0 ){    
                    $response_dt =  $leave_types->limit($input['length'])->offset($input['start']);
                }else{
                    $leave_types = $leave_types->limit($input['length']);
                }
    
                $response_dt = $leave_types->get();

                $response = LeaveType::arr_to_dt_response( 
                    $response_dt, $input['draw'],
                    $total_records,
                    $records_filtered
                    );
            }
            else{    
                $response = $leave_types->get();
            }

            return response()->json($response, 200);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation addHoliday
     * Add a new holiday.
     * @return Http response
     */
    public function addLeaveType()
    {
        $input = Request::all();

        $leave_type = new LeaveType;
        $leave_type->name = $input['name'];
        $leave_type->days_entitled = $input['days_entitled'];
        $leave_type->include_weekends = $input['include_weekends'];

        if($leave_type->save()){
            return response()->json($leave_type, 200,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation updateHoliday
     * Update an existing holiday.
     * @return Http response
     */
    public function updateLeaveType()
    {
        $input = Request::all();
        try{
            $leave_type = LeaveType::findOrFail($input['id']);
            $leave_type->name = $input['name'];
            $leave_type->days_entitled = $input['days_entitled'];
            $leave_type->include_weekends = $input['include_weekends'];

            if($leave_type->save()){
                return Response()->json(array('msg' => 'Leave type updated','leave_type' => $leave_type), 200);
            }
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation deleteHoliday
     * Deletes a holiday.
     * @param int $holiday_id holiday id to delete (required)
     * @return Http response
     */
    public function deleteLeaveType($leave_type_id)
    {
        $deleted = LeaveType::destroy($leave_type_id);

        if($deleted){
            return response()->json(['msg'=>"Leave type removed"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"Leave type not found"], 404,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation getHolidayById
     * Find holiday by ID.
     * @param int $holiday_id ID of holiday to return object (required)
     * @return Http response
     */
    public function getLeaveTypeById($leave_type_id)
    {
        try{
            $leave_type = LeaveType::find($leave_type_id);
            return response()->json($leave_type, 200,array(),JSON_PRETTY_PRINT);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
}
