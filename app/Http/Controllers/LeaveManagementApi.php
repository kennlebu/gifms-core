<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kenlebu@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\Models\LookupModels\Holiday;
use App\Models\LeaveManagementModels\LeaveType;
use App\Models\LeaveManagementModels\LeaveRequest;
use App\Models\LeaveManagementModels\LeaveStatus;
use App\Models\ApprovalsModels\Approval;
use PDF;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\DB;
use App\Mail\NotifyLeaveRequest;

class LeaveManagementApi extends Controller
{
    private $default_status = '';
    /**
     * Constructor
     */
    public function __construct()
    {
        $status = LeaveStatus::where('default_status','1')->first();
        $this->default_status = $status->id;
    }
   

    /**
     * Operation getHolidays
     * holidays List.
     * @return Http response
     */
    public function holidaysGet()
    {
        try{
            $input = Request::all();
            $holidays = Holiday::query();

            $response;
            $response_dt;

            $total_records          = $holidays->count();
            $records_filtered       = 0;

            //searching
            if(array_key_exists('searchval', $input)){
                $rooms = $rooms->where(function ($query) use ($input) {                    
                    $query->orWhere('name','like', '\'%' . $input['searchval']. '%\'');
                    $query->orWhere('date','like', '\'%' . $input['searchval']. '%\'');
                });

                $dt = $holidays->get();

                $records_filtered = $holidays->count();
            }

            //ordering
            if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
                $order_direction     = "asc";
                $order_column_name   = $input['order_by'];
                if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                    $order_direction = $input['order_dir'];
                }

                $holidays = $holidays->orderBy($order_column_name, $order_direction);
            }

            //limit
            if(array_key_exists('limit', $input)){
                $holidays = $holidays->limit($input['limit']);
            }

            if(array_key_exists('datatables', $input)){
  
                $records_filtered = $holidays->count();    
    
                //ordering
                $order_column_id    = (int) $input['order'][0]['column'];
                $order_column_name  = $input['columns'][$order_column_id]['order_by'];
                $order_direction    = $input['order'][0]['dir'];
    
                if($order_column_name!=''){    
                    $holidays = $holidays->orderBy($order_column_name, $order_direction);    
                }    
    
                //limit $ offset
                if((int)$input['start']!= 0 ){    
                    $response_dt =  $holidays->limit($input['length'])->offset($input['start']);
                }else{
                    $holidays = $holidays->limit($input['length']);
                }
    
                $response_dt = $holidays->get();

                $response = Holiday::arr_to_dt_response( 
                    $response_dt, $input['draw'],
                    $total_records,
                    $records_filtered
                    );
            }
            else{    
                $response = $holidays->get();
            }

            return response()->json($response, 200);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation addHoliday
     * Add a new holiday.
     * @return Http response
     */
    public function addHoliday()
    {
        $input = Request::all();

        $holiday = new Holiday;
        $holiday->name = $input['name'];
        $holiday->date = $input['date'];

        if($holiday->save()){
            return response()->json($holiday, 200,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation updateHoliday
     * Update an existing holiday.
     * @return Http response
     */
    public function updateHoliday()
    {
        $input = Request::all();
        try{
            $holiday = Holiday::findOrFail($input['id']);
            $holiday->name = $input['name'];
            $holiday->date = $input['date'];

            if($holiday->save()){
                return Response()->json(array('msg' => 'Holiday updated','holiday' => $holiday), 200);
            }
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation deleteHoliday
     * Deletes a holiday.
     * @param int $holiday_id holiday id to delete (required)
     * @return Http response
     */
    public function deleteHoliday($holiday_id)
    {
        $deleted = Holiday::destroy($holiday_id);

        if($deleted){
            return response()->json(['msg'=>"Holiday removed"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"Holiday not found"], 404,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation getHolidayById
     * Find holiday by ID.
     * @param int $holiday_id ID of holiday to return object (required)
     * @return Http response
     */
    public function getHolidayById($holiday_id)
    {
        try{
            $holiday = Holiday::find($holiday_id);
            return response()->json($holiday, 200,array(),JSON_PRETTY_PRINT);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
   

    // Leave Types //
    /**
     * Operation getLeaveTypes
     * holidays List.
     * @return Http response
     */
    public function leaveTypesGet()
    {
        try{
            $input = Request::all();
            $leave_types = LeaveType::query();

            $response;
            $response_dt;

            $total_records          = $leave_types->count();
            $records_filtered       = 0;

            //searching
            if(array_key_exists('searchval', $input)){
                $leave_types = $leave_types->where(function ($query) use ($input) {                    
                    $query->orWhere('name','like', '\'%' . $input['searchval']. '%\'');
                    $query->orWhere('days_entitled','like', '\'%' . $input['searchval']. '%\'');
                });

                $dt = $leave_types->get();

                $records_filtered = $leave_types->count();
            }

            // Gender
            if(array_key_exists('for_gender', $input)){
                $leave_types = $leave_types->where(function ($query) use ($input) {                    
                    $query->orWhere('gender', $this->current_user()->gender);
                    $query->orWhere('gender', 'a');
                    $query->orWhereNull('gender');
                });
            }

            //ordering
            if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
                $order_direction     = "asc";
                $order_column_name   = $input['order_by'];
                if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                    $order_direction = $input['order_dir'];
                }

                $leave_types = $leave_types->orderBy($order_column_name, $order_direction);
            }

            //limit
            if(array_key_exists('limit', $input)){
                $leave_types = $leave_types->limit($input['limit']);
            }

            if(array_key_exists('datatables', $input)){
  
                $records_filtered = $leave_types->count();    
    
                //ordering
                $order_column_id    = (int) $input['order'][0]['column'];
                $order_column_name  = $input['columns'][$order_column_id]['order_by'];
                $order_direction    = $input['order'][0]['dir'];
    
                if($order_column_name!=''){    
                    $leave_types = $leave_types->orderBy($order_column_name, $order_direction);    
                }    
    
                //limit $ offset
                if((int)$input['start']!= 0 ){    
                    $response_dt =  $leave_types->limit($input['length'])->offset($input['start']);
                }else{
                    $leave_types = $leave_types->limit($input['length']);
                }
    
                $response_dt = $leave_types->get();

                $response = LeaveType::arr_to_dt_response( 
                    $response_dt, $input['draw'],
                    $total_records,
                    $records_filtered
                    );
            }
            else{    
                $response = $leave_types->get();
            }

            return response()->json($response, 200);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation addHoliday
     * Add a new holiday.
     * @return Http response
     */
    public function addLeaveType()
    {
        $input = Request::all(); 

        $leave_type = new LeaveType;
        $leave_type->name = $input['name'];
        $leave_type->days_entitled = $input['days_entitled'];
        if(!empty($input['include_weekends'])) $leave_type->include_weekends = $input['include_weekends'];
        if(!empty($input['requires_document'])) $leave_type->requires_document = $input['requires_document'];
        if(!empty($input['gender'])) $leave_type->gender = $input['gender'];

        if($leave_type->save()){
            return response()->json($leave_type, 200,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation updateHoliday
     * Update an existing holiday.
     * @return Http response
     */
    public function updateLeaveType()
    {
        $input = Request::all();
        try{
            $leave_type = LeaveType::findOrFail($input['id']);
            $leave_type->name = $input['name'];
            $leave_type->days_entitled = $input['days_entitled'];
            $leave_type->include_weekends = $input['include_weekends'];
            if(!empty($input['requires_document'])) $leave_type->requires_document = $input['requires_document'];
            if(!empty($input['gender'])) $leave_type->gender = $input['gender'];

            if($leave_type->save()){
                return Response()->json(array('msg' => 'Leave type updated','leave_type' => $leave_type), 200);
            }
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation deleteHoliday
     * Deletes a holiday.
     * @param int $holiday_id holiday id to delete (required)
     * @return Http response
     */
    public function deleteLeaveType($leave_type_id)
    {
        $deleted = LeaveType::destroy($leave_type_id);

        if($deleted){
            return response()->json(['msg'=>"Leave type removed"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"Leave type not found"], 404,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation getHolidayById
     * Find holiday by ID.
     * @param int $holiday_id ID of holiday to return object (required)
     * @return Http response
     */
    public function getLeaveTypeById($leave_type_id)
    {
        try{
            $leave_type = LeaveType::find($leave_type_id);
            return response()->json($leave_type, 200,array(),JSON_PRETTY_PRINT);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    // End Leave Types
    // ------------------------------------------------------------------------------------ //
   

    // ------------------------------------------------------------------------------------ //
    // Leave Requests //
    /**
     * Operation getLeaveRequests
     * leave requests List.
     * @return Http response
     */
    public function leaveRequestsGet()
    {
        try{
            $input = Request::all();
            $leave_requests = LeaveRequest::with('requested_by','leave_type','status','line_manager','rejected_by');

            $response;
            $response_dt;

            $total_records          = $leave_requests->count();
            $records_filtered       = 0;

            //if status is set
            if(array_key_exists('status', $input)){

                $status_ = (int) $input['status'];

                if($status_ >-1){
                    $leave_requests = $leave_requests->where('status_id', $input['status']);
                    $leave_requests = $leave_requests->where('requested_by_id',$this->current_user()->id);
                }elseif ($status_==-1) {
                    $leave_requests = $leave_requests->where('requested_by_id',$this->current_user()->id);
                }elseif ($status_==-2) {
                    
                }elseif ($status_==-3) {
                    $leave_requests = $leave_requests->where('line_manager_id',$this->current_user()->id);
                }
            }

            // My Assigned
            if(array_key_exists('my_assigned', $input)){
                // if(!($this->current_user()->hasRole([
                //     'admin',
                //     'director',
                //     'associate-director']
                // ))){
                //     // $leave_requests = $leave_requests->where('status_id', 3);
                //     $leave_requests = $leave_requests->where('requested_by_id',$this->current_user()->id);
                //  }
                 if($this->current_user()->hasRole('program-manager')){
                    $leave_requests = $leave_requests->where('line_manager_id',$this->current_user()->id);
                    // $leave_requests = $leave_requests->where('status_id',3);
                 }
                 else {
                    $leave_requests = $leave_requests->where('requested_by_id',$this->current_user()->id);
                 }
            }

            // My Approvables
            if(array_key_exists('my_approvables', $input)){
                $current_user = $this->current_user();
                if($current_user->hasRole(['director','program-manager'])){
                    $leave_requests = $leave_requests->where('status_id',2)
                                        ->where('line_manager_id',$current_user->id);
                }else{
                    $leave_requests = $leave_requests->where('id',0);
                }
            }

            // Approved only
            if(array_key_exists('approved', $input)){
                $leave_requests = $leave_requests->where('status_id', 3);   // Approved
            }

            //searching
            if(array_key_exists('searchval', $input)){
                $leave_requests = $leave_requests->where(function ($query) use ($input) {                    
                    $query->orWhere('start_date','like', '\'%' . $input['searchval']. '%\'');
                    $query->orWhere('end_date','like', '\'%' . $input['searchval']. '%\'');
                });

                $dt = $leave_requests->get();

                $records_filtered = $leave_requests->count();
            }

            //ordering
            if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
                $order_direction     = "asc";
                $order_column_name   = $input['order_by'];
                if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                    $order_direction = $input['order_dir'];
                }

                $leave_requests = $leave_requests->orderBy($order_column_name, $order_direction);
            }

            //limit
            if(array_key_exists('limit', $input)){
                $leave_requests = $leave_requests->limit($input['limit']);
            }

            if(array_key_exists('datatables', $input)){
  
                $records_filtered = $leave_requests->count();    
    
                //ordering
                $order_column_id    = (int) $input['order'][0]['column'];
                $order_column_name  = $input['columns'][$order_column_id]['order_by'];
                $order_direction    = $input['order'][0]['dir'];
    
                if($order_column_name!=''){    
                    $leave_requests = $leave_requests->orderBy($order_column_name, $order_direction);    
                }    
    
                //limit $ offset
                if((int)$input['start']!= 0 ){    
                    $response_dt =  $leave_requests->limit($input['length'])->offset($input['start']);
                }else{
                    $leave_requests = $leave_requests->limit($input['length']);
                }
    
                $response_dt = $leave_requests->get();

                $response = LeaveType::arr_to_dt_response( 
                    $response_dt, $input['draw'],
                    $total_records,
                    $records_filtered
                    );
            }
            elseif(array_key_exists('fullcalendar', $input)){
                $final_requests = [];
                $holidays = [];
                $holiday_list = Holiday::all();
                foreach($holiday_list as $h){
                    array_push($holidays, $h->full_date);
                }
                $requests_ = $leave_requests->get();
                // foreach($requests_ as $req){
                //     if(!empty($req->leave_type->include_weekends && $req->leave_type->include_weekends==1)){
                //         array_push($final_requests, $req);
                //     }
                //     else{
                //         $begin = new \DateTime($req->start_date);
                //         $end   = new \DateTime($req->end_date);
                //         $temp_start = $begin->format("Y-m-d");
                //         $temp_end = $begin->format("Y-m-d");
                //         $current_date = $temp_start;

                //         for($i = $begin; $i <= $end; $i->modify('+1 day')){
                //             $current_date = $i->format("Y-m-d");
                //             if(in_array($current_date, $holidays)){
                //                 $temp_end = ((new \DateTime($current_date))->modify('-1 day'))->format("Y-m-d");
                //                 $req->start_date = $temp_start;         // If current day is a holiday, create a new
                //                 $req->end_date = $temp_end;             // event with the temp start and end dates
                //                 array_push($final_requests, $req);      // then add this 'sub-event' to the list of events
                //                 $temp_start = ((new \DateTime($current_date))->modify('+1 day'))->format("Y-m-d"); 
                //                 continue;
                //             }
                //             elseif($this->isSaturday($current_date)){
                //                 $temp_end = ((new \DateTime($current_date))->modify('-1 day'))->format("Y-m-d");
                //                 $req->start_date = $temp_start;         // If current day is a saturday, create a new
                //                 $req->end_date = $temp_end;             // event with the temp start and end dates
                //                 array_push($final_requests, $req);      // then add this 'sub-event' to the list of events
                //                 continue;
                //             }
                //             elseif($this->isSunday($current_date)){
                //                 $temp_start = ((new \DateTime($current_date))->modify('+1 day'))->format("Y-m-d"); 
                //                 continue;
                //             }
                //             elseif($i == $end){
                //                 $temp_end = $current_date;
                //                 $req->start_date = $temp_start;
                //                 $req->end_date = $temp_end;
                //                 array_push($final_requests, $req);      // Add this 'sub-event' to the list of events
                //                 continue;
                //             }
                //         }
                // file_put_contents ( "C://Users//Kenn//Desktop//debug.txt" , PHP_EOL.json_encode($req->start_date.' to '.$req->end_date) , FILE_APPEND);
                //     }
                // }
                $response = $requests_;
            }
            else{    
                $response = $leave_requests->get();
            }

            return response()->json($response, 200);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation addLeaveRequest
     * Add a new leave request.
     * @return Http response
     */
    public function addLeaveRequest()
    {
        $input = Request::all();

        $last_request = LeaveRequest::whereYear('start_date', '=', date('Y'))
                                        ->where('status_id', 3)
                                        ->where('leave_type_id', $input['leave_type_id'])
                                        ->where('requested_by_id', $this->current_user()->id)
                                        ->orderBy('id', 'desc')
                                        ->first();

        if(!empty($last_request) && (($last_request->days_taken + (int)$input['no_of_days']) > $last_request->leave_type->days_entitled)){
            return response()->json(['error'=>'You cannot request more than '.($last_request->leave_type->days_entitled - $last_request->days_taken).' more days for this leave type'], 403);
        }

        $leave_request = new LeaveRequest;
        $leave_request->requested_by_id = $input['requested_by_id'];
        $leave_request->leave_type_id = $input['leave_type_id'];
        $leave_request->status_id = $this->default_status;
        $leave_request->line_manager_id = $input['line_manager_id'];
        $leave_request->start_date = date('Y-m-d', strtotime($input['start_date']));
        $leave_request->end_date = date('Y-m-d', strtotime($input['end_date']));
        $leave_request->no_of_days = $input['no_of_days'];
        $leave_request->alternate_phone_1 = $input['alternate_phone_1'];
        if(!empty($input['alternate_phone_2'])) 
        $leave_request->alternate_phone_2 = $input['alternate_phone_2'];
        $leave_request->alternate_email_1 = $input['alternate_email_1'];
        if(!empty($input['alternate_email_2']))
        $leave_request->alternate_email_2 = $input['alternate_email_2'];
        if(!empty($input['rejected_by_id']))
        $leave_request->rejected_by_id = $input['rejected_by_id'];
        if(!empty($input['rejection_reason']))
        $leave_request->rejection_reason = $input['rejection_reason'];
        if(!empty($input['requester_comments']))
        $leave_request->requester_comments = $input['requester_comments'];
        if(!empty($input['approver_comments']))
        $leave_request->approver_comments = $input['approver_comments'];

        if($leave_request->save()){
            return response()->json($leave_request, 200,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation updateLeaveRequest
     * Update an existing leave request.
     * @return Http response
     */
    public function updateLeaveRequest()
    {
        $input = Request::all();
        try{
            $leave_request = LeaveRequest::findOrFail($input['id']);
            if(!empty($input['requested_by_id']))
            $leave_request->requested_by_id = $input['requested_by_id'];
            if(!empty($input['leave_type_id']))
            $leave_request->leave_type_id = $input['leave_type_id'];
            if(!empty($input['line_manager_id']))
            $leave_request->line_manager_id = $input['line_manager_id'];
            if(!empty($input['start_date']))
            $leave_request->start_date = date('Y-m-d', strtotime($input['start_date']));
            if(!empty($input['end_date']))
            $leave_request->end_date = date('Y-m-d', strtotime($input['end_date']));
            if(!empty($input['no_of_days']))
            $leave_request->no_of_days = $input['no_of_days'];
            if(!empty($input['alternate_phone_1']))
            $leave_request->alternate_phone_1 = $input['alternate_phone_1'];
            if(!empty($input['alternate_phone_2'])) 
            $leave_request->alternate_phone_2 = $input['alternate_phone_2'];
            if(!empty($input['alternate_email_1']))
            $leave_request->alternate_email_1 = $input['alternate_email_1'];
            if(!empty($input['alternate_email_2']))
            $leave_request->alternate_email_2 = $input['alternate_email_2'];
            if(!empty($input['rejected_by_id']))
            $leave_request->rejected_by_id = $input['rejected_by_id'];
            if(!empty($input['rejection_reason']))
            $leave_request->rejection_reason = $input['rejection_reason'];
            if(!empty($input['requester_comments']))
            $leave_request->requester_comments = $input['requester_comments'];
            if(!empty($input['approver_comments']))
            $leave_request->approver_comments = $input['approver_comments'];

            if($leave_request->status_id == 3){         // If the leave was already approved
                $leave_request->status_id = 2;          // previously, send it back for manager
                                                        // approval.
                $leave_request->disableLogging();
                activity()
                   ->performedOn($leave_request)        // Log the edit and resubmission.
                   ->causedBy($this->current_user())
                   ->log('edited and resubmitted');        
            }

            if($leave_request->save()){
                return Response()->json(array('msg' => 'Leave request updated','leave_request' => $leave_request), 200);
            }
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation deleteLeaveRequest
     * Deletes a leave request.
     * @param int $request_id leave request id to delete (required)
     * @return Http response
     */
    public function deleteLeaveRequest($request_id)
    {
        $deleted = LeaveRequest::destroy($request_id);

        if($deleted){
            return response()->json(['msg'=>"Leave request removed"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"Leave request not found"], 404,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation getLeaveRequestById
     * Find leave request by ID.
     * @param int $request_id ID of leave request to return object (required)
     * @return Http response
     */
    public function getLeaveRequestById($request_id)
    {
        try{
            $leave_request = LeaveRequest::with('requested_by','leave_type','status','line_manager','rejected_by','logs.causer','approvals.approver')
                                ->find($request_id);
            return response()->json($leave_request, 200,array(),JSON_PRETTY_PRINT);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation getDocumentById
     * Find leave request document by ID.
     * @param int $request_id ID of leave request to return object (required)
     * @return Http response
     */
    public function getDocumentById($request_id)
    {
        try{
            $leave_request = LeaveRequest::with('requested_by','leave_type','status','line_manager','rejected_by','approvals')
                                ->findOrFail($request_id);
            $unique_approvals = $this->unique_multidim_array($leave_request->approvals, 'approver_id');
            $leave_request_types = LeaveType::all();
            $data = array(
                'leave_request' => $leave_request,
                'unique_approvals' => $unique_approvals,
                'leave_request_types' => $leave_request_types
                );

            $pdf = PDF::loadView('pdf/leave_request', $data);
            $file_contents  = $pdf->stream();
            $response = Response::make($file_contents, 200);
            $response->header('Content-Type', 'application/pdf');

            return $response;
        }catch (Exception $e ){            

            $response       = Response::make("", 200);
            $response->header('Content-Type', 'application/pdf');
            return $response;  
        }
    }

    /**
     * Operation getLeaveSummary
     * Get summary of user's leave for the calendar year.
     * @return Http response
     */
    public function getLeaveSummary()
    {
        try{
            $response = [];

            // Add requests to the response
            $requests = LeaveRequest::with('leave_type','status')->where('requested_by_id', $this->current_user()->id)
                        ->whereYear('start_date','=',date('Y'))
                        ->get();
            $response['requests'] = $requests;

            $leave_types = LeaveType::all();
            foreach($leave_types as $type){
                $types_response = [];
                if(empty($type->gender) || $type->gender == $this->current_user()->gender){
                    // Get and add the total days taken and days left to the response
                    $leave = LeaveRequest::where('requested_by_id', $this->current_user()->id)
                                                ->whereYear('start_date','=',date('Y'))
                                                ->where('status_id', 3) // Count only approved
                                                ->where('leave_type_id', $type->id);
                    $days_taken = $leave->sum('no_of_days');
                    $leave = $leave->first();

                    $days_left = (int) $type->days_entitled - (int) $days_taken;
                    if(!empty($leave)){
                        $days_left = (int) $leave->leave_type->days_entitled - (int) $days_taken;
                    }
                    $types_response['days_taken'] = $days_taken;
                    $types_response['days_left'] = $days_left;
                    $types_response['leave_type'] = $type->name;
                    $types_response['days_entitled'] = $type->days_entitled;
                    
                    $response['leave_types'][] = $types_response;
                }
            }

            


            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
        }catch (Exception $e ){            
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500); 
        }
    }

    /**
     * Operation getWhosOut
     * Get list of whois on leave.
     * @return Http response
     */
    public function getWhosOut()
    {
        try{
            // $response = DB::select("SELECT * FROM leave_requests WHERE CAST(start_date AS DATE) <= DATE(NOW()) AND CAST(end_date AS DATE) >= DATE(NOW())");
            $response = LeaveRequest::with('requested_by','leave_type')
                                    ->whereRaw('CAST(start_date AS DATE) <= DATE(NOW())')
                                    ->whereRaw('CAST(end_date AS DATE) >= DATE(NOW())')
                                    ->where('status_id',3);

            if($this->current_user()->hasRole('admin-manager')){
                // Just pass
            }
            elseif($this->current_user()->hasRole('program-manager')){
                $response = $response->where('line_manager_id',$this->current_user()->id);
            }

            $response = $response->get();

            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
        }catch (Exception $e ){            
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500); 
        }
    }
    // End Leave Requests
    // ------------------------------------------------------------------------------------ //



    // ------------------------------------------------------------------------------------ //
    // Leave Request Approvals //
    /**
     * Operation approveLeaveRequest
     * Approve a leave request.
     * @param int $request_id leave request id to approve (required)
     * @return Http response
     */
    public function approveLeaveRequest($request_id, $several=null)
    {

        $input = Request::all();
        try{
            $leave_request   = LeaveRequest::findOrFail($request_id);
            $last_request = LeaveRequest::whereYear('start_date', '=', date('Y'))
                                        ->where('status_id', 3)
                                        ->where('leave_type_id', $leave_request->leave_type_id)
                                        ->where('requested_by_id', $leave_request->requested_by_id)
                                        ->orderBy('id', 'desc')
                                        ->first();

            if(!empty($last_request) && (($last_request->days_taken + (int)$leave_request->no_of_days) > $last_request->leave_type->days_entitled)){
                return response()->json(['error'=>'You cannot approve more than '.($last_request->leave_type->days_entitled - $last_request->days_taken).' more days for this leave type'], 403);
            }
           
            $approvable_status  = $leave_request->status;
            $leave_request->status_id = $leave_request->status->next_status_id;

            // Update the days left
            $days_left = (int) $leave_request->leave_type->days_entitled - (int) $leave_request->no_of_days;
            $leave_request->days_left = $days_left;

            $leave_request->disableLogging();
            if($leave_request->save()) {
                // Logging
                activity()
                   ->performedOn($leave_request)
                   ->causedBy($this->current_user())
                   ->log('approved');

                $approval = new Approval;

                $approval->approvable_id            =   (int) $leave_request->id;
                $approval->approvable_type          =   "leave_requests";
                $approval->approval_level_id        =   $approvable_status->approval_level_id;
                $approval->approver_id              =   (int) $this->current_user()->id;

                $approval->save();
                
                Mail::queue(new NotifyLeaveRequest($leave_request));

                if($several!=true)
                return Response()->json(array('msg' => 'Success: Leave Request approved','leave_request' => $leave_request), 200);
            }


        }catch(ApprovalException $ae){

            $response =  ["error"=>"You do not have the permissions to perform this action at this point"];
            return response()->json($response, 403,array(),JSON_PRETTY_PRINT);
        }catch(Exception $e){

            $response =  ["error"=>"leave_request could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }


    /**
     * Operation approveSeveralLeaveRequests
     * Approve several leave requests.
     * @return Http response
     */
    public function approveSeveralLeaveRequests()
    {
        try {
            $form = Request::only("leave_requests");
            $request_ids = $form['leave_requests'];

            foreach ($request_ids as $key => $request_id) {
                $this->approveLeaveRequest($request_id, true);
            }

            return response()->json(['leave_requests'=>$form['leave_requests']], 201,array(),JSON_PRETTY_PRINT);
            
        } catch (Exception $e) {
             return response()->json(['error'=>"An rerror occured during processing"], 500,array(),JSON_PRETTY_PRINT);
            
        }
    }


    /**
     * Operation rejectLeaveRequest
     * Reject a leave request.
     * @param int $request_id leave request id to reject (required)
     * @return Http response
     */
    public function rejectLeaveRequest($request_id)
    {

        $form = Request::only(
            'rejection_reason'
            );

        try{
            $leave_request   = LeaveRequest::findOrFail($request_id);
           
            $leave_request->status_id = 4;    // Rejected status
            $leave_request->rejected_by_id = (int) $this->current_user()->id;
            $leave_request->rejected_at = date('Y-m-d H:i:s');
            $leave_request->rejection_reason = $form['rejection_reason'];

            $leave_request->disableLogging();
            if($leave_request->save()) {
                // Logging
                activity()
                   ->performedOn($leave_request)
                   ->causedBy($this->current_user())
                   ->log('rejected');

                // Mail::queue(new NotifyLeaveRequest($activity));

                return Response()->json(array('msg' => 'Success: leave_request approved','leave_request' => $leave_request), 200);
            }

        }catch(ApprovalException $ae){

            $response =  ["error"=>"You do not have the permissions to perform this action at this point"];
            return response()->json($response, 403,array(),JSON_PRETTY_PRINT);
        }catch(Exception $e){

            $response =  ["error"=>"Leave Request could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }


    /**
     * Submit activity for approval
     */
    public function submitLeaveRequestForApproval($request_id)
    {
        try{
            $leave_request = LeaveRequest::findOrFail($request_id);
            $last_request = LeaveRequest::whereYear('start_date', '=', date('Y'))
                                        ->where('status_id', 3)
                                        ->where('leave_type_id', $leave_request->leave_type_id)
                                        ->where('requested_by_id', $this->current_user()->id)
                                        ->orderBy('id', 'desc')
                                        ->first();

            if(!empty($last_request) && (($last_request->days_taken + (int)$leave_request->no_of_days) > $last_request->leave_type->days_entitled)){
                return response()->json(['error'=>'You cannot request more than '.($last_request->leave_type->days_entitled - $last_request->days_taken).' more days for this leave type'], 403);
            }
           
            $leave_request->status_id = $leave_request->status->next_status_id;
            
            $leave_request->disableLogging();
            if($leave_request->save()) {
                // Logging
                activity()
                   ->performedOn($leave_request)
                   ->causedBy($this->current_user())
                   ->log('submitted for approval');

                Mail::queue(new NotifyLeaveRequest($leave_request));

                return Response()->json(array('msg' => 'Success: Leave Request submitted','leave_request' => $leave_request), 200);
            }

        }catch(Exception $e){

            $response =  ["error"=>"Leave request could not be found", "msg"=>$e->getMessage()];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }
   

    // ------------------------------------------------------------------------------------ //
    // Leave Statuses //
    /**
     * Operation getLeaveStatuses
     * leave statuses List.
     * @return Http response
     */
    public function leaveStatusesGet()
    {
        try{
            $input = Request::all();
            $leave_statuses = LeaveStatus::query();

            $response;
            $response_dt;

            $total_records          = $leave_statuses->count();
            $records_filtered       = 0;

            if(array_key_exists('displayable_only',$input)){
                $leave_statuses = $leave_statuses->whereIn('id', [1,4]);
            }

            //searching
            if(array_key_exists('searchval', $input)){
                $leave_statuses = $leave_statuses->where(function ($query) use ($input) {                    
                    $query->orWhere('status','like', '\'%' . $input['searchval']. '%\'');
                    $query->orWhere('short_name','like', '\'%' . $input['searchval']. '%\'');
                });

                $dt = $leave_statuses->get();

                $records_filtered = $leave_statuses->count();
            }

            //ordering
            if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
                $order_direction     = "asc";
                $order_column_name   = $input['order_by'];
                if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                    $order_direction = $input['order_dir'];
                }

                $leave_statuses = $leave_statuses->orderBy($order_column_name, $order_direction);
            }

            //limit
            if(array_key_exists('limit', $input)){
                $leave_statuses = $leave_statuses->limit($input['limit']);
            }

            if(array_key_exists('datatables', $input)){
  
                $records_filtered = $leave_statuses->count();    
    
                //ordering
                $order_column_id    = (int) $input['order'][0]['column'];
                $order_column_name  = $input['columns'][$order_column_id]['order_by'];
                $order_direction    = $input['order'][0]['dir'];
    
                if($order_column_name!=''){    
                    $leave_statuses = $leave_statuses->orderBy($order_column_name, $order_direction);    
                }    
    
                //limit $ offset
                if((int)$input['start']!= 0 ){    
                    $response_dt =  $leave_statuses->limit($input['length'])->offset($input['start']);
                }else{
                    $leave_statuses = $leave_statuses->limit($input['length']);
                }
    
                $response_dt = $leave_statuses->get();

                $response = LeaveStatus::arr_to_dt_response( 
                    $response_dt, $input['draw'],
                    $total_records,
                    $records_filtered
                    );
            }
            else{    
                $response = $leave_statuses->get();
                foreach ($response as $key => $value) {
                    $response[$key]['count'] = LeaveRequest::where('requested_by_id', $this->current_user()->id)->where('status_id',$value['id'])->count();
                }

                //add -1 and -2 statuses
            if(array_key_exists('allowed_only', $input)){

                //-1
                $response[]=array(
                        "id"=> -1,
                        "status"=> "My Leave Requests",
                        "order_priority"=> 998,
                        "display_color"=> "#37A9E17A",
                        "count"=> LeaveRequest::where('requested_by_id',$this->current_user()->id)->count()
                      );

                // TODO: Line Manager
                if ($this->current_user()->hasRole('program-manager')){
                    $response[]=array(
                            "id"=> -3,
                            "status"=> "My Manager-Assigned Leave Requests",
                            "order_priority"=> 999,
                            "display_color"=> "#49149c7a",
                            "count"=> LeaveRequest::where('line_manager_id',$this->current_user()->id)->count()
                          );
                }

                if ($this->current_user()->hasRole(['accountant','admin','director','financial-controller','admin-manager'])){

                    //-1
                    $response[]=array(
                            "id"=> -2,
                            "status"=> "All Leave Requests",
                            "order_priority"=> 1000,
                            "display_color"=> "#092D50",
                            "count"=> LeaveRequest::count()
                          );
                }


            }

            }

            return response()->json($response, 200);
        }
        catch(\Exception $e){
            // file_put_contents ( "C://Users//Kenn//Desktop//debug.txt" , PHP_EOL.$e->getTraceAsString() , FILE_APPEND);
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation addLeaveStatus
     * Add a new leave status.
     * @return Http response
     */
    public function addLeaveStatus()
    {
        $input = Request::all();

        $leave_status = new LeaveStatus;
        $leave_status->status = $input['status'];
        $leave_status->next_status_id  = $input['next_status_id '];
        $leave_status->short_name = $input['short_name'];
        $leave_status->order_priority = $input['order_priority'];
        if(!empty($input['display_color'])) 
        $leave_status->display_color = $input['display_color'];
        if(!empty($input['default_status']))
        $leave_status->default_status = $input['default_status'];
        if(!empty($input['approval_level_id ']))
        $leave_status->approval_level_id  = $input['approval_level_id '];

        if($leave_status->save()){
            return response()->json($leave_status, 200,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation updateLeaveStatus
     * Update an existing leave status.
     * @return Http response
     */
    public function updateLeaveStatus()
    {
        $input = Request::all();
        try{
            $leave_status = LeaveStatus::findOrFail($input['id']);
            $leave_status->status = $input['status'];
            $leave_status->next_status_id  = $input['next_status_id '];
            $leave_status->short_name = $input['short_name'];
            $leave_status->order_priority = $input['order_priority'];
            if(!empty($input['display_color'])) 
            $leave_status->display_color = $input['display_color'];
            if(!empty($input['default_status']))
            $leave_status->default_status = $input['default_status'];
            if(!empty($input['approval_level_id ']))
            $leave_status->approval_level_id  = $input['approval_level_id '];

            if($leave_status->save()){
                return Response()->json(array('msg' => 'Leave status updated','leave_status' => $leave_status), 200);
            }
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    
    /**
     * Operation deleteLeaveStatus
     * Deletes a leave status.
     * @param int $request_id leave status id to delete (required)
     * @return Http response
     */
    public function deleteLeaveStatus($request_id)
    {
        $deleted = LeaveStatus::destroy($request_id);

        if($deleted){
            return response()->json(['msg'=>"Leave status removed"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"Leave status not found"], 404,array(),JSON_PRETTY_PRINT);
        }
    }
    
    /**
     * Operation getLeaveStatusById
     * Find leave status by ID.
     * @param int $request_id ID of leave status to return object (required)
     * @return Http response
     */
    public function getLeaveStatusById($request_id)
    {
        try{
            $leave_status = LeaveStatus::find($request_id);
            return response()->json($leave_status, 200,array(),JSON_PRETTY_PRINT);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
    // End Leave Statuses
    // ------------------------------------------------------------------------------------ //
}
