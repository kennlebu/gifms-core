<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use JWTAuth;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;
use App\Models\PaymentModels\PaymentBatch;
use App\Models\PaymentModels\PaymentStatus;
use App\Models\PaymentModels\Payment;
use App\Models\AdvancesModels\Advance;
use App\Models\ClaimsModels\Claim;
use App\Models\InvoicesModels\Invoice;
use App\Models\LPOModels\Lpo;
use App\Models\PaymentModels\VoucherNumber;
use Illuminate\Support\Facades\Mail;
use App\Mail\NotifyBatch;
use App\Models\MobilePaymentModels\MobilePayment;
use App\Mail\RequestBankSigning;

class PaymentBatchApi extends Controller
{

    private $default_payment_status = '';
    // private $approvable_statuses = [];
    /**
     * Constructor
     */
    public function __construct()
    {        
        $status = PaymentStatus::where('default_status','1')->first();
        // $this->approvable_statuses = PaymentBatch::where('approvable','1')->get();
        $this->default_payment_status = $status->id;
    }






















    

    /**
     * Operation addPaymentBatch
     *
     * Add a new payment_batch.
     *
     *
     * @return Http response
     */
    public function addPaymentBatch()
    {
       

        $form = Request::only(
            'payments'
            );

        try{

            $payment_batch = new PaymentBatch;


            $user = JWTAuth::parseToken()->authenticate();
            $payment_batch->processed_by_id              =   (int)   $user->id;
            $payment_batch->status_id             =   (int)  1;

            // die;

            if($payment_batch->save()) {

                $payment_batch->ref = "CHAI/PYTBT/#$payment_batch->id/".date_format($payment_batch->created_at,"Y/m/d");
                $payment_batch->save();


                foreach ($form['payments'] as $key => $value) {                   

                    $payment                    = Payment::find($value);
                    
                    $payment->status_id         = $payment->status->next_status_id;
                    $payment->payment_batch_id  = $payment_batch->id;

                    $payment->save();

                    $payment->ref = "CHAI/PYMT/#$payment->id/".date_format($payment->created_at,"Y/m/d");
                    // $voucher = $this->generate_voucher_no($payment->id, $payment->payable_type, $payment_batch->created_at);
                    // $payment->voucher_no = (int) $voucher['id'];
                    $v = DB::select('call generate_voucher_no(?,?)',array($payment->id, $payment->payable_type));
                    $v_result = $v[0];
                    $voucher_number = $v_result['voucher_number'];
                    $payment->save();

                    // Now update the invoices, claims and advances
                    if($payment->payable_type == 'invoices'){
                        $invoice                = Invoice::find($payment->payable_id);
                        $invoice->status_id     = $invoice->status->next_status_id;
                        $invoice->save();
                    }
                    elseif($payment->payable_type == 'advances'){
                        $advance                = Advance::find($payment->payable_id);
                        $advance->status_id     = $advance->status->next_status_id;
                        $advance->save();
                    }
                    elseif($payment->payable_type == 'claims'){
                        $claim                = Claim::find($payment->payable_id);
                        $claim->status_id     = $claim->status->next_status_id;
                        $claim->save();
                    }


                }

                Mail::queue(new NotifyBatch($payment_batch->id));

                return Response()->json(array('msg' => 'Success: Payment Batch added','payment_batch' => PaymentBatch::find((int)$payment_batch->id)), 200);
            }

        }catch (JWTException $e){

            return response()->json(['error'=>'something went wrong'], 500);

        }
    }



















    /**
     * Operation completePaymentBatchUpload
     *
     * Complete upload of a payment_batch.
     *
     *
     * @return Http response
     */
    public function completePaymentBatchUpload($payment_batch_id)
    {

        $input = Request::all();

        try{

            $payment_batch   = PaymentBatch::find($payment_batch_id);
           
            $payment_batch->status_id = (int) 2;
            $payment_batch->upload_date = date('Y-m-d H:i:s');
            $payment_batch->save();

            // Get the payments and move them to the next status            
            $qb = DB::table('payments')
               ->whereNull('deleted_at')
               ->where('payment_batch_id', '=', ''.$payment_batch_id)
               ->select('id')
               ->get();

            foreach ($qb as $record) {                   

                $payment                    = Payment::find($record['id']);
                $payment->status_id         = (int) 3;
                $payment->save();

                // Now update the invoices, claims and advances
                if($payment->payable_type == 'invoices'){
                    $invoice                = Invoice::find($payment->payable_id);
                    // $invoice->status_id     = $invoice->status->next_status_id;
                    $invoice->status_id     = 7;
                    $invoice->save();
                }
                elseif($payment->payable_type == 'advances'){
                    $advance                = Advance::find($payment->payable_id);
                    // $advance->status_id     = $advance->status->next_status_id;
                    $advance->status_id     = 7;
                    $advance->save();
                }
                elseif($payment->payable_type == 'claims'){
                    $claim                = Claim::find($payment->payable_id);
                    // $claim->status_id     = $claim->status->next_status_id;
                    $claim->status_id     = 7;
                    $claim->save();
                }
            }

            if($payment_batch->save()) {
                return Response()->json(array('msg' => 'Success: batch uploaded','payment_batch' => $payment_batch), 200);
            }


        }catch(Exception $e){

            $response =  ["error"=>"There was an error uploading the batch"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }




    /**
     * request Bank Signitorie
     * 
     * Send mail request bank signitories to approve payments
     * 
     * @return Http response
     */
    public function requestBankSignitories($payment_batch_id){
        try{
            Mail::queue(new RequestBankSigning($payment_batch_id));

        }catch(Exception $e){

            $response =  ["error"=>"There was an error uploading the batch"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }





















    /**
     * Operation getCSVData
     *
     * get data for generating CSV.
     *
     *
     * @return Http response
     */
    public function getCSVData(){
        $input = Request::all();
        $payment_batch_id = $input['payment_batch_id'];
        $payment_mode = $input['payment_mode']; 
        $currency = $input['currency'];

        try{
            // EFT
            if($payment_mode=='1'){
                $eft_result = [];
                
                $payments = Payment::with(['currency','paid_to_bank','paid_to_bank_branch'])
                            ->where('payment_mode_id',$payment_mode)
                            ->where('payment_batch_id',$payment_batch_id)
                            ->where('currency_id', $currency)->get();
                foreach ($payments as $payment) {      

                    $eft_data = array('date'=>'', 'bank_code'=>'', 'branch'=>'','account'=>'','amount'=>'','chaipv'=>'','acct_name'=>'');

                    $eft_data['amount'] = $payment->amount;
                    $eft_data['date'] = date('Ymd', strtotime($payment->created_at));

                    $voucher_no = '';
                    if(empty($payment->migration_id)){
                        $voucher_no = VoucherNumber::find($payment->voucher_no);
                        $voucher_no = $voucher_no->voucher_number;
                    }
                    else{
                        if($payment->payable_type=='mobile_payments'){
                            $payable = MobilePayment::find($payment->payable_id);
                            $voucher_no = 'CHAI'.$this->pad_zeros(5, $payable->migration_invoice_id);
                            }
                        else {
                            $voucher_no = 'CHAI'.$this->pad_zeros(5, $payment->payable_id);
                        }
                        
                    } 

                    $eft_data['bank_code'] = $this->pad_zeros(2,(string)$payment->paid_to_bank->bank_code);
                    $eft_data['branch'] = $this->pad_zeros(3,(string)$payment->paid_to_bank_branch->branch_code);
                    $eft_data['account'] = $payment->paid_to_bank_account_no;
                    $eft_data['chaipv'] = $voucher_no;
                    $eft_data['acct_name'] = $payment->paid_to_name;

                    array_push($eft_result, $eft_data);
                }
                
            return Response()->json(array('msg' => 'Success: csv generated','csv_data' => $eft_result), 200);
            }




            // RTGS
            elseif($payment_mode=='4'){
                $rtgs_result = [];
                
                $payments = Payment::with(['currency','paid_to_bank','paid_to_bank_branch'])
                            ->where('payment_mode_id',$payment_mode)
                            ->where('payment_batch_id',$payment_batch_id)
                            ->where('currency_id', $currency)->get();
                 
                foreach ($payments as $payment) {

                    $rtgs_data = array('date'=>'', 'bank_code'=>'','account'=>'','acct_name'=>'','amount'=>'','chaipv'=>'','channel'=>'BANK');
                    $rtgs_data['amount'] = $payment->amount;
                    $rtgs_data['date'] = date('Ymd', strtotime($payment->created_at));

                    $voucher_no = '';
                    if(empty($payment->migration_id)){
                        $voucher_no = VoucherNumber::find($payment->voucher_no);
                        $voucher_no = $voucher_no->voucher_number;
                    }
                    else{
                        if($payment->payable_type=='mobile_payments'){
                            $payable = MobilePayment::find($payment->payable_id);
                            $voucher_no = 'CHAI'.$this->pad_zeros(5, $payable->migration_invoice_id);
                            }
                        else {
                            $voucher_no = 'CHAI'.$this->pad_zeros(5, $payment->payable_id);
                        }
                        
                    }

                    $bank_code = 'n/a';
                    $branch_code = 'n/a';
                    if(empty($payment->paid_to_bank->bank_code)) $bank_code = 0;
                    else $bank_code = $payment->paid_to_bank->bank_code;
                    if(empty($payment->paid_to_bank_branch->branch_code)) $branch_code = 0;
                    else $branch_code = $payment->paid_to_bank_branch->branch_code;
                    $rtgs_data['bank_code'] = $this->pad_zeros(2,(string)$bank_code).$this->pad_zeros(3,(string)$branch_code);
                    // $rtgs_data['branch'] = $this->pad_zeros(3,$payment->paid_to_bank_branch->brach_code);
                    $rtgs_data['account'] = $payment->paid_to_bank_account_no;
                    $rtgs_data['chaipv'] = $voucher_no;
                    $rtgs_data['acct_name'] = $payment->paid_to_name;

                    array_push($rtgs_result, $rtgs_data);
                }
                
            return Response()->json(array('msg' => 'Success: csv generated','csv_data' => $rtgs_result), 200);
            }

            //MMTS
            elseif($payment_mode=='2'){
                $mmts_result = [];
                
                $payments = Payment::with(['currency','paid_to_bank','paid_to_bank_branch','payable'])
                            ->where('payment_mode_id',$payment_mode)
                            ->where('payment_batch_id',$payment_batch_id)
                            ->where('currency_id', $currency)->get();
                foreach ($payments as $payment) {       

                    $mmts_data = array('date'=>'', 'bank_code'=>'99001','phone'=>'','mobile_name'=>'','bank_name'=>'NIC','amount'=>'','chaipv'=>'');

                    $mmts_data['amount'] = $payment->amount;
                    $mmts_data['date'] = date('Ymd', strtotime($payment->created_at));

                    $voucher_no = '';
                    if(empty($payment->migration_id)){
                        $voucher_no = VoucherNumber::find($payment->voucher_no);
                        $voucher_no = $voucher_no->voucher_number;
                    }
                    else{
                        if($payment->payable_type=='mobile_payments'){
                            $payable = MobilePayment::find($payment->payable_id);
                            $voucher_no = 'CHAI'.$this->pad_zeros(5, $payable->migration_invoice_id);
                            }
                        else {
                            $voucher_no = 'CHAI'.$this->pad_zeros(5, $payment->payable_id);
                        }
                        
                    } 
                    // $mmts_data['phone'] = $payment->payable->mobile_payment_number;
                    // $mmts_data['mobile_name'] = $payment->payable->mobile_payment_name;
                    $mmts_data['chaipv'] = $voucher_no;

                    if($payment->payable_type == 'invoices'){      
                        $invoice = Invoice::with('supplier')->find($payment->payable_id);                  
                        $mmts_data['phone'] = $this->format_phone($invoice->supplier->mobile_payment_number);
                        $mmts_data['mobile_name'] = $invoice->supplier->mobile_payment_name;
                    }

                    elseif($payment->payable_type == 'advances'){
                        $advance = Advance::with('requested_by')->find($payment->payable_id);                
                        $mmts_data['phone'] = $this->format_phone($advance->requested_by->mpesa_no);
                        $mmts_data['mobile_name'] = $advance->requested_by->cheque_addressee;
                    }

                    elseif($payment->payable_type == 'claims'){
                        $claim = Claim::with('requested_by')->find($payment->payable_id);             
                        $mmts_data['phone'] = $this->format_phone($claim->requested_by->mpesa_no);
                        $mmts_data['mobile_name'] = $claim->requested_by->cheque_addressee;                        
                    }
                    array_push($mmts_result, $mmts_data);
                }
              
            return Response()->json(array('msg' => 'Success: csv generated','csv_data' => $mmts_result), 200);
            }

        }
        catch(Exception $e){
            $response =  ["error"=>"There was an error getting the CSV"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }























/**
     * Operation uploadBankFile
     *
     * upload the bank file
     *
     *
     * @return Http response
     */
    public function uploadBankFile(){
        
        try{
            $result = [];
            $voucher_nos = [];
            $payments = [];
            $csv_data = [];
            $missing_payments = [];
            $form = Request::only('file');
            $file = $form['file'];

            $handle = fopen($file, 'r');
            $header = true;
            while($csvLine = fgetcsv($handle, 1000, ',')){
                if ($header) {
                    $header = false;
                } else {
                    // $chai_ref = explode(" ", $csvLine[1])[0];
                    // array_push($voucher_nos, (int)preg_replace("/[^0-9,.]/", "", $chai_ref)); 

                    $csv_row = array();
                    $csv_row['bank_ref'] = $csvLine[0];
                    $csv_row['chai_ref'] = explode(" ", $csvLine[1])[0];
                    $csv_row['inputter'] = $csvLine[2];
                    $csv_row['approver'] = $csvLine[3];
                    $csv_row['amount'] = $csvLine[5];
                    $csv_row['bank_date'] = $csvLine[7];
                    $csv_row['time'] = $csvLine[8];
                    $csv_row['narrative'] = $csvLine[10];

                    array_push($csv_data, $csv_row);
                }
            }

            foreach($csv_data as $csv_data_row){
                $voucher_no = $csv_data_row['chai_ref'];
                $res = array();
                $res['csv_data'] = $csv_data_row;
                try{
                    $payment = "";
                    // file_put_contents ( "C://Users//Kenn//Desktop//debug.txt" , substr($voucher_no, 0, 2) , FILE_APPEND);

                    // New voucher nos.
                    if(substr($voucher_no, 0, 2) == 'KE'){
                        $voucher = VoucherNumber::where('voucher_number', $voucher_no)->firstOrFail();
                        if($voucher->payable_type != 'mobile_payments')
                        $payment = Payment::with('payment_mode')->findOrFail($voucher->payable_id);
                        elseif($voucher->payable_type == 'mobile_payments')
                        $payment = MobilePayment::findOrFail($voucher->payable_id);
                        $payable_type = $voucher->payable_type;
                        $res['payment'] = $payment;
                        $res['payable_type'] = $payable_type;
                        // array_push($result, $res);
                    }

                    // Old voucher nos.
                    elseif(substr($voucher_no, 0, 4) == 'CHAI'){
                        $invoice_id = (int)preg_replace("/[^0-9,.]/", "", $voucher_no);
                        $payment = Payment::where('payable_id', $invoice_id)->firstOrFail();
                        $res['payment'] = $payment;
                        $res['payable_type'] = $payment->payable_type;
                        // array_push($result, $res);
                    }
                } catch(\Exception $e){                    
                    file_put_contents ( "C://Users//Kenn//Desktop//debug.txt" , $e->getMessage() , FILE_APPEND);
                    $res['payable_type'] = 'missing';
                    // array_push($result, $res);
                }
                array_push($result, $res);
            }
            
            // Change the status of the payment to reconciled
            // foreach($payment_ids as $id){
            //     $payment = Payment::find($id);
            //     // $payment->status_id = $payment->status->next_status_id;
            //     if($payment->status_id==3){
            //         $payment->status_id = 4; // Hard-coded
            //         $payment->save();
            //     }           

            //     // Change invoice status
            //     if($payment->payable_type=='invoices'){
            //         $invoice = Invoice::find($payment->payable_id);
            //         // $invoice->status_id = $invoice->status->next_status_id;
            //         if($invoice->status_id==7){
            //             $invoice->status_id = 8;
            //             $invoice->save();
            //             array_push($payments, ['type'=>'Invoice', 'ref'=>'INV'.$invoice->id, 'paid'=>true]);

            //             // Change LPO to paid
            //             $lpo = Lpo::findOrFail($invoice->lpo_id);
            //             $lpo->invoice_paid = 'True';
            //             $lpo->status_id = 9;
            //             $lpo->save();
            //         }
            //         else{
            //             array_push($payments, ['type'=>'Invoice', 'ref'=>'INV'.$invoice->id, 'paid'=>false]);
            //         }
            //     }
            //     // Change advance status
            //     if($payment->payable_type=='advances'){
            //         $advance = Advance::find($payment->payable_id);
            //         // $advance->status_id = $advance->status->next_status_id;
            //         if($advance->status_id==7){
            //             $advance->status_id = 6;
            //             $advance->save();
            //             array_push($payments, ['type'=>'Advance', 'ref'=>'ADV'.$advance->id, 'paid'=>true]);
            //         }
            //         else{
            //             array_push($payments, ['type'=>'Advance', 'ref'=>'ADV'.$advance->id, 'paid'=>false]);
            //         }
            //     }
            //     // Change claim status
            //     if($payment->payable_type=='claims'){
            //         $claim = Claim::find($payment->payable_id);
            //         // $claim->status_id = $claim->status->next_status_id;
            //         if($claim->status_id==7){
            //             $claim->status_id = 8;
            //             $claim->save();
            //             array_push($payments, ['type'=>'Claim', 'ref'=>'CLM'.$claim->id, 'paid'=>true]);
            //         }
            //         else{
            //             array_push($payments, ['type'=>'Claim', 'ref'=>'CLM'.$claim->id, 'paid'=>false]);
            //         }
            //     }
            // }

            return Response()->json($result, 200);
        }
        catch(Exception $e){
            return response()->json(['error'=>'There was an error uploading the file'], 500);
        }
    }























    
    /**
     * Operation updatePaymentBatch
     *
     * Update an existing payment_batch.
     *
     *
     * @return Http response
     */
    public function updatePaymentBatch()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePaymentBatch');
        }
        $body = $input['body'];


        return response('How about implementing updatePaymentBatch as a PUT method ?');
    }






















    
    /**
     * Operation deletePaymentBatch
     *
     * Deletes an payment_batch.
     *
     * @param int $payment_batch_id payment_batch id to delete (required)
     *
     * @return Http response
     */
    public function deletePaymentBatch($payment_batch_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deletePaymentBatch as a DELETE method ?');
    }






















    
    /**
     * Operation getPaymentBatchById
     *
     * Find payment_batch by ID.
     *
     * @param int $payment_batch_id ID of payment_batch to return object (required)
     *
     * @return Http response
     */
    public function getPaymentBatchById($payment_batch_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPaymentBatchById as a GET method ?');
    }






















    
    /**
     * Operation getPaymentBatches
     *
     * payment_batches List.
     *
     *
     * @return Http response
     */
    public function getPaymentBatches()
    {


        $input = Request::all();
        //query builder
        $qb = DB::table('payment_batches');

        $qb->whereNull('deleted_at');

        $response;
        $response_dt;

        $total_records          = $qb->count();
        $records_filtered       = 0;



        // $qb->where('requested_by_id',$this->current_user()->id);



        //searching
        if(array_key_exists('searchval', $input)){
            $qb->where(function ($query) use ($input) {
                
                $query->orWhere('id','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('ref','like', '\'%' . $input['search']['value']. '%\'');
                // $query->orWhere('payable_type','like', '\'%' . $input['searchval']. '%\'');
                // $query->orWhere('paid_to_bank_account_no','like', '\'%' . $input['searchval']. '%\'');
                // $query->orWhere('paid_to_name','like', '\'%' . $input['searchval']. '%\'');
                // $query->orWhere('payment_desc','like', '\'%' . $input['searchval']. '%\'');

            });

            // $records_filtered       =  $qb->count(); //doesn't work

            $sql = PaymentBatch::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];
            // $records_filtered = 30;


        }




        if(array_key_exists('datatables', $input)){

            //searching
            $qb->where(function ($query) use ($input) {
                
                $query->orWhere('id','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('ref','like', '\'%' . $input['search']['value']. '%\'');
                // $query->orWhere('payable_type','like', '\'%' . $input['search']['value']. '%\'');
                // $query->orWhere('paid_to_bank_account_no','like', '\'%' . $input['search']['value']. '%\'');
                // $query->orWhere('paid_to_name','like', '\'%' . $input['search']['value']. '%\'');
                // $query->orWhere('payment_desc','like', '\'%' . $input['search']['value']. '%\'');

            });




            $sql = PaymentBatch::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];


            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];



            // if ($order_column_id == 0){
            //     $order_column_name = "created_at";
            // }
            // if ($order_column_id == 1){
            //     $order_column_name = "id";
            // }

            if($order_column_name!=''){

                $qb->orderBy($order_column_name, $order_direction);

            }






            //limit $ offset
            if((int)$input['start']!= 0 ){

                $response_dt    =   $qb->limit($input['length'])->offset($input['start']);

            }else{
                $qb->limit($input['length']);
            }





            $sql = PaymentBatch::bind_presql($qb->toSql(),$qb->getBindings());

            // $response_dt = DB::select($qb->toSql(),$qb->getBindings());         //pseudo
            $response_dt = DB::select($sql);


            $response_dt = json_decode(json_encode($response_dt), true);

            $response_dt    = $this->append_relationships_objects($response_dt);
            $response_dt    = $this->append_relationships_nulls($response_dt);
            $response       = PaymentBatch::arr_to_dt_response( 
                $response_dt, $input['draw'],
                $total_records,
                $records_filtered
                );


        }else{

            $sql            = PaymentBatch::bind_presql($qb->toSql(),$qb->getBindings());
            $response       = json_decode(json_encode(DB::select($sql)), true);
        }




        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }























    public function append_relationships_objects($data = array()){

        // print_r($data);

        foreach ($data as $key => $value) {

            $mobile_payment = PaymentBatch::find($data[$key]['id']);
            

            $data[$key]['payment_modes']                      = $mobile_payment->payment_modes;
            // $data[$key]['payable']                      = $mobile_payment->payable;
            // $data[$key]['debit_bank_account']           = $mobile_payment->debit_bank_account;
            // $data[$key]['currency']                     = $mobile_payment->currency;
            // $data[$key]['paid_to_bank']                 = $mobile_payment->paid_to_bank;
            // $data[$key]['paid_to_bank_branch']          = $mobile_payment->paid_to_bank_branch;
            // $data[$key]['payment_mode']                 = $mobile_payment->payment_mode;
            // $data[$key]['payment_batch']                = $mobile_payment->payment_batch;

        }

        return $data;


    }










    public function pad_zeros($desired_length, $data){
        if(strlen($data)<$desired_length){
            return str_repeat('0', $desired_length-strlen($data)).$data;
        }
        else{
            return $data;
        }
    }

    public function format_phone($phone){
        if((strlen($phone) == 9) && (substr($phone, 0, 1) == '7')){
            return '254'.$phone;
        }
        if((strlen($phone) == 10) && (substr($phone, 0, 2) == '07')){
            return '254'.substr($phone, 1);
        }
        return $phone;
    }
















    



    public function append_relationships_nulls($data = array()){


        foreach ($data as $key => $value) {
        }

        return $data;


    }
}
