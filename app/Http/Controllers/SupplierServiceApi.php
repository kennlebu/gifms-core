<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\Models\SuppliesModels\SupplierService;
use App\Models\SuppliesModels\SupplierServiceType;
use Illuminate\Support\Facades\DB;

class SupplierServiceApi extends Controller
{   

    public function addSupplierService()
    {
        try{
            $input = Request::all();
            $service = new SupplierService;
            $service->service_name = $input['service_name'];
            $service->supply_category_id = (int) $input['supply_category_id'];
            $service->daily_charge = (int) $input['daily_charge'];
            $service->unit = $input['unit'];
            $service->inventory_item = $input['inventory_item'] ?? null;

            if($service->save()){
                return response()->json(['msg'=>"service added"], 200);
            }
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }

    public function updateSupplierService()
    {
        try{
            $input = Request::all();
            $service =  SupplierService::findOrFail($input['id']);
            $service->service_name = $input['service_name'];
            $service->supply_category_id = (int) $input['supply_category_id'];
            $service->daily_charge = (int) $input['daily_charge'];
            $service->unit = $input['unit'];
            $service->inventory_item = $input['inventory_item'];
    
            if($service->save()){
                return response()->json(['msg'=>"service updated"], 200);
            }
        }
        catch(\Exception $e){
            return response()->json(['error'=>'something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }


    public function deleteSupplierService($supplier_service_id)
    {
        $deleted = SupplierService::destroy($supplier_service_id);
        if($deleted){
            return response()->json(['msg'=>"supplier service deleted"], 200);
        }else{
            return response()->json(['error'=>"Something went wrong"], 500);
        }
    }


    public function getSupplierServiceById($supplier_service_id)
    {
        try{
            $response = SupplierService::findOrFail($supplier_service_id);           
            return response()->json($response, 200);

        }catch(\Exception $e){
            $response =  ["error"=>"Something went wrong"];
            return response()->json($response, 500);
        }
    }


    public function supplierServicesGet()
    {
        $input = Request::all();
        //query builder
        $qb = SupplierService::with('supply_category');

        $total_records          = $qb->count();
        $records_filtered       = 0;

        //searching
        if(array_key_exists('searchval', $input)){
            $qb = $qb->where(function ($query) use ($input) {
                $query->orWhere('service_name','like', '%' . $input['searchval']. '%');
            });

            $records_filtered = $qb->count();
        }

        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction     = "asc";
            $order_column_name   = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }

            $qb = $qb->orderBy($order_column_name, $order_direction);
        }

        // Supply category
        if(array_key_exists('supply_category_id', $input) && !empty($input['supply_category_id'])){
            $qb = $qb->where('supply_category_id', $input['supply_category_id']);
        }

        //limit
        if(array_key_exists('limit', $input)){
            $qb = $qb->limit($input['limit']);
        }

        if(array_key_exists('datatables', $input)){
            //searching
            $qb = $qb->where(function ($query) use ($input) {
                $query->orWhere('service_name','like', '%' . $input['search']['value']. '%');
            });

            $records_filtered = $qb->count();

            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){
                $qb = $qb->orderBy($order_column_name, $order_direction);
            }

            //limit $ offset
            if((int)$input['start']!= 0 ){
                $qb = $qb->limit($input['length'])->offset($input['start']);
            }else{
                $qb = $qb->limit($input['length']);
            }
            $response = SupplierService::arr_to_dt_response( 
                $qb->get(), $input['draw'],
                $total_records,
                $records_filtered
                );
        }
        else{
            $response = $qb->get();
        }

        return response()->json($response, 200);
    }

    public function supplierServiceTypesGet() {
        $service_types = SupplierServiceType::all();
        return response()->json($service_types, 200);
    }
}
