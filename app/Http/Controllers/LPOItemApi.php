<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\Models\LpoModels\LpoItem;

class LPOItemApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation addLpoItem
     *
     * Add a new lpo item.
     *
     *
     * @return Http response
     */
    public function addLpoItem()
    {
        $input = Request::all();

        //path params validation


        $lpo_item = new LpoItem;


        try{


            $form = Request::only(
                        'lpo_id',
                        'item',
                        'item_description',
                        'qty',
                        'qty_description',
                        'unit_price',
                        'vat_charge'
                    );


            $lpo_item->lpo_id                       =               $form['lpo_id'];
            $lpo_item->item                         =               $form['item'];
            $lpo_item->item_description             =               $form['item_description'];
            $lpo_item->qty                          =   (int)       $form['qty'];
            $lpo_item->qty_description              =               $form['qty_description'];
            $lpo_item->unit_price                   =   (double)    $form['unit_price'];
            $lpo_item->vat_charge                   =   (int)       $form['vat_charge'];
            $lpo_item->migration_id = 0;
            $lpo_item->lpo_migration_id = 0;


            if($lpo_item->save()) {
                return Response()->json(array('success' => 'lpo quoatation added','lpo_item' => $lpo_item), 200);
            }


        }catch (JWTException $e){

                return response()->json(['error'=>'You are not Authenticated'], 500);

        }
     
    }
    /**
     * Operation updateLpoItem
     *
     * Update an existing LPO Item.
     *
     *
     * @return Http response
     */
    public function updateLpoItem()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateLpoItem');
        }
        $body = $input['body'];


        return response('How about implementing updateLpoItem as a PUT method ?');
    }
    /**
     * Operation deleteLpoItem
     *
     * Deletes an lpo_item.
     *
     * @param int $lpo_item_id lpo item id to delete (required)
     *
     * @return Http response
     */
    public function deleteLpoItem($lpo_item_id)
    {
        $input = Request::all();

        $deleted_lpo_item = LpoItem::destroy($lpo_item_id);


        if($deleted_lpo_item){
            return response()->json(['msg'=>"lpo item deleted"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"lpo item not found"], 404,array(),JSON_PRETTY_PRINT);
        }
    }
    /**
     * Operation getLpoItemById
     *
     * Find lpo item by ID.
     *
     * @param int $lpo_item_id ID of lpo item to return object (required)
     *
     * @return Http response
     */
    public function getLpoItemById($lpo_item_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getLpoItemById as a GET method ?');
    }
    /**
     * Operation lpoItemsGet
     *
     * lpo items List.
     *
     *
     * @return Http response
     */
    public function lpoItemsGet()
    {
        $input = Request::all();
        $response;

        //path params validation


        //not path params validation
        // $lpo_id = $input['lpo_id'];


        // return response('How about implementing lpoTermsGet as a GET method ?');
        if(array_key_exists('lpo_id', $input)){

            $response = LpoItem::where("deleted_at",null)
                ->where('lpo_id', $input['lpo_id'])
                ->get();

        }else{

            $response = LpoItem::all();

        }


        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }
}
