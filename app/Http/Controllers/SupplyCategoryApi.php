<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator supply_category.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;

use App\Models\SuppliesModels\SupplyCategory;
use App\Models\SuppliesModels\SupplyCategoryService;
use Exception;

class SupplyCategoryApi extends Controller
{
    /**
     * Operation addSupplyCategory
     *
     * Add a new supply_category.
     *
     *
     * @return Http response
     */
    public function addSupplyCategory()
    {
        $form = Request::all();

        $supply_category = new SupplyCategory;
        $supply_category->supply_category_name = $form['supply_category_name'];
        // $supply_category->service_type = $form['service_type'];
        $supply_category->save();

        $service_types = json_decode($form['service_types']);
        foreach($service_types as $st) {
            SupplyCategoryService::create(['supply_category_id' => $supply_category->id, 'supplier_service_type_id' => $st->id]);
        }

        return Response()->json(['msg' => 'Success'], 200);
    }
    




















    /**
     * Operation updateSupplyCategory
     *
     * Update an existing supply_category.
     *
     *
     * @return Http response
     */
    public function updateSupplyCategory()
    {
        $form = Request::all();
        $supply_category = SupplyCategory::find($form['id']);
        $supply_category->supply_category_name = $form['supply_category_name'];
        // $supply_category->service_type = $form['service_type'];
        $supply_category->save();

        $service_types = json_decode($form['service_types']);
        // Delete the previous ones
        SupplyCategoryService::where('supply_category_id', $form['id'])->delete();
        // Add the new ones
        foreach($service_types as $st) {
            SupplyCategoryService::create(['supply_category_id' => $supply_category->id, 'supplier_service_type_id' => $st->id]);
        }

        return Response()->json(['msg' => 'Success'], 200);
    }
    




















    /**
     * Operation deleteSupplyCategory
     *
     * Deletes an supply_category.
     *
     * @param int $supply_category_id supply_category id to delete (required)
     *
     * @return Http response
     */
    public function deleteSupplyCategory($supply_category_id)
    {
        $deleted = SupplyCategory::destroy($supply_category_id);
        if($deleted){
            return response()->json(['msg'=>"supply_category deleted"], 200);
        }else{
            return response()->json(['error'=>"Something went wrong"], 500);
        }
    }
    
    



















    /**

     * Operation getSupplyCategoryById
     *
     * Find supply_category by ID.
     *
     * @param int $supply_category_id ID of supply_category to return object (required)
     *
     * @return Http response
     */
    public function getSupplyCategoryById($supply_category_id)
    {
        try{
            $response   = SupplyCategory::findOrFail($supply_category_id);           
            return response()->json($response, 200);

        }catch(Exception $e){
            $response =  ["error"=>"Something went wrong"];
            return response()->json($response, 500);
        }
    }
    




















    /**
     * Operation supplyCategoriesGet
     *
     * supply_categories List.
     *
     *
     * @return Http response
     */
    public function supplyCategoriesGet()
    {
        $input = Request::all();
        //query builder
        $qb = SupplyCategory::with('service_types');

        $total_records          = $qb->count();
        $records_filtered       = 0;

        //searching
        if(array_key_exists('searchval', $input)){
            $qb = $qb->where(function ($query) use ($input) {
                $query->orWhere('supply_category_name','like', '%' . $input['searchval']. '%');
            });

            $records_filtered = $qb->count();
        }

        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction     = "asc";
            $order_column_name   = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }

            $qb = $qb->orderBy($order_column_name, $order_direction);
        }else{
            $qb = $qb->orderBy("supply_category_name", "asc");
        }

        //limit
        if(array_key_exists('limit', $input)){
            $qb = $qb->limit($input['limit']);
        }

        if(array_key_exists('datatables', $input)){
            //searching
            $qb = $qb->where(function ($query) use ($input) {
                $query->orWhere('supply_category_name','like', '%' . $input['search']['value']. '%');
            });

            $records_filtered = $qb->count();

            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){
                $qb = $qb->orderBy($order_column_name, $order_direction);
            }

            //limit $ offset
            if((int)$input['start']!= 0 ){
                $qb = $qb->limit($input['length'])->offset($input['start']);
            }else{
                $qb = $qb->limit($input['length']);
            }

            $response = SupplyCategory::arr_to_dt_response( 
                $qb->get(), $input['draw'],
                $total_records,
                $records_filtered
                );
        }
        else{
            $response = $qb->get();
        }

        return response()->json($response, 200);
    }
}
