<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator lpo_status.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;


use JWTAuth;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;

use App\Models\LPOModels\LpoStatus;
use App\Models\LPOModels\Lpo;
use Exception;

class LpoStatusApi extends Controller
{
    /**
     * Operation addLpoStatus
     *
     * Add a new lpo_status.
     *
     *
     * @return Http response
     */
    public function addLpoStatus()
    {
        $form = Request::all();

        $lpo_status = new LpoStatus;
        $lpo_status->lpo_status                 =         $form['lpo_status'];
        $lpo_status->next_status_id                 =  (int)  $form['next_status_id'];
        $lpo_status->status_security_level          =         $form['status_security_level'];
        $lpo_status->order_priority                 =         $form['order_priority'];
        $lpo_status->display_color                  =         $form['display_color'];
        $lpo_status->default_status                 =         $form['default_status'];
        $lpo_status->approval_level_id              =  (int)  $form['approval_level_id'];

        if($lpo_status->save()) {
            return Response()->json(array('msg' => 'Success: lpo_status added','lpo_status' => $lpo_status), 200);
        }
    }
    




















    /**
     * Operation updateLpoStatus
     *
     * Update an existing lpo_status.
     *
     *
     * @return Http response
     */
    public function updateLpoStatus()
    {
        $form = Request::all();

        $lpo_status = LpoStatus::find($form['id']);
        $lpo_status->lpo_status                     =         $form['lpo_status'];
        $lpo_status->next_status_id                 =  (int)  $form['next_status_id'];
        $lpo_status->status_security_level          =         $form['status_security_level'];
        $lpo_status->order_priority                 =         $form['order_priority'];
        $lpo_status->display_color                  =         $form['display_color'];
        $lpo_status->default_status                 =         $form['default_status'];
        $lpo_status->approval_level_id              =  (int)  $form['approval_level_id'];

        if($lpo_status->save()) {
            return Response()->json(array('msg' => 'Success: lpo_status updated','lpo_status' => $lpo_status), 200);
        }
    }
    




















    /**
     * Operation deleteLpoStatus
     *
     * Deletes an lpo_status.
     *
     * @param int $lpo_status_id lpo_status id to delete (required)
     *
     * @return Http response
     */
    public function deleteLpoStatus($lpo_status_id)
    {
        $deleted = LpoStatus::destroy($lpo_status_id);
        if($deleted){
            return response()->json(['msg'=>"lpo_status deleted"], 200);
        }else{
            return response()->json(['error'=>"Something went wrong"], 500);
        }
    }
    
    



















    /**

     * Operation getLpoStatusById
     *
     * Find lpo_status by ID.
     *
     * @param int $lpo_status_id ID of lpo_status to return object (required)
     *
     * @return Http response
     */
    public function getLpoStatusById($lpo_status_id)
    {
        try{
            $response   = LpoStatus::findOrFail($lpo_status_id);           
            return response()->json($response, 200);

        }catch(Exception $e){
            $response =  ["error"=>"Something went wrong"];
            return response()->json($response, 500);
        }
    }
    




















    /**
     * Operation lpoStatusesGet
     *
     * lpo_statuses List.
     *
     *
     * @return Http response
     */
    public function lpoStatusesGet()
    {
        $input = Request::all();
        //query builder
        $qb = LpoStatus::query();

        if(!array_key_exists('lean', $input)){
            $qb = LpoStatus::with('next_status', 'approval_level');
        }

        $total_records          = $qb->count();
        $records_filtered       = 0;
        $user = $this->current_user();
        if(array_key_exists('displayable_only',$input)){
            $qb = $qb->whereIn('id', [1,2,11,12,15]);
        }

        //searching
        if(array_key_exists('searchval', $input)){
            $qb = $qb->where(function ($query) use ($input) {
                $query->orWhere('lpo_status','like', '%' . $input['searchval']. '%');
                $query->orWhere('display_color','like', '%' . $input['searchval']. '%');
            });

            $records_filtered = $qb->count();
        }

        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction     = "asc";
            $order_column_name   = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }
            $qb = $qb->orderBy($order_column_name, $order_direction);
        }

        //limit
        if(array_key_exists('limit', $input)){
            $qb = $qb->limit($input['limit']);
        }

        if(array_key_exists('datatables', $input)){
            //searching
            $qb = $qb->where(function ($query) use ($input) {
                $query->orWhere('lpo_status','like', '%' . $input['search']['value']. '%');
                $query->orWhere('display_color','like', '%' . $input['search']['value']. '%');
            });

            $records_filtered = $qb->count();

            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){
                $qb = $qb->orderBy($order_column_name, $order_direction);
            }

            //limit $ offset
            if((int)$input['start']!= 0 ){
                $qb = $qb->limit($input['length'])->offset($input['start']);
            }else{
                $qb = $qb->limit($input['length']);
            }
            
            $response = LpoStatus::arr_to_dt_response( 
                $qb->get(), $input['draw'],
                $total_records,
                $records_filtered
                );
        }
        else{            
            $qb = $qb->orderBy("order_priority", "asc");
            $response = $qb->get();

            foreach ($response as $key => $value) {
                $response[$key]['lpos_count'] = Lpo::where('requested_by_id',$this->current_user()->id)
                                            ->where('status_id', $value['id'] )
                                            ->count();

                $response[$key]['prenegotiated_count'] = Lpo::where('requested_by_id',$this->current_user()->id)
                                            ->where('status_id', $value['id'] )
                                            ->where('lpo_type', 'prenegotiated')
                                            ->count();
            }

            //add -1 and -2 statuses

            if(array_key_exists('allowed_only', $input)){
                //-1
                $response[]=array(
                        "id"=> -1,
                        "lpo_status"=> "My Lpos/Lsos",
                        "order_priority"=> 998,
                        "display_color"=> "#37A9E17A",
                        "lpos_count"=> Lpo::where('requested_by_id',$this->current_user()->id)->orWhere('lpos.requisitioned_by_id',$this->current_user()->id)->count(),
                        "prenegotiated_count"=> Lpo::where('requested_by_id',$this->current_user()->id)->where('lpo_type', 'prenegotiated')->count()
                      );

                if ($user->hasRole('program-manager')){
                    $response[]=array(
                            "id"=> -3,
                            "lpo_status"=> "My PM-Assigned Lpos/Lsos",
                            "order_priority"=> 999,
                            "display_color"=> "#49149c7a",
                            "lpos_count"=> Lpo::where('project_manager_id',$this->current_user()->id)->count(),
                            "prenegotiated_count"=> Lpo::where('project_manager_id',$this->current_user()->id)->where('lpo_type', 'prenegotiated')->count()
                          );
                }

                if ($user->can('READ_ADVANCE_-2')){

                    //-1
                    $response[]=array(
                            "id"=> -2,
                            "lpo_status"=> "All Lpos/Lsos",
                            "order_priority"=> 1000,
                            "display_color"=> "#092D50",
                            "lpos_count"=> Lpo::count(),
                            "prenegotiated_count"=> Lpo::where('lpo_type', 'prenegotiated')->count()
                          );
                }
            }
        }

        return response()->json($response, 200);
    }
}
