<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator lpo_status.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;


use JWTAuth;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;

use App\Models\LPOModels\LpoStatus;
use App\Models\LPOModels\Lpo;


use Exception;
use App;
use Illuminate\Support\Facades\Response;
use App\Models\StaffModels\Staff;

class LpoStatusApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    




















    /**
     * Operation addLpoStatus
     *
     * Add a new lpo_status.
     *
     *
     * @return Http response
     */
    public function addLpoStatus()
    {
        $form = Request::only(
            'lpo_status',
            'next_status_id',
            'status_security_level',
            'order_priority',
            'display_color',
            'default_status',
            'approval_level_id'
            );

        $lpo_status = new LpoStatus;

            $lpo_status->lpo_status                 =         $form['lpo_status'];
            $lpo_status->next_status_id                 =  (int)  $form['next_status_id'];
            $lpo_status->status_security_level          =         $form['status_security_level'];
            $lpo_status->order_priority                 =         $form['order_priority'];
            $lpo_status->display_color                  =         $form['display_color'];
            $lpo_status->default_status                 =         $form['default_status'];
            $lpo_status->approval_level_id              =  (int)  $form['approval_level_id'];

        if($lpo_status->save()) {

            return Response()->json(array('msg' => 'Success: lpo_status added','lpo_status' => $lpo_status), 200);
        }
    }
    




















    /**
     * Operation updateLpoStatus
     *
     * Update an existing lpo_status.
     *
     *
     * @return Http response
     */
    public function updateLpoStatus()
    {
        $form = Request::only(
            'id',
            'next_status_id',
            'status_security_level',
            'order_priority',
            'display_color',
            'default_status',
            'approval_level_id'
            );

        $lpo_status = LpoStatus::find($form['id']);


            $lpo_status->lpo_status                     =         $form['lpo_status'];
            $lpo_status->next_status_id                 =  (int)  $form['next_status_id'];
            $lpo_status->status_security_level          =         $form['status_security_level'];
            $lpo_status->order_priority                 =         $form['order_priority'];
            $lpo_status->display_color                  =         $form['display_color'];
            $lpo_status->default_status                 =         $form['default_status'];
            $lpo_status->approval_level_id              =  (int)  $form['approval_level_id'];

        if($lpo_status->save()) {

            return Response()->json(array('msg' => 'Success: lpo_status updated','lpo_status' => $lpo_status), 200);
        }
    }
    




















    /**
     * Operation deleteLpoStatus
     *
     * Deletes an lpo_status.
     *
     * @param int $lpo_status_id lpo_status id to delete (required)
     *
     * @return Http response
     */
    public function deleteLpoStatus($lpo_status_id)
    {
        $input = Request::all();


        $deleted = LpoStatus::destroy($lpo_status_id);

        if($deleted){
            return response()->json(['msg'=>"lpo_status deleted"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"lpo_status not found"], 404,array(),JSON_PRETTY_PRINT);
        }
    }
    
    



















    /**

     * Operation getLpoStatusById
     *
     * Find lpo_status by ID.
     *
     * @param int $lpo_status_id ID of lpo_status to return object (required)
     *
     * @return Http response
     */
    public function getLpoStatusById($lpo_status_id)
    {
        $input = Request::all();

        try{

            $response   = LpoStatus::findOrFail($lpo_status_id);
           
            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);

        }catch(Exception $e){

            $response =  ["error"=>"lpo_status could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }
    




















    /**
     * Operation lpoStatusesGet
     *
     * lpo_statuses List.
     *
     *
     * @return Http response
     */
    public function lpoStatusesGet()
    {
        


        $input = Request::all();
        //query builder
        $qb = DB::table('lpo_statuses');

        $qb->whereNull('lpo_statuses.deleted_at');

        $response;
        $response_dt;

        $total_records          = $qb->count();
        $records_filtered       = 0;
        $user = JWTAuth::parseToken()->authenticate();




        //searching
        if(array_key_exists('searchval', $input)){
            $qb->where(function ($query) use ($input) {
                
                $query->orWhere('lpo_statuses.id','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('lpo_statuses.lpo_status','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('lpo_statuses.display_color','like', '\'%' . $input['searchval']. '%\'');

            });

            // $records_filtered       =  $qb->count(); //doesn't work

            $sql = LpoStatus::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];
            // $records_filtered = 30;


        }

        //limit
        if(array_key_exists('limit', $input)){


            $qb->limit($input['limit']);


        }

        //migrated
        if(array_key_exists('migrated', $input)){

            $mig = (int) $input['migrated'];

            if($mig==0){
                $qb->whereNull('migration_id');
            }else if($mig==1){
                $qb->whereNotNull('migration_id');
            }


        }



        if(array_key_exists('datatables', $input)){

            //searching
            $qb->where(function ($query) use ($input) {
                
                $query->orWhere('lpo_statuses.id','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('lpo_statuses.lpo_status','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('lpo_statuses.display_color','like', '\'%' . $input['search']['value']. '%\'');

            });




            $sql = LpoStatus::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];


            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){

                $qb->orderBy($order_column_name, $order_direction);

            }






            //limit $ offset
            if((int)$input['start']!= 0 ){

                $response_dt    =   $qb->limit($input['length'])->offset($input['start']);

            }else{
                $qb->limit($input['length']);
            }





            $sql = LpoStatus::bind_presql($qb->toSql(),$qb->getBindings());

            // $response_dt = DB::select($qb->toSql(),$qb->getBindings());         //pseudo
            $response_dt = DB::select($sql);


            $response_dt = json_decode(json_encode($response_dt), true);

            $response_dt    = $this->append_relationships_objects($response_dt);
            $response_dt    = $this->append_relationships_nulls($response_dt);
            $response       = LpoStatus::arr_to_dt_response( 
                $response_dt, $input['draw'],
                $total_records,
                $records_filtered
                );


        }else{
            
            $qb->orderBy("order_priority", "asc");

            $sql            = LpoStatus::bind_presql($qb->toSql(),$qb->getBindings());
            $response       = json_decode(json_encode(DB::select($sql)), true);
            $response       = $this->append_relationships_objects($response);
            $response       = $this->append_relationships_nulls($response);

            foreach ($response as $key => $value) {
                $response[$key]['lpos_count'] = Lpo::where('requested_by_id',$this->current_user()->id)
                                            ->where('status_id', $value['id'] )
                                            ->count();
            }

            //add -1 and -2 statuses

            if(array_key_exists('allowed_only', $input)){

                //-1
                $response[]=array(
                        "id"=> -1,
                        "lpo_status"=> "My Lpos",
                        "order_priority"=> 998,
                        "display_color"=> "#37A9E17A",
                        "lpos_count"=> Lpo::where('requested_by_id',$this->current_user()->id)->count()
                      );


                if ($user->hasRole('program-manager')){
                    $response[]=array(
                            "id"=> -3,
                            "lpo_status"=> "My PM-Assigned Lpos",
                            "order_priority"=> 999,
                            "display_color"=> "#49149c7a",
                            "lpos_count"=> Lpo::where('project_manager_id',$this->current_user()->id)->count()
                          );
                }

                if ($user->can('READ_ADVANCE_-2')){

                    //-1
                    $response[]=array(
                            "id"=> -2,
                            "lpo_status"=> "All Lpos",
                            "order_priority"=> 1000,
                            "display_color"=> "#092D50",
                            "lpos_count"=> Lpo::count()
                          );
                }


            }

        }




        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);


    }




















    public function append_relationships_objects($data = array()){


        foreach ($data as $key => $value) {

            $lpo_statuses = LpoStatus::find($data[$key]['id']);

            $data[$key]['next_status']                = $lpo_statuses->next_status;
            $data[$key]['approval_level']             = $lpo_statuses->approval_level;

        }


        return $data;


    }










    



    public function append_relationships_nulls($data = array()){


        foreach ($data as $key => $value) {


            if($data[$key]["next_status"]==null){
                $data[$key]["next_status"] = array("lpo_status"=>"N/A");
            }
            if($data[$key]["approval_level"]==null){
                $data[$key]["approval_level"] = array("approval_level"=>"N/A");
            }


        }

        return $data;


    }
}
