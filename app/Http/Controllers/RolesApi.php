<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator role.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;


use JWTAuth;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;

use App\Models\StaffModels\Role;


use Exception;
use App;
use Illuminate\Support\Facades\Response;
use App\Models\StaffModels\Staff;

class RolesApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    




















    /**
     * Operation addRole
     *
     * Add a new role.
     *
     *
     * @return Http response
     */
    public function addRole()
    {
        $form = Request::only(
            'name',
            'acronym'
            );

        $role = new Role;

            $role->name                   =         $form['name'];
            $role->acronym                   =         $form['acronym'];

        if($role->save()) {

            return Response()->json(array('msg' => 'Success: role added','role' => $role), 200);
        }
    }
    




















    /**
     * Operation updateRole
     *
     * Update an existing role.
     *
     *
     * @return Http response
     */
    public function updateRole()
    {
        $form = Request::only(
            'id',
            'name',
            'acronym'
            );

        $role = Role::find($form['id']);

            $role->name                   =         $form['name'];
            $role->acronym                   =         $form['acronym'];

        if($role->save()) {

            return Response()->json(array('msg' => 'Success: role updated','role' => $role), 200);
        }
    }
    




















    /**
     * Operation deleteRole
     *
     * Deletes an role.
     *
     * @param int $role_id role id to delete (required)
     *
     * @return Http response
     */
    public function deleteRole($role_id)
    {
        $input = Request::all();


        $deleted = Role::destroy($role_id);

        if($deleted){
            return response()->json(['msg'=>"role deleted"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"role not found"], 404,array(),JSON_PRETTY_PRINT);
        }
    }
    
    



















    /**

     * Operation getRoleById
     *
     * Find role by ID.
     *
     * @param int $role_id ID of role to return object (required)
     *
     * @return Http response
     */
    public function getRoleById($role_id)
    {
        $input = Request::all();

        try{

            $response   = Role::findOrFail($role_id);
           
            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);

        }catch(Exception $e){

            $response =  ["error"=>"role could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }
    




















    /**
     * Operation rolesGet
     *
     * roles List.
     *
     *
     * @return Http response
     */
    public function rolesGet()
    {
        


        $input = Request::all();
        //query builder
        $qb = DB::table('roles');

        $qb->whereNull('roles.deleted_at');

        $response;
        $response_dt;

        $total_records          = $qb->count();
        $records_filtered       = 0;




        //searching
        if(array_key_exists('searchval', $input)){
            $qb->where(function ($query) use ($input) {
                
                $query->orWhere('roles.id','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('roles.name','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('roles.acronym','like', '\'%' . $input['searchval']. '%\'');

            });

            // $records_filtered       =  $qb->count(); //doesn't work

            $sql = Staff::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];
            // $records_filtered = 30;


        }


        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction     = "desc";
            $order_column_name   = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }

            $qb->orderBy($order_column_name, $order_direction);
        }else{
            //$qb->orderBy("project_code", "asc");
        }

        //limit
        if(array_key_exists('limit', $input)){


            $qb->limit($input['limit']);


        }

        //migrated
        if(array_key_exists('migrated', $input)){

            $mig = (int) $input['migrated'];

            if($mig==0){
                $qb->whereNull('migration_id');
            }else if($mig==1){
                $qb->whereNotNull('migration_id');
            }


        }



        if(array_key_exists('datatables', $input)){

            //searching
            $qb->where(function ($query) use ($input) {
                
                $query->orWhere('roles.id','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('roles.name','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('roles.acronym','like', '\'%' . $input['search']['value']. '%\'');

            });




            $sql = Staff::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];


            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){

                $qb->orderBy($order_column_name, $order_direction);

            }






            //limit $ offset
            if((int)$input['start']!= 0 ){

                $response_dt    =   $qb->limit($input['length'])->offset($input['start']);

            }else{
                $qb->limit($input['length']);
            }





            $sql = Staff::bind_presql($qb->toSql(),$qb->getBindings());

            // $response_dt = DB::select($qb->toSql(),$qb->getBindings());         //pseudo
            $response_dt = DB::select($sql);


            $response_dt = json_decode(json_encode($response_dt), true);

            $response_dt    = $this->append_relationships_objects($response_dt);
            $response_dt    = $this->append_relationships_nulls($response_dt);
            $response       = Staff::arr_to_dt_response( 
                $response_dt, $input['draw'],
                $total_records,
                $records_filtered
                );


        }else{

            $sql            = Staff::bind_presql($qb->toSql(),$qb->getBindings());
            $response       = json_decode(json_encode(DB::select($sql)), true);
            $response       = $this->append_relationships_objects($response);
            $response       = $this->append_relationships_nulls($response);
        }




        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);


    }




















    public function append_relationships_objects($data = array()){


        foreach ($data as $key => $value) {

            $roles = Role::find($data[$key]['id']);


            $data[$key]['permissions']                   = $roles->permissions;


        }


        return $data;


    }










    



    public function append_relationships_nulls($data = array()){


        foreach ($data as $key => $value) {


            // if($data[$key]["account"]==null){
            //     $data[$key]["account"] = array("account_name"=>"N/A");
            // }


        }

        return $data;


    }
}
