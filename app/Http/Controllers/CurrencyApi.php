<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\Models\LookupModels\Currency;

class CurrencyApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation currenciesGet
     *
     * currencies List.
     *
     *
     * @return Http response
     */
    public function currenciesGet()
    {
        $input = Request::all();

        //path params validation

         $response = Currency::all();

          return response()->json($response, 200,array(),JSON_PRETTY_PRINT);

    }
    /**
     * Operation addCurrency
     *
     * Add a new currency.
     *
     *
     * @return Http response
     */
    public function addCurrency()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addCurrency');
        }
        $body = $input['body'];


        return response('How about implementing addCurrency as a POST method ?');
    }
    /**
     * Operation updateCurrency
     *
     * Update an existing currency.
     *
     *
     * @return Http response
     */
    public function updateCurrency()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateCurrency');
        }
        $body = $input['body'];


        return response('How about implementing updateCurrency as a PUT method ?');
    }
    /**
     * Operation deleteCurrency
     *
     * Deletes an currency.
     *
     * @param int $currency_id currency id to delete (required)
     *
     * @return Http response
     */
    public function deleteCurrency($currency_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteCurrency as a DELETE method ?');
    }
    /**
     * Operation getCurrencyById
     *
     * Find currency by ID.
     *
     * @param int $currency_id ID of currency to return object (required)
     *
     * @return Http response
     */
    public function getCurrencyById($currency_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getCurrencyById as a GET method ?');
    }
}
