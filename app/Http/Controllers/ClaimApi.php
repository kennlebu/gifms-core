<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;
use App\Models\ClaimsModels\Claim;

class ClaimApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation addClaim
     *
     * Add a new claim.
     *
     *
     * @return Http response
     */
    public function addClaim()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addClaim');
        }
        $body = $input['body'];


        return response('How about implementing addClaim as a POST method ?');
    }


















    /**
     * Operation updateClaim
     *
     * Update an existing claim.
     *
     *
     * @return Http response
     */
    public function updateClaim()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateClaim');
        }
        $body = $input['body'];


        return response('How about implementing updateClaim as a PUT method ?');
    }


















    /**
     * Operation deleteClaim
     *
     * Deletes an claim.
     *
     * @param int $claim_id claim id to delete (required)
     *
     * @return Http response
     */
    public function deleteClaim($claim_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteClaim as a DELETE method ?');
    }


















    /**
     * Operation getClaimById
     *
     * Find claim by ID.
     *
     * @param int $claim_id ID of claim to return object (required)
     *
     * @return Http response
     */
    public function getClaimById($claim_id)
    {
        $response = [];

        try{
            $response   = Claim::with( 
                                        'requested_by',
                                        'request_action_by',
                                        'project',
                                        'status',
                                        'project_manager',
                                        'currency',
                                        'rejected_by',
                                        'approvals'
                                    )->findOrFail($claim_id);

            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);

        }catch(Exception $e){

            $response =  ["error"=>"Claim could not be found"];
            return response()->json($response, 404,array(),JSON_PRETTY_PRINT);
        }
    }


















    /**
     * Operation allocateClaim
     *
     * Allocate claim by ID.
     *
     * @param int $claim_id ID of claim to return object (required)
     *
     * @return Http response
     */
    public function allocateClaim($claim_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing allocateClaim as a PATCH method ?');
    }


















    /**
     * Operation approveClaim
     *
     * Approve claim by ID.
     *
     * @param int $claim_id ID of claim to return object (required)
     *
     * @return Http response
     */
    public function approveClaim($claim_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing approveClaim as a PATCH method ?');
    }


















    /**
     * Operation getDocumentById
     *
     * get claim document by ID.
     *
     * @param int $claim_id ID of claim to return object (required)
     *
     * @return Http response
     */
    public function getDocumentById($claim_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getDocumentById as a GET method ?');
    }


















    /**
     * Operation submitClaimForApproval
     *
     * Submit claim by ID.
     *
     * @param int $claim_id ID of claim to return object (required)
     *
     * @return Http response
     */
    public function submitClaimForApproval($claim_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing submitClaimForApproval as a PATCH method ?');
    }


















    /**
     * Operation getClaims
     *
     * claims List.
     *
     *
     * @return Http response
     */
    public function getClaims()
    {


        $input = Request::all();
        //query builder
        $qb = DB::table('claims');

        $qb->whereNull('deleted_at');

        $response;
        $response_dt;

        $total_records          = $qb->count();
        $records_filtered       = 0;






        //if status is set

        if(array_key_exists('status', $input)){

            $status_ = (int) $input['status'];

            if($status_ >-1){
                $qb->where('status_id', $input['status']);
                $qb->where('requested_by_id',$this->current_user()->id);
            }elseif ($status_==-1) {
                $qb->where('requested_by_id',$this->current_user()->id);
            }elseif ($status_==-2) {
                
            }




            // $total_records          = $qb->count();     //may need this
        }




        //searching
        if(array_key_exists('searchval', $input)){
            $qb->where(function ($query) use ($input) {
                
                $query->orWhere('id','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('ref','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('expense_desc','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('expense_purpose','like', '\'%' . $input['searchval']. '%\'');

            });

            // $records_filtered       =  $qb->count(); //doesn't work

            $sql = Claim::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];
            // $records_filtered = 30;


        }




        if(array_key_exists('datatables', $input)){

            //searching
            $qb->where(function ($query) use ($input) {
                
                $query->orWhere('id','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('ref','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('expense_desc','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('expense_purpose','like', '\'%' . $input['search']['value']. '%\'');

            });




            $sql = Claim::bind_presql($qb->toSql(),$qb->getBindings());
            $sql = str_replace("*"," count(*) AS count ", $sql);
            $dt = json_decode(json_encode(DB::select($sql)), true);

            $records_filtered = (int) $dt[0]['count'];


            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            // if ($order_column_id == 0){
            //     $order_column_name = "created_at";
            // }
            // if ($order_column_id == 1){
            //     $order_column_name = "id";
            // }

            if($order_column_name!=''){

                $qb->orderBy($order_column_name, $order_direction);

            }






            //limit $ offset
            if((int)$input['start']!= 0 ){

                $response_dt    =   $qb->limit($input['length'])->offset($input['start']);

            }else{
                $qb->limit($input['length']);
            }





            $sql = Claim::bind_presql($qb->toSql(),$qb->getBindings());

            // $response_dt = DB::select($qb->toSql(),$qb->getBindings());         //pseudo
            $response_dt = DB::select($sql);


            $response_dt = json_decode(json_encode($response_dt), true);

            $response_dt    = $this->append_relationships_objects($response_dt);
            $response_dt    = $this->append_relationships_nulls($response_dt);
            $response       = Claim::arr_to_dt_response( 
                $response_dt, $input['draw'],
                $total_records,
                $records_filtered
                );


        }else{

            $sql            = Claim::bind_presql($qb->toSql(),$qb->getBindings());
            $response       = json_decode(json_encode(DB::select($sql)), true);
        }




        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }




























    public function append_relationships_objects($data = array()){

        // print_r($data);

        foreach ($data as $key => $value) {

            $mobile_payment = Claim::find($data[$key]['id']);

            $data[$key]['requested_by']                 = $mobile_payment->requested_by;
            $data[$key]['request_action_by']            = $mobile_payment->requested_action_by;
            $data[$key]['project']                      = $mobile_payment->project;
            $data[$key]['status']                       = $mobile_payment->status;
            $data[$key]['project_manager']              = $mobile_payment->project_manager;
            $data[$key]['currency']                     = $mobile_payment->currency;
            $data[$key]['rejected_by']                  = $mobile_payment->rejected_by;
            $data[$key]['approvals']              = $mobile_payment->approvals;

        }

        return $data;


    }
















    



    public function append_relationships_nulls($data = array()){


        foreach ($data as $key => $value) {


            if($value["requested_by"]==null){
                $data[$key]['requested_by'] = array("full_name"=>"N/A");
                
            }
            if($value["request_action_by"]==null){
                $data[$key]['request_action_by'] = array("full_name"=>"N/A");
                
            }
            if($value["project"]==null){
                $data[$key]['project'] = array("project_name"=>"N/A");
                
            }
            if($value["status"]==null){
                $data[$key]['status'] = array("claim_status"=>"N/A");
                
            }
            if($value["project_manager"]==null){
                $data[$key]['project_manager'] = array("full_name"=>"N/A");
                
            }
            if($value["rejected_by"]==null){
                $data[$key]['rejected_by'] = array("full_name"=>"N/A");
                
            }
            if($data[$key]["currency"]==null){
                $data[$key]["currency"] = array("currency_name"=>"N/A");
            }
        }

        return $data;


    }















}
