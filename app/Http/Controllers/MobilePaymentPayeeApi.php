<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use App\Models\AllocationModels\Allocation;
use Illuminate\Support\Facades\Request;
use App\Models\MobilePaymentModels\MobilePaymentPayee;
use DB;
use JWTAuth;
use App\Models\MobilePaymentModels\MobilePayment;

class MobilePaymentPayeeApi extends Controller
{
    /**
     * Operation addMobilePaymentPayee
     *
     * Add a new mobile_payment_payee.
     *
     *
     * @return Http response
     */
    public function addMobilePaymentPayee()
    {
        $mobile_payment_payee = new MobilePaymentPayee;
        $mobile_payment_payee->disableLogging();

        try{
            $form = Request::all();

            $mobile_payment_payee->mobile_payment_id          =               $form['mobile_payment_id'];
            $mobile_payment_payee->full_name                  =               $form['registered_name'];
            $mobile_payment_payee->registered_name            =               $form['registered_name'];
            $mobile_payment_payee->tax_pin                    =               $form['tax_pin'];
            $mobile_payment_payee->id_number                  =               $form['id_number'];
            $mobile_payment_payee->mobile_number              =               $form['mobile_number'];
            $mobile_payment_payee->amount                     =   (double)    $form['amount'];
            $mobile_payment_payee->withdrawal_charges         =               $mobile_payment_payee->calculated_withdrawal_charges;
            $mobile_payment_payee->total                      =               $mobile_payment_payee->calculated_total;
            $mobile_payment_payee->disableLogging();

            if($mobile_payment_payee->save()) {                
                $mobile_payment = MobilePayment::find($mobile_payment_payee->mobile_payment_id);

                // Log upload
                activity()
                    ->performedOn($mobile_payment)
                    ->causedBy($this->current_user())                
                    ->withProperties(['detail' => 'Uploaded payee '.$mobile_payment_payee->registered_name])
                    ->log('Uploaded payee');

                if(!empty($mobile_payment) && !empty($mobile_payment->requisition_id)){
                    foreach($mobile_payment->allocations as $alloc){
                        $a = Allocation::find($alloc->id);
                        if($a->percentage_allocated != 0)
                            $a->amount_allocated = ($a->percentage_allocated / 100) * $mobile_payment->totals;
                        $a->disableLogging();
                        $a->save();
                    }
                }
                return Response()->json(array('success' => 'mobile payment payee added','mobile_payment_payee' => $mobile_payment_payee), 200);
            }
        }catch (JWTException $e){
            return response()->json(['error'=>'You are not Authenticated'], 500);
        }
        catch (Exception $e){
            return response()->json(['error'=>'Something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }































    /**
     * Operation updateMobilePaymentPayee
     *
     * Update an existing mobile_payment_payee.
     *
     *
     * @return Http response
     */
    public function updateMobilePaymentPayee()
    {
        try{
            $form = Request::all();
            $mobile_payment_payee = MobilePaymentPayee::findOrFail((int)$form['id']);
            $mobile_payment_payee->disableLogging();
            $mobile_payment_payee->mobile_payment_id          =               $form['mobile_payment_id'];
            $mobile_payment_payee->full_name                  =               $form['registered_name'];
            $mobile_payment_payee->registered_name            =               $form['registered_name'];
            $mobile_payment_payee->tax_pin                    =               $form['tax_pin'];
            $mobile_payment_payee->id_number                  =               $form['id_number'];
            $mobile_payment_payee->mobile_number              =               $form['mobile_number'];
            $mobile_payment_payee->amount                     =   (double)    $form['amount'];
            $mobile_payment_payee->withdrawal_charges         =               $mobile_payment_payee->calculated_withdrawal_charges;
            $mobile_payment_payee->total                      =               $mobile_payment_payee->calculated_total;

            if($mobile_payment_payee->save()) {
                // Logging update
                $user = JWTAuth::parseToken()->authenticate();
                $mobile_payment = MobilePayment::findOrFail($mobile_payment_payee->mobile_payment_id);
                activity()
                   ->performedOn($mobile_payment)
                   ->causedBy($user)
                   ->log('updated payee');

                return Response()->json(array('success' => 'mobile payment payee updated','mobile_payment_payee' => $mobile_payment_payee), 200);
            }
        }catch (JWTException $e){
            return response()->json(['error'=>'Mobile Payment Payee not found'], 404);
        }
    }































    /**
     * Operation deleteMobilePaymentPayee
     *
     * Deletes an mobile_payment_payee.
     *
     * @param int $mobile_payment_payee_id mobile_payment_payee id to delete (required)
     *
     * @return Http response
     */
    public function deleteMobilePaymentPayee($mobile_payment_payee_id)
    {
        $deleted_mobile_payment_payee = MobilePaymentPayee::destroy($mobile_payment_payee_id);
        if($deleted_mobile_payment_payee){
            return response()->json(['msg'=>"Mobile payment payee deleted"], 200,array(),JSON_PRETTY_PRINT);
        }else{
            return response()->json(['error'=>"Something went wrong"], 500,array(),JSON_PRETTY_PRINT);
        }
    }































    /**
     * Operation getMobilePaymentPayeeById
     *
     * Find mobile_payment_payee by ID.
     *
     * @param int $mobile_payment_payee_id ID of mobile_payment_payee to return object (required)
     *
     * @return Http response
     */
    public function getMobilePaymentPayeeById($mobile_payment_payee_id)
    {
        $response = [];
        try{
            $response   = MobilePaymentPayee::findOrFail($mobile_payment_payee_id);
            return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
        }
        catch(Exception $e){
            $response =  ["error"=>"Something went wrong"];
            return response()->json($response, 500,array(),JSON_PRETTY_PRINT);
        }
    }































    /**
     * Operation mobilePaymentPayeesGet
     *
     * mobile_payment_payees List.
     *
     *
     * @return Http response
     */
    public function mobilePaymentPayeesGet()
    {
        $input = Request::all();
    }
}
