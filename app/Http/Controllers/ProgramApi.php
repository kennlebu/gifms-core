<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;


use JWTAuth;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;

use App\Models\ProgramModels\Program;
use App\Models\ProgramModels\ProgramManager;
use App\Models\ProgramModels\ProgramStaff;
use Exception;

class ProgramApi extends Controller
{
    /**
     * Operation addProgram
     *
     * Add a new program.
     *
     *
     * @return Http response
     */
    public function addProgram()
    {
        $form = Request::all();

        $program = new Program;
        $program->program_name                   =         $form['program_name'];
        $program->program_desc                   =         $form['program_desc'];

        if($program->save()) {
            foreach($form['program_managers'] as $pm){
                ProgramManager::create([
                    'program_id' => $program->id,
                    'program_manager_id' => $pm['id']
                ]);
            }

            // $pm = new ProgramManager;
            // $pm->program_id = $program->id;
            // $pm->program_manager_id = $form['pm_id'];
            // $pm->default_approver = 1;
            // $pm->save();

            return Response()->json(array('msg' => 'Success: program added','program' => $program), 200);
        }
    }
    




















    /**
     * Operation updateProgram
     *
     * Update an existing program.
     *
     *
     * @return Http response
     */
    public function updateProgram()
    {
        $form = Request::all();

        $program = Program::find($form['id']);
        $program->program_name                   =         $form['program_name'];
        $program->program_desc                   =         $form['program_desc'];

        if($program->save()) {
            $current_pms = ProgramManager::where('program_id', $program->id)->pluck('program_manager_id')->toArray();
            $incoming_pms = [];
            foreach($form['program_managers'] as $i_pms) {
                $incoming_pms[] = $i_pms['id'];
            }
            $to_be_inserted = [];
            $to_be_removed = [];
            foreach ($current_pms as $current) {
                if(!in_array($current, $incoming_pms)) {
                    $to_be_removed[] = $current;
                }
            }
            foreach($incoming_pms as $incoming) {
                if(!in_array($incoming, $current_pms)) {
                    $to_be_inserted[] = $incoming;
                }
            }

            foreach($to_be_removed as $rem){
                ProgramManager::where(['program_id'=>$program->id, 'program_manager_id'=>$rem])->delete();
            }
            foreach($to_be_inserted as $ins) {
                ProgramManager::create([
                    'program_id' => $program->id,
                    'program_manager_id' => $ins
                ]);
            }

            // $pm = ProgramManager::where('program_id', $form['id'])->first();
            // if(!empty($pm)){
            //     $pm->program_manager_id = $form['pm_id'];
            // }
            // else {
            //     $pm = new ProgramManager;
            //     $pm->program_id = $form['id'];
            //     $pm->program_manager_id = $form['pm_id'];
            //     $pm->default_approver = 1;
            // }
            // $pm->save();

            return Response()->json(array('msg' => 'Success: program updated','program' => $program), 200);
        }
    }
    




















    /**
     * Operation deleteProgram
     *
     * Deletes an program.
     *
     * @param int $program_id program id to delete (required)
     *
     * @return Http response
     */
    public function deleteProgram($program_id)
    {
        // Find and delete program manager entry
        $pm = ProgramManager::where('program_id', $program_id)->first();
        ProgramManager::destroy($pm->id);

        $deleted = Program::destroy($program_id);
        if($deleted){
            return response()->json(['msg'=>"program deleted"], 200);
        }else{
            return response()->json(['error'=>"Something went wrong"], 500);
        }
    }
    
    



















    /**

     * Operation getProgramById
     *
     * Find program by ID.
     *
     * @param int $program_id ID of program to return object (required)
     *
     * @return Http response
     */
    public function getProgramById($program_id)
    {
        try{
            $response   = Program::with("managers", "staffs")->findOrFail($program_id);           
            return response()->json($response, 200);
        }catch(Exception $e){
            $response =  ["error"=>"Something went wrong"];
            return response()->json($response, 500);
        }
    }






















    /**
     * Operation updateManagers
     *
     * Update Program Managers by ID.
     *
     * @param int $program_id ID of program to return object (required)
     *
     * @return Http response
     */
    public function updateManagers($program_id)
    {
        $form = Request::only(
            'managers'
            );

        try{
            $program = Program::findOrFail($program_id);
            $program->managers()->sync($form->managers);
            $response   =   Program::with("managers")->findOrFail($program_id);
           
            return response()->json(['msg'=>"Managers Updated", 'managers'=>$response], 200,array(),JSON_PRETTY_PRINT);
        }catch(Exception $e){
            $response =  ["error"=>"Something went wrong"];
            return response()->json($response, 500);
        }
    }
    




















    /**
     * Operation programsGet
     *
     * programs List.
     *
     *
     * @return Http response
     */
    public function programsGet()
    {
        $input = Request::all();
        //query builder
        $qb = Program::query();
        if (!array_key_exists('lean', $input)) {
            $qb = Program::with('managers', 'staffs');
        }
        

        $current_user = JWTAuth::parseToken()->authenticate();

        $total_records          = $qb->count();
        $records_filtered       = 0;

        //my_pm_assigned
        if(array_key_exists('my_pm_assigned', $input)&& $input['my_pm_assigned'] = "true"){

            $qb = $qb->whereHas('managers', function ($query) use ($current_user) {
                $query->where('program_manager_id', $current_user->id);
            });
            // $qb->select(DB::raw('programs.*'))
            //      ->rightJoin('program_managers', 'program_managers.program_id', '=', 'programs.id')
            //      ->rightJoin('staff', 'staff.id', '=', 'program_managers.program_manager_id')
            //      ->where('staff.id', '=', $current_user->id)
            //      ->whereNotNull('programs.id')
            //      ->groupBy('programs.id')
            //      ->orderBy('programs.program_name', 'asc');
        }

        // my assigned
        if (array_key_exists('my_assigned', $input)&& $input['my_assigned'] = "true") {
            if($current_user->hasRole(['program-manager'])){
                $program_ids = ProgramManager::where('program_manager_id', $current_user->id)->pluck('program_id')->toArray();
                $qb = $qb->whereIn('id', $program_ids);
            }
            else{
                $program_ids = ProgramStaff::where('staff_id', $current_user->id)->pluck('program_id')->toArray();
                $qb = $qb->whereIn('id', $program_ids);
                // $qb->select(DB::raw('programs.*'))
                // ->rightJoin('program_teams', 'program_teams.program_id', '=', 'programs.id')
                // ->rightJoin('staff', 'staff.id', '=', 'program_teams.staff_id')
                // ->where('staff.id', '=', $current_user->id)
                // ->whereNotNull('programs.id')
                // ->groupBy('programs.id');
            }            
        }

        //searching
        if(array_key_exists('searchval', $input)){
            $qb = $qb->where(function ($query) use ($input) {                
                $query->where('program_name','like', '%' . $input['searchval']. '%');
                $query->orWhere('program_desc','like', '%' . $input['searchval']. '%');

            });

            $records_filtered = $qb->count();
        }

        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction     = "asc";
            $order_column_name   = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }
            $qb = $qb->orderBy($order_column_name, $order_direction);
        }

        //limit
        if(array_key_exists('limit', $input)){
            $qb = $qb->limit($input['limit']);
        }

        if(array_key_exists('datatables', $input)){
            //searching
            $qb = $qb->where(function ($query) use ($input) {
                $query->where('program_name','like', '%' . $input['search']['value']. '%');
                $query->orWhere('program_desc','like', '%' . $input['search']['value']. '%');
            });

            $records_filtered = $qb->count();

            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){
                $qb = $qb->orderBy($order_column_name, $order_direction);
            }

            //limit $ offset
            if((int)$input['start']!= 0 ){
                $qb = $qb->limit($input['length'])->offset($input['start']);
            }else{
                $qb = $qb->limit($input['length']);
            }

            $response       = Program::arr_to_dt_response( 
                $qb->get(), $input['draw'],
                $total_records,
                $records_filtered
                );
        }
        else{
            $response = $qb->get();
        }

        return response()->json($response, 200);
    }
    




















    /**
     * Operation programManagersGet
     *
     * program managers List.
     *
     *
     * @return Http response
     */
    public function programManagersGet()
    {
        $input = Request::all();
        //query builder
        $qb = DB::table('program_managers')
            ->leftJoin('programs', 'program_managers.program_id', '=', 'programs.id')
            ->leftJoin('staff', 'program_managers.program_manager_id', '=', 'staff.id')
            ->select('program_managers.id', 'program_managers.program_manager_id', 'programs.program_name', 'programs.program_desc', 
                'staff.email', 'staff.f_name', 'staff.l_name')
            ->whereNull('program_managers.deleted_at');

        $current_user = JWTAuth::parseToken()->authenticate();

        $response;
        $response_dt;

        $total_records          = $qb->count();
        $records_filtered       = 0;

        //my_pm_assigned
        if(array_key_exists('my_pm_assigned', $input)&& $input['my_pm_assigned'] = "true"){
            $qb->select(DB::raw('programs.*'))
                 ->rightJoin('program_managers', 'program_managers.program_id', '=', 'programs.id')
                 ->rightJoin('staff', 'staff.id', '=', 'program_managers.program_manager_id')
                 ->where('staff.id', '=', $current_user->id)
                 ->whereNotNull('programs.id')
                 ->groupBy('programs.id')
                 ->orderBy('programs.program_name', 'asc');
        }

        //searching
        if(array_key_exists('searchval', $input)){
            $qb->where(function ($query) use ($input) {                
                $query->orWhere('programs.id','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('programs.program_name','like', '\'%' . $input['searchval']. '%\'');
                $query->orWhere('programs.program_desc','like', '\'%' . $input['searchval']. '%\'');
            });
        }

        //ordering
        if(array_key_exists('order_by', $input)&&$input['order_by']!=''){
            $order_direction     = "asc";
            $order_column_name   = $input['order_by'];
            if(array_key_exists('order_dir', $input)&&$input['order_dir']!=''){                
                $order_direction = $input['order_dir'];
            }
            $qb->orderBy($order_column_name, $order_direction);
        }

        //limit
        if(array_key_exists('limit', $input)){
            $qb->limit($input['limit']);
        }

        if(array_key_exists('datatables', $input)){
            //searching
            $qb->where(function ($query) use ($input) {                
                $query->orWhere('programs.id','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('programs.program_name','like', '\'%' . $input['search']['value']. '%\'');
                $query->orWhere('programs.program_desc','like', '\'%' . $input['search']['value']. '%\'');
            });

            //ordering
            $order_column_id    = (int) $input['order'][0]['column'];
            $order_column_name  = $input['columns'][$order_column_id]['order_by'];
            $order_direction    = $input['order'][0]['dir'];

            if($order_column_name!=''){
                $qb->orderBy($order_column_name, $order_direction);
            }

            //limit $ offset
            if((int)$input['start']!= 0 ){
                $response_dt    =   $qb->limit($input['length'])->offset($input['start']);
            }else{
                $qb->limit($input['length']);
            }

            $response_dt = $qb->get();
            $response_dt = json_decode(json_encode($response_dt), true);
            $response       = Program::arr_to_dt_response( 
                $response_dt, $input['draw'],
                $total_records,
                $records_filtered
                );
        }
        else{
            $response       = json_decode(json_encode($qb->get()), true);
            if(!array_key_exists('lean', $input)){
            }
        }

        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);
    }




















    public function append_relationships_objects($data = array()){
        foreach ($data as $key => $value) {
            $programs = Program::find($data[$key]['id']);
            $data[$key]['managers']                = $programs->managers;
            $data[$key]['staffs']                  = $programs->staffs;
        }

        return $data;
    }

    public function updateProgramTeam()
    {
        try{
            $form = Request::all();
            $program_id = $form['program_id'];
            $new_staff = $form['staff'];
            $old_staff = array();

            $program_team = DB::table('program_teams')->select('program_id', 'staff_id')->where('program_id', $program_id)->get();
            foreach($program_team as $team_member){
                array_push($old_staff, $team_member['staff_id']);
            }

            // Remove removed team members
            foreach($old_staff as $old){
                if(!in_array($old, $new_staff)){
                    DB::table('program_teams')->where('program_id', $program_id)->where('staff_id', $old)->delete();
                }
            }

            // Add new team members
            $insert_array = array();
            foreach($new_staff as $new){
                if(!in_array($new, $old_staff)){
                    $new_record = array('program_id'=>$program_id, 'staff_id'=>$new);
                    array_push($insert_array, array('program_id'=>$program_id, 'staff_id'=>$new));
                }
            }
            if(!empty($insert_array))
                DB::table('program_teams')->insert($insert_array);

            return Response()->json(array('msg' => 'Success: Program Team updated'), 200);
        }
        catch(\Exception $e){
            return response()->json(['error'=>'Something went wrong', 'msg'=>$e->getMessage()], 500);
        }
    }
}
