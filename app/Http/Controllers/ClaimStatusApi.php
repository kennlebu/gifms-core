<?php

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\DB;
use App\Models\ClaimsModels\ClaimStatus;
use App\Models\ClaimsModels\Claim;

class ClaimStatusApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

























    /**
     * Operation addClaimStatus
     *
     * Add a new claim_status.
     *
     *
     * @return Http response
     */
    public function addClaimStatus()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addClaimStatus');
        }
        $body = $input['body'];


        return response('How about implementing addClaimStatus as a POST method ?');
    }
























    /**
     * Operation updateClaimStatus
     *
     * Update an existing claim_status.
     *
     *
     * @return Http response
     */
    public function updateClaimStatus()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateClaimStatus');
        }
        $body = $input['body'];


        return response('How about implementing updateClaimStatus as a PUT method ?');
    }
























    /**
     * Operation deleteClaimStatus
     *
     * Deletes an claim_status.
     *
     * @param int $claim_status_id claim_status id to delete (required)
     *
     * @return Http response
     */
    public function deleteClaimStatus($claim_status_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteClaimStatus as a DELETE method ?');
    }
























    /**
     * Operation getClaimStatusById
     *
     * Find claim_status by ID.
     *
     * @param int $claim_status_id ID of claim_status to return object (required)
     *
     * @return Http response
     */
    public function getClaimStatusById($claim_status_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getClaimStatusById as a GET method ?');
    }
























    /**
     * Operation getClaimStatuses
     *
     * claim_statuses List.
     *
     *
     * @return Http response
     */
    public function getClaimStatuses()
    {
        
        $input = Request::all();
        $response;
        $qb = DB::table('claim_statuses');
        $qb->whereNull('deleted_at');


        if(array_key_exists('allowed_only', $input)){

            $qb = $this->get_my_allowed_statuses($qb);

        }else{

            $qb->orderBy('claim_status', 'DESC');
        }


        $response = $qb->get();
        $response = json_decode(json_encode($response),true);

      


        //count lpos on each status
        foreach ($response as $key => $value) {


            $response[$key]['claims_count'] = Claim::where('requested_by_id',$this->current_user()->id)
                                            ->where('status_id', $value['id'] )
                                            ->count();


        }

        //add -1 and -2 statuses

        if(array_key_exists('allowed_only', $input)){

            //-1
            $response[]=array(
                    "id"=> -1,
                    "claim_status"=> "My Claims",
                    "order_priority"=> 999,
                    "display_color"=> "#db6ad7",
                    "claims_count"=> Claim::where('requested_by_id',$this->current_user()->id)->count()
                  );



            //-1
            $response[]=array(
                    "id"=> -2,
                    "claim_status"=> "All Claims",
                    "order_priority"=> 1000,
                    "display_color"=> "#d4a93a",
                    "claims_count"=> Claim::count()
                  );

        }

        return response()->json($response, 200,array(),JSON_PRETTY_PRINT);

    }


    private function get_my_allowed_statuses($qb){


        $qb->orderBy('order_priority', 'ASC');

        return $qb;
    }
}
