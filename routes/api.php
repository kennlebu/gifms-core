<?php

use Illuminate\Http\Request;

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Grants Information Management System
 * @version 1.0.0
 */





Route::get('/', function (Request $request) {
    return ["version"=>"1.0.0"];
});



Route::post('/authenticate', [	'uses' => 'ApiAuthController@authenticate']);
Route::post('/authenticate_second_user', [	'uses' => 'ApiAuthController@authenticateSecondUser'])->middleware('jwt.auth');
Route::get('/get_authenticated_user', [	'uses' => 'ApiAuthController@getAuthenticatedUser'])->middleware('jwt.auth');
Route::post('/user_can', [	'uses' => 'ApiAuthController@userCan'])->middleware('jwt.auth');
Route::post('/user_has_role', [	'uses' => 'ApiAuthController@userHasRole'])->middleware('jwt.auth');
Route::post('/update_my_profile', [	'uses' => 'ApiAuthController@UpdateMyProfile'])->middleware('jwt.auth');
Route::post('/change_password', [	'uses' => 'ApiAuthController@changePassword'])->middleware('jwt.auth');
Route::post('/forgot_password', [	'uses' => 'ApiAuthController@forgotPassword']);



















/**
 * POST add
 * Summary: Add a new lpo request to the store
 * Notes: lpo awaits approvals from relevant parties
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo', 'LPOApi@add')->middleware('jwt.auth');
/**
 * PUT updateLpo
 * Summary: Update an existing LPO
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/lpo', 'LPOApi@updateLpo')->middleware('jwt.auth');
/**
 * DELETE deleteLpo
 * Summary: Deletes an lpo
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/lpo/{lpo_id}', 'LPOApi@deleteLpo')->middleware('jwt.auth');
/**
 * GET getLpoById
 * Summary: Find lpo by ID
 * Notes: Returns a single lpo
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo/{lpo_id}', 'LPOApi@getLpoById')->middleware('jwt.auth');
/**
 * PATCH submitOrApprove
 * Summary: Submits or Approves Lpo
 * Notes: Submits or Approves Lpo and returns the submitted/approved lpo
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('lpo/{lpo_id}', 'LPOApi@submitOrApprove')->middleware('jwt.auth');
/**
 * PATCH rejectLpo
 * Summary: Approve lpo by ID
 * Notes: Reject LPO
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/lpo/{lpo_id}/reject', 'LPOApi@rejectLpo')->middleware('jwt.auth');
/**
 * POST updateLpoWithForm
 * Summary: Updates a lpo with form data
 * Notes: updates each field when not set as null
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo/{lpo_id}', 'LPOApi@updateLpoWithForm')->middleware('jwt.auth');
/**
 * GET lposGet
 * Summary: lpo List
 * Notes: The Lpos endpoint returns information about the LPO requested give the parameters injected. The response includes the Reference-No and other details about each lpo, and lists the products in the proper display order. 

 */
Route::GET('/lpos', 'LPOApi@lposGet')->middleware('jwt.auth');

/**
 * GET getDocumentById
 * Summary: preview LPO document ID
 * Notes: Returns a single lpo document
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo/{lpo_id}/get_document', 'LPOApi@getDocumentById')->middleware('jwt.auth');
/**
 * PATCH allocateLpo
 * Summary: Allocate lpo by ID
 * Notes: Allocate LPO
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('lpo/{lpo_id}/allocate', 'LPOApi@allocateLpo')->middleware('jwt.auth');
/**
 * PATCH approveLpo
 * Summary: Approve lpo by ID
 * Notes: Approves LPO
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('lpo/{lpo_id}/approve', 'LPOApi@approveLpo')->middleware('jwt.auth');
/**
 * PATCH submitLpoForApproval
 * Summary: Submit lpo by ID
 * Notes: Submits lpo for approval
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('lpo/{lpo_id}/submit_for_approval', 'LPOApi@submitLpoForApproval')->middleware('jwt.auth');
/**
 * PATCH approveSeveralLpos
 * Summary: Approve several LPOs
 * Notes: Approve
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/api/lpos/approve', 'LPOApi@approveSeveralLpos')->middleware('jwt.auth');




















/**
 * POST addLpoDefaultTerm
 * Summary: Add a new lpo_default_term
 * Notes: new lpo_default_term
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo_default_term', 'LPODefaultTermApi@addLpoDefaultTerm')->middleware('jwt.auth');
/**
 * PUT updateLpoDefaultTerm
 * Summary: Update an existing lpo_default_term
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/lpo_default_term', 'LPODefaultTermApi@updateLpoDefaultTerm')->middleware('jwt.auth');
/**
 * DELETE deleteLpoDefaultTerm
 * Summary: Deletes an lpo_default_term
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/lpo_default_term/{lpo_default_term_id}', 'LPODefaultTermApi@deleteLpoDefaultTerm')->middleware('jwt.auth');
/**
 * GET getLpoDefaultTermById
 * Summary: Find lpo_default_term by ID
 * Notes: Returns a single lpo_default_term
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo_default_term/{lpo_default_term_id}', 'LPODefaultTermApi@getLpoDefaultTermById')->middleware('jwt.auth');
/**
 * GET lpoDefaultTermsGet
 * Summary: lpo_default_terms List
 * Notes: The lpo_default_term endpoint returns multiple lpo_default_term requested given the parameters injected.  

 */
Route::GET('/lpo_default_terms', 'LPODefaultTermApi@lpoDefaultTermsGet')->middleware('jwt.auth');




























/**
 * POST addLpoStatus
 * Summary: Add a new lpo status to the store
 * Notes: lpo status
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo_status', 'LPOStatusApi@addLpoStatus')->middleware('jwt.auth');
/**
 * PUT updateLpoStatus
 * Summary: Update an existing LPO Status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/lpo_status', 'LPOStatusApi@updateLpoStatus')->middleware('jwt.auth');
/**
 * DELETE deleteLpoStatus
 * Summary: Deletes an lpo_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/lpo_status/{lpo_status_id}', 'LPOStatusApi@deleteLpoStatus')->middleware('jwt.auth');
/**
 * GET getLpoStatusById
 * Summary: Find lpo by ID
 * Notes: Returns a single lpo
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo_status/{lpo_status_id}', 'LPOStatusApi@getLpoStatusById')->middleware('jwt.auth');
/**
 * GET lpoStatusesGet
 * Summary: lpo statuses List
 * Notes: The Lpo Statuses endpoint returns information about the LPO statuses requested give the parameters injected.  

 */
Route::GET('/lpo_statuses', 'LPOStatusApi@lpoStatusesGet')->middleware('jwt.auth');





























/**
 * POST addLpoQuotation
 * Summary: Add a new lpo quotation
 * Notes: new lpo quotaion
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo_quotation', 'LPOQuotationApi@addLpoQuotation')->middleware('jwt.auth');
/**
 * PUT updateLpoQuotation
 * Summary: Update an existing LPO Quotation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/lpo_quotation', 'LPOQuotationApi@updateLpoQuotation')->middleware('jwt.auth');
/**
 * DELETE deleteLpoQuotation
 * Summary: Deletes an lpo_quotation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/lpo_quotation/{lpo_quotation_id}', 'LPOQuotationApi@deleteLpoQuotation')->middleware('jwt.auth');
/**
 * GET getLpoQuotationById
 * Summary: Find lpo quotation by ID
 * Notes: Returns a single lpo quotation
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo_quotation/{lpo_quotation_id}', 'LPOQuotationApi@getLpoQuotationById')->middleware('jwt.auth');
/**
 * GET lpoQuotationsGet
 * Summary: lpo quotations List
 * Notes: The Lpo Quotations endpoint returns information about the LPO Quotation requested given the parameters injected.  

 */
Route::GET('/lpo_quotations', 'LPOQuotationApi@lpoQuotationsGet')->middleware('jwt.auth');
/**
 * GET getLpoQuotationDocumentById
 * Summary: Find lpo quotation document by ID
 * Notes: Returns a single lpo quotation document
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo_quotation/{lpo_quotation_id}/get_document', 'LPOQuotationApi@getLpoQuotationDocumentById')->middleware('jwt.auth');






















/**
 * POST addLpoItem
 * Summary: Add a new lpo item
 * Notes: new lpo item
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo_item', 'LPOItemApi@addLpoItem')->middleware('jwt.auth');
/**
 * PUT updateLpoItem
 * Summary: Update an existing LPO Item
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/lpo_item', 'LPOItemApi@updateLpoItem')->middleware('jwt.auth');
/**
 * DELETE deleteLpoItem
 * Summary: Deletes an lpo_item
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/lpo_item/{lpo_item_id}', 'LPOItemApi@deleteLpoItem')->middleware('jwt.auth');
/**
 * GET getLpoItemById
 * Summary: Find lpo item by ID
 * Notes: Returns a single lpo item
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo_item/{lpo_item_id}', 'LPOItemApi@getLpoItemById')->middleware('jwt.auth');
/**
 * GET lpoItemsGet
 * Summary: lpo items List
 * Notes: The Lpo Items endpoint returns information about the LPO Item requested given the parameters injected.  

 */
Route::GET('/lpo_items', 'LPOItemApi@lpoItemsGet')->middleware('jwt.auth');






























/**
 * POST addLpoTerm
 * Summary: Add a new lpo term
 * Notes: new lpo term
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo_term', 'LPOTermApi@addLpoTerm')->middleware('jwt.auth');
/**
 * PUT updateLpoTerm
 * Summary: Update an existing LPO Term
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/lpo_term', 'LPOTermApi@updateLpoTerm')->middleware('jwt.auth');
/**
 * DELETE deleteLpoTerm
 * Summary: Deletes an lpo_term
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/lpo_term/{lpo_term_id}', 'LPOTermApi@deleteLpoTerm')->middleware('jwt.auth');
/**
 * GET getLpoTermById
 * Summary: Find lpo term by ID
 * Notes: Returns a single lpo term
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo_term/{lpo_term_id}', 'LPOTermApi@getLpoTermById')->middleware('jwt.auth');
/**
 * GET lpoTermsGet
 * Summary: lpo terms List
 * Notes: The Lpo Terms endpoint returns information about the LPO Term requested given the parameters injected.  

 */
Route::GET('/lpo_terms', 'LPOTermApi@lpoTermsGet')->middleware('jwt.auth');


































/**
 * POST addLpoComment
 * Summary: Add a new lpo comment
 * Notes: new lpo comment
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo_comment', 'LPOCommentApi@addLpoComment')->middleware('jwt.auth');
/**
 * PUT updateLpoComment
 * Summary: Update an existing LPO Comment
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/lpo_comment', 'LPOCommentApi@updateLpoComment')->middleware('jwt.auth');
/**
 * DELETE deleteLpoComment
 * Summary: Deletes an lpo_comment
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/lpo_comment/{lpo_comment_id}', 'LPOCommentApi@deleteLpoComment')->middleware('jwt.auth');
/**
 * GET getLpoCommentById
 * Summary: Find lpo comment by ID
 * Notes: Returns a single lpo comment
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo_comment/{lpo_comment_id}', 'LPOCommentApi@getLpoCommentById')->middleware('jwt.auth');
/**
 * GET lpoCommentsGet
 * Summary: lpo comments List
 * Notes: The Lpo Comments endpoint returns information about the LPO Comment requested given the parameters injected.  

 */
Route::GET('/lpo_comments', 'LPOCommentApi@lpoCommentsGet')->middleware('jwt.auth');
























/**
 * POST addLpoApproval
 * Summary: Add a new lpo approval
 * Notes: new lpo approval
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo_approval', 'LPOApprovalApi@addLpoApproval')->middleware('jwt.auth');
/**
 * PUT updateLpoApproval
 * Summary: Update an existing LPO Approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/lpo_approval', 'LPOApprovalApi@updateLpoApproval')->middleware('jwt.auth');
/**
 * DELETE deleteLpoApproval
 * Summary: Deletes an lpo_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/lpo_approval/{lpo_approval_id}', 'LPOApprovalApi@deleteLpoApproval')->middleware('jwt.auth');
/**
 * GET getLpoApprovalById
 * Summary: Find lpo approval by ID
 * Notes: Returns a single lpo approval
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo_approval/{lpo_approval_id}', 'LPOApprovalApi@getLpoApprovalById')->middleware('jwt.auth');
/**
 * GET lpoApprovalsGet
 * Summary: lpo approvals List
 * Notes: The Lpo Approvals endpoint returns information about the LPO Approval requested given the parameters injected.  

 */
Route::GET('/lpo_approvals', 'LPOApprovalApi@lpoApprovalsGet')->middleware('jwt.auth');

























/**
 * POST addDepartment
 * Summary: Add a new department
 * Notes: new department
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/department', 'DepartmentApi@addDepartment')->middleware('jwt.auth');
/**
 * PUT updateDepartment
 * Summary: Update an existing department
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/department', 'DepartmentApi@updateDepartment')->middleware('jwt.auth');
/**
 * DELETE deleteDepartment
 * Summary: Deletes an department
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/department/{department_id}', 'DepartmentApi@deleteDepartment')->middleware('jwt.auth');
/**
 * GET getDepartmentById
 * Summary: Find department by ID
 * Notes: Returns a single department
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/department/{department_id}', 'DepartmentApi@getDepartmentById')->middleware('jwt.auth');
/**
 * GET departmentsGet
 * Summary: departments List
 * Notes: The department endpoint returns multiple department requested given the parameters injected.  

 */
Route::GET('/departments', 'DepartmentApi@departmentsGet')->middleware('jwt.auth');


























/**
 * POST addRight
 * Summary: Add a new right
 * Notes: new right
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/right', 'RightsApi@addRight')->middleware('jwt.auth');
/**
 * PUT updateRight
 * Summary: Update an existing right
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/right', 'RightsApi@updateRight')->middleware('jwt.auth');
/**
 * DELETE deleteRight
 * Summary: Deletes an right
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/right/{right_id}', 'RightsApi@deleteRight')->middleware('jwt.auth');
/**
 * GET getRightById
 * Summary: Find right by ID
 * Notes: Returns a single right
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/right/{right_id}', 'RightsApi@getRightById')->middleware('jwt.auth');
/**
 * GET rightsGet
 * Summary: rights List
 * Notes: The right endpoint returns multiple right requested given the parameters injected.  

 */
Route::GET('/rights', 'RightsApi@rightsGet')->middleware('jwt.auth');






































/**
 * POST addPermission
 * Summary: Add a new permission
 * Notes: new permission
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/permission', 'PermissionApi@addPermission')->middleware('jwt.auth');
/**
 * PUT updatePermission
 * Summary: Update an existing permission
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/permission', 'PermissionApi@updatePermission')->middleware('jwt.auth');
/**
 * DELETE deletePermission
 * Summary: Deletes an permission
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/permission/{permission_id}', 'PermissionApi@deletePermission')->middleware('jwt.auth');
/**
 * GET getPermissionById
 * Summary: Find permission by ID
 * Notes: Returns a single permission
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/permission/{permission_id}', 'PermissionApi@getPermissionById')->middleware('jwt.auth');
/**
 * GET permissionsGet
 * Summary: Permission List
 * Notes: The permission endpoint returns multiple permission requested given the parameters injected.  

 */
Route::GET('/permissions', 'PermissionApi@permissionsGet')->middleware('jwt.auth');




































/**
 * POST addRole
 * Summary: Add a new role
 * Notes: new role
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/role', 'RolesApi@addRole')->middleware('jwt.auth');
/**
 * PUT updateRole
 * Summary: Update an existing role
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/role', 'RolesApi@updateRole')->middleware('jwt.auth');
/**
 * DELETE deleteRole
 * Summary: Deletes an role
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/role/{role_id}', 'RolesApi@deleteRole')->middleware('jwt.auth');
/**
 * GET getRoleById
 * Summary: Find role by ID
 * Notes: Returns a single role
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/role/{role_id}', 'RolesApi@getRoleById')->middleware('jwt.auth');
/**
 * PATCH updateRolePermissions
 * Summary: Update Role Permissions by ID
 * Notes: Update Role Permissions
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/role/{role_id}/permissions', 'RolesApi@updateRolePermissions')->middleware('jwt.auth');
/**
 * GET rolesGet
 * Summary: roles List
 * Notes: The role endpoint returns multiple role requested given the parameters injected.  

 */
Route::GET('/roles', 'RolesApi@rolesGet')->middleware('jwt.auth');




































/**
 * POST addStaff
 * Summary: Add a new staff
 * Notes: new staff
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/staff', 'StaffApi@addStaff')->middleware('jwt.auth');
/**
 * PUT updateStaff
 * Summary: Update an existing staff
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/staff', 'StaffApi@updateStaff')->middleware('jwt.auth');
/**
 * DELETE deleteStaff
 * Summary: Deletes an staff
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/staff/{staff_id}', 'StaffApi@deleteStaff')->middleware('jwt.auth');
/**
 * GET getStaffById
 * Summary: Find staff by ID
 * Notes: Returns a single staff
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/staff/{staff_id}', 'StaffApi@getStaffById')->middleware('jwt.auth');
/**
 * PATCH updateStaffRoles
 * Summary: Updates Staff Roles by ID
 * Notes: Updates Staff Roles
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/staff/{staff_id}/roles', 'StaffApi@updateStaffRoles')->middleware('jwt.auth');
/**
 * GET staffsGet
 * Summary: staffs List
 * Notes: The staff endpoint returns multiple staff requested given the parameters injected.  

 */
Route::GET('/staffs', 'StaffApi@staffsGet')->middleware('jwt.auth');















/**
 * POST addProject
 * Summary: Add a new project
 * Notes: new project
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/project', 'ProjectApi@addProject')->middleware('jwt.auth');
/**
 * PUT updateProject
 * Summary: Update an existing project
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/project', 'ProjectApi@updateProject')->middleware('jwt.auth');
/**
 * DELETE deleteProject
 * Summary: Deletes an project
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/project/{project_id}', 'ProjectApi@deleteProject')->middleware('jwt.auth');
/**
 * GET getProjectById
 * Summary: Find project by ID
 * Notes: Returns a single project
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/project/{project_id}', 'ProjectApi@getProjectById')->middleware('jwt.auth');
/**
 * GET projectsGet
 * Summary: projects List
 * Notes: The project endpoint returns multiple project requested given the parameters injected.  

 */
Route::GET('/projects', 'ProjectApi@projectsGet')->middleware('jwt.auth');
/**
 * PATCH updateProjectTeamDef
 * Summary: Update Project Team by ID
 * Notes: Update Project Team
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/project/{project_id}/team', 'ProjectApi@updateProjectTeamDef')->middleware('jwt.auth');
/**
 * GET projectActivitiesGet
 * Summary: project_activities List
 * Notes: The project_activity endpoint returns multiple project_activity requested given the parameters injected.  

 */
Route::GET('/project_activities', 'ProjectActivityApi@projectActivitiesGet')->middleware('jwt.auth');





























/**
 * POST addProjectActivity
 * Summary: Add a new project_activity
 * Notes: new project_activity
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/project_activity', 'ProjectActivityApi@addProjectActivity')->middleware('jwt.auth');
/**
 * PUT updateProjectActivity
 * Summary: Update an existing project_activity
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/project_activity', 'ProjectActivityApi@updateProjectActivity')->middleware('jwt.auth');
/**
 * DELETE deleteProjectActivity
 * Summary: Deletes an project_activity
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/project_activity/{project_activity_id}', 'ProjectActivityApi@deleteProjectActivity')->middleware('jwt.auth');
/**
 * GET getProjectActivityById
 * Summary: Find project_activity by ID
 * Notes: Returns a single project_activity
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/project_activity/{project_activity_id}', 'ProjectActivityApi@getProjectActivityById')->middleware('jwt.auth');





























/**
 * POST addProjectBudgetAccount
 * Summary: Add a new project_budget_account
 * Notes: new project_budget_account
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/project_budget_account', 'ProjectBudgetAccountApi@addProjectBudgetAccount')->middleware('jwt.auth');
/**
 * PUT updateProjectBudgetAccount
 * Summary: Update an existing project_budget_account
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/project_budget_account', 'ProjectBudgetAccountApi@updateProjectBudgetAccount')->middleware('jwt.auth');
/**
 * DELETE deleteProjectBudgetAccount
 * Summary: Deletes an project_budget_account
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/project_budget_account/{project_budget_account_id}', 'ProjectBudgetAccountApi@deleteProjectBudgetAccount')->middleware('jwt.auth');
/**
 * GET getProjectBudgetAccountById
 * Summary: Find project_budget_account by ID
 * Notes: Returns a single project_budget_account
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/project_budget_account/{project_budget_account_id}', 'ProjectBudgetAccountApi@getProjectBudgetAccountById')->middleware('jwt.auth');
/**
 * GET projectBudgetAccountsGet
 * Summary: project_budget_accounts List
 * Notes: The project_budget_account endpoint returns multiple project_budget_account requested given the parameters injected.  

 */
Route::GET('/project_budget_accounts', 'ProjectBudgetAccountApi@projectBudgetAccountsGet')->middleware('jwt.auth');
































/**
 * POST addProjectCashNeed
 * Summary: Add a new project_cash_need
 * Notes: new project_cash_need
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/project_cash_need', 'ProjectCashNeedsApi@addProjectCashNeed')->middleware('jwt.auth');
/**
 * PUT updateProjectCashNeed
 * Summary: Update an existing project_cash_need
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/project_cash_need', 'ProjectCashNeedsApi@updateProjectCashNeed')->middleware('jwt.auth');
/**
 * DELETE deleteProjectCashNeed
 * Summary: Deletes an project_cash_need
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/project_cash_need/{project_cash_need_id}', 'ProjectCashNeedsApi@deleteProjectCashNeed')->middleware('jwt.auth');
/**
 * GET getProjectCashNeedById
 * Summary: Find project_cash_need by ID
 * Notes: Returns a single project_cash_need
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/project_cash_need/{project_cash_need_id}', 'ProjectCashNeedsApi@getProjectCashNeedById')->middleware('jwt.auth');
/**
 * GET projectCashNeedsGet
 * Summary: project_cash_needs List
 * Notes: The project_cash_need endpoint returns multiple project_cash_need requested given the parameters injected.  

 */
Route::GET('/project_cash_needs', 'ProjectCashNeedsApi@projectCashNeedsGet')->middleware('jwt.auth');































/**
 * POST addProjectMasterList
 * Summary: Add a new project_master_list
 * Notes: new project_master_list
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/project_master_list', 'ProjectMasterListApi@addProjectMasterList')->middleware('jwt.auth');
/**
 * PUT updateProjectMasterList
 * Summary: Update an existing project_master_list
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/project_master_list', 'ProjectMasterListApi@updateProjectMasterList')->middleware('jwt.auth');
/**
 * DELETE deleteProjectMasterList
 * Summary: Deletes an project_master_list
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/project_master_list/{project_master_list_id}', 'ProjectMasterListApi@deleteProjectMasterList')->middleware('jwt.auth');
/**
 * GET getProjectMasterListById
 * Summary: Find project_master_list by ID
 * Notes: Returns a single project_master_list
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/project_master_list/{project_master_list_id}', 'ProjectMasterListApi@getProjectMasterListById')->middleware('jwt.auth');
/**
 * GET projectMasterListsGet
 * Summary: project_master_lists List
 * Notes: The project_master_list endpoint returns multiple project_master_list requested given the parameters injected.  

 */
Route::GET('/project_master_lists', 'ProjectMasterListApi@projectMasterListsGet')->middleware('jwt.auth');

































/**
 * POST addProjectObjective
 * Summary: Add a new project_objective
 * Notes: new project_objective
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/project_objective', 'ProjectObjectiveApi@addProjectObjective')->middleware('jwt.auth');
/**
 * PUT updateProjectObjective
 * Summary: Update an existing project_objective
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/project_objective', 'ProjectObjectiveApi@updateProjectObjective')->middleware('jwt.auth');
/**
 * DELETE deleteProjectObjective
 * Summary: Deletes an project_objective
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/project_objective/{project_objective_id}', 'ProjectObjectiveApi@deleteProjectObjective')->middleware('jwt.auth');
/**
 * GET getProjectObjectiveById
 * Summary: Find project_objective by ID
 * Notes: Returns a single project_objective
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/project_objective/{project_objective_id}', 'ProjectObjectiveApi@getProjectObjectiveById')->middleware('jwt.auth');
/**
 * GET projectObjectivesGet
 * Summary: project_objectives List
 * Notes: The project_objective endpoint returns multiple project_objective requested given the parameters injected.  

 */
Route::GET('/project_objectives', 'ProjectObjectiveApi@projectObjectivesGet')->middleware('jwt.auth');






























/**
 * POST addProjectTeam
 * Summary: Add a new project_team
 * Notes: new project_team
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/project_team', 'ProjectTeamApi@addProjectTeam')->middleware('jwt.auth');
/**
 * PUT updateProjectTeam
 * Summary: Update an existing project_team
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/project_team', 'ProjectTeamApi@updateProjectTeam')->middleware('jwt.auth');
/**
 * DELETE deleteProjectTeam
 * Summary: Deletes an project_team
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/project_team/{project_team_id}', 'ProjectTeamApi@deleteProjectTeam')->middleware('jwt.auth');
/**
 * GET getProjectTeamById
 * Summary: Find project_team by ID
 * Notes: Returns a single project_team
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/project_team/{project_team_id}', 'ProjectTeamApi@getProjectTeamById')->middleware('jwt.auth');
/**
 * GET projectTeamsGet
 * Summary: project_teams List
 * Notes: The project_team endpoint returns multiple project_team requested given the parameters injected.  

 */
Route::GET('/project_teams', 'ProjectTeamApi@projectTeamsGet')->middleware('jwt.auth');


















/**
 * POST addSupplier
 * Summary: Add a new supplier
 * Notes: new supplier
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/supplier', 'SupplierApi@addSupplier')->middleware('jwt.auth');
/**
 * PUT updateSupplier
 * Summary: Update an existing supplier
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/supplier', 'SupplierApi@updateSupplier')->middleware('jwt.auth');
/**
 * DELETE deleteSupplier
 * Summary: Deletes an supplier
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/supplier/{supplier_id}', 'SupplierApi@deleteSupplier')->middleware('jwt.auth');
/**
 * GET getSupplierById
 * Summary: Find supplier by ID
 * Notes: Returns a single supplier
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/supplier/{supplier_id}', 'SupplierApi@getSupplierById')->middleware('jwt.auth');
/**
 * GET suppliersGet
 * Summary: suppliers List
 * Notes: The supplier endpoint returns multiple supplier requested given the parameters injected.  

 */
Route::GET('/suppliers', 'SupplierApi@suppliersGet')->middleware('jwt.auth');

































/**
 * POST addSupplierRate
 * Summary: Add a new supplier_rate
 * Notes: new supplier_rate
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/supplier_rate', 'SupplierRateApi@addSupplierRate')->middleware('jwt.auth');
/**
 * PUT updateSupplierRate
 * Summary: Update an existing supplier_rate
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/supplier_rate', 'SupplierRateApi@updateSupplierRate')->middleware('jwt.auth');
/**
 * DELETE deleteSupplierRate
 * Summary: Deletes an supplier_rate
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/supplier_rate/{supplier_rate_id}', 'SupplierRateApi@deleteSupplierRate')->middleware('jwt.auth');
/**
 * GET getSupplierRateById
 * Summary: Find supplier_rate by ID
 * Notes: Returns a single supplier_rate
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/supplier_rate/{supplier_rate_id}', 'SupplierRateApi@getSupplierRateById')->middleware('jwt.auth');
/**
 * GET supplierRatesGet
 * Summary: supplier_rates List
 * Notes: The supplier_rate endpoint returns multiple supplier_rate requested given the parameters injected.  

 */
Route::GET('/supplier_rates', 'SupplierRateApi@supplierRatesGet')->middleware('jwt.auth');






































/**
 * GET supplyCategoriesGet
 * Summary: supply_categories List
 * Notes: The supply_category endpoint returns multiple supply_category requested given the parameters injected.  

 */
Route::GET('/supply_categories', 'SupplyCategoryApi@supplyCategoriesGet')->middleware('jwt.auth');
/**
 * POST addSupplyCategory
 * Summary: Add a new supply_category
 * Notes: new supply_category
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/supply_category', 'SupplyCategoryApi@addSupplyCategory')->middleware('jwt.auth');
/**
 * PUT updateSupplyCategory
 * Summary: Update an existing supply_category
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/supply_category', 'SupplyCategoryApi@updateSupplyCategory')->middleware('jwt.auth');
/**
 * DELETE deleteSupplyCategory
 * Summary: Deletes an supply_category
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/supply_category/{supply_category_id}', 'SupplyCategoryApi@deleteSupplyCategory')->middleware('jwt.auth');
/**
 * GET getSupplyCategoryById
 * Summary: Find supply_category by ID
 * Notes: Returns a single supply_category
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/supply_category/{supply_category_id}', 'SupplyCategoryApi@getSupplyCategoryById')->middleware('jwt.auth');

































/**
 * POST addSupplyCategoryItem
 * Summary: Add a new supply_category_item
 * Notes: new supply_category_item
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/supply_category_item', 'SupplyCategoryItemApi@addSupplyCategoryItem')->middleware('jwt.auth');
/**
 * PUT updateSupplyCategoryItem
 * Summary: Update an existing supply_category_item
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/supply_category_item', 'SupplyCategoryItemApi@updateSupplyCategoryItem')->middleware('jwt.auth');
/**
 * DELETE deleteSupplyCategoryItem
 * Summary: Deletes an supply_category_item
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/supply_category_item/{supply_category_item_id}', 'SupplyCategoryItemApi@deleteSupplyCategoryItem')->middleware('jwt.auth');
/**
 * GET getSupplyCategoryItemById
 * Summary: Find supply_category_item by ID
 * Notes: Returns a single supply_category_item
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/supply_category_item/{supply_category_item_id}', 'SupplyCategoryItemApi@getSupplyCategoryItemById')->middleware('jwt.auth');
/**
 * GET supplyCategoryItemsGet
 * Summary: supply_category_items List
 * Notes: The supply_category_item endpoint returns multiple supply_category_item requested given the parameters injected.  

 */
Route::GET('/supply_category_items', 'SupplyCategoryItemApi@supplyCategoryItemsGet')->middleware('jwt.auth');



























/**
 * GET currenciesGet
 * Summary: currencies List
 * Notes: The currency endpoint returns multiple currency requested given the parameters injected.  

 */
Route::GET('/currencies', 'CurrencyApi@currenciesGet')->middleware('jwt.auth');
/**
 * POST addCurrency
 * Summary: Add a new currency
 * Notes: new currency
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/currency', 'CurrencyApi@addCurrency')->middleware('jwt.auth');
/**
 * PUT updateCurrency
 * Summary: Update an existing currency
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/currency', 'CurrencyApi@updateCurrency')->middleware('jwt.auth');
/**
 * DELETE deleteCurrency
 * Summary: Deletes an currency
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/currency/{currency_id}', 'CurrencyApi@deleteCurrency')->middleware('jwt.auth');
/**
 * GET getCurrencyById
 * Summary: Find currency by ID
 * Notes: Returns a single currency
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/currency/{currency_id}', 'CurrencyApi@getCurrencyById')->middleware('jwt.auth');






















/**
 * POST addMobilePayment
 * Summary: Add a new mobile_payment
 * Notes: new mobile_payment
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/mobile_payment', 'MobilePaymentApi@addMobilePayment')->middleware('jwt.auth');
/**
 * PUT updateMobilePayment
 * Summary: Update an existing mobile_payment
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/mobile_payment', 'MobilePaymentApi@updateMobilePayment')->middleware('jwt.auth');
/**
 * GET getMobilePaymentById
 * Summary: Find mobile_payment by ID
 * Notes: Returns a single mobile_payment
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/mobile_payment/{mobile_payment_id}', 'MobilePaymentApi@getMobilePaymentById')->middleware('jwt.auth');
/**
 * PATCH approve
 * Summary: Submit/Approve mobile_payment by ID
 * Notes: Approves Mobile Payment
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/mobile_payment/{mobile_payment_id}/approve', 'MobilePaymentApi@approve')->middleware('jwt.auth');
/**
 * POST postPayees
 * Summary: post mobile_payment payees in acsv by ID
 * Notes: get Mobile Payment Attendance Sheet
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/mobile_payment/{mobile_payment_id}/payees', 'MobilePaymentApi@postPayees')->middleware('jwt.auth');
/**
 * PATCH reject
 * Summary: Submit/Approve mobile_payment by ID
 * Notes: Reject Mobile Payment
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/mobile_payment/{mobile_payment_id}/reject', 'MobilePaymentApi@reject')->middleware('jwt.auth');
/**
 * DELETE deleteMobilePayment
 * Summary: Deletes an mobile_payment
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/mobile_payment/{mobile_payment_id}', 'MobilePaymentApi@deleteMobilePayment')->middleware('jwt.auth');
/**
 * PATCH submitForApproval
 * Summary: Submit mobile_payment by ID
 * Notes: Submits
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/mobile_payment/{mobile_payment_id}/submit_for_approval', 'MobilePaymentApi@submitForApproval')->middleware('jwt.auth');
/**
 * GET mobilePaymentsGet
 * Summary: mobile_payments List
 * Notes: The mobile_payment endpoint returns multiple mobile_payment requested given the parameters injected.  

 */
Route::GET('/mobile_payments', 'MobilePaymentApi@mobilePaymentsGet')->middleware('jwt.auth');
/**
 * PATCH allocateMobilePayment
 * Summary: Allocate mobile_payment by ID
 * Notes: Allocate Mobile Payment
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/mobile_payment/{mobile_payment_id}/allocate', 'MobilePaymentApi@allocateMobilePayment')->middleware('jwt.auth');
/**
 * GET getDocumentById
 * Summary: get mobile_payment document by ID
 * Notes: get Mobile Payment Document
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/mobile_payment/{mobile_payment_id}/get_document', 'MobilePaymentApi@getDocumentById')->middleware('jwt.auth');
/**
 * GET getAttendanceSheetById
 * Summary: get mobile_payment document by ID
 * Notes: get Mobile Payment Attendance Sheet
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/mobile_payment/{mobile_payment_id}/get_attendance_sheet', 'MobilePaymentApi@getAttendanceSheetById')->middleware('jwt.auth');
/**
 * PATCH approveSeveralMobilePayments
 * Summary: Approve several Mobile Payments
 * Notes: Approve
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/mobile_payments/approve', 'MobilePaymentApi@approveSeveralMobilePayments')->middleware('jwt.auth');
/**
 * GET getTemplate
 * Summary: Mobile Payments Template
 * Notes: Template
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/mobile_payments/template', 'MobilePaymentApi@getTemplate')->middleware('jwt.auth');
























/**
 * POST addMobilePaymentApproval
 * Summary: Add a new mobile_payment_approval
 * Notes: new mobile_payment_approval
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/mobile_payment_approval', 'MobilePaymentApprovalApi@addMobilePaymentApproval')->middleware('jwt.auth');
/**
 * PUT updateMobilePaymentApproval
 * Summary: Update an existing mobile_payment_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/mobile_payment_approval', 'MobilePaymentApprovalApi@updateMobilePaymentApproval')->middleware('jwt.auth');
/**
 * DELETE deleteMobilePaymentApproval
 * Summary: Deletes an mobile_payment_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/mobile_payment_approval/{mobile_payment_approval_id}', 'MobilePaymentApprovalApi@deleteMobilePaymentApproval')->middleware('jwt.auth');
/**
 * GET getMobilePaymentApprovalById
 * Summary: Find mobile_payment_approval by ID
 * Notes: Returns a single mobile_payment_approval
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/mobile_payment_approval/{mobile_payment_approval_id}', 'MobilePaymentApprovalApi@getMobilePaymentApprovalById')->middleware('jwt.auth');
/**
 * GET mobilePaymentApprovalsGet
 * Summary: mobile_payment_approvals List
 * Notes: The mobile_payment_approval endpoint returns multiple mobile_payment_approval requested given the parameters injected.  

 */
Route::GET('/mobile_payment_approvals', 'MobilePaymentApprovalApi@mobilePaymentApprovalsGet')->middleware('jwt.auth');




















/**
 * POST addMobilePaymentAllocation
 * Summary: Add a new mobile_payment_allocation
 * Notes: new mobile_payment_allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/mobile_payment_allocation', 'MobilePaymentAllocationApi@addMobilePaymentAllocation')->middleware('jwt.auth');
/**
 * PUT updateMobilePaymentAllocation
 * Summary: Update an existing mobile_payment_allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/mobile_payment_allocation', 'MobilePaymentAllocationApi@updateMobilePaymentAllocation')->middleware('jwt.auth');
/**
 * DELETE deleteMobilePaymentAllocation
 * Summary: Deletes an mobile_payment_allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/mobile_payment_allocation/{mobile_payment_allocation_id}', 'MobilePaymentAllocationApi@deleteMobilePaymentAllocation')->middleware('jwt.auth');
/**
 * GET getMobilePaymentAllocationById
 * Summary: Find mobile_payment_allocation by ID
 * Notes: Returns a single mobile_payment_allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/mobile_payment_allocation/{mobile_payment_allocation_id}', 'MobilePaymentAllocationApi@getMobilePaymentAllocationById')->middleware('jwt.auth');
/**
 * GET mobilePaymentAllocationsGet
 * Summary: mobile_payment_allocations List
 * Notes: The mobile_payment_allocation endpoint returns multiple mobile_payment_allocation requested given the parameters injected.  

 */
Route::GET('/mobile_payment_allocations', 'MobilePaymentAllocationApi@mobilePaymentAllocationsGet')->middleware('jwt.auth');


















/**
 * POST addMobilePaymentPayee
 * Summary: Add a new mobile_payment_payee
 * Notes: new mobile_payment_payee
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/mobile_payment_payee', 'MobilePaymentPayeeApi@addMobilePaymentPayee')->middleware('jwt.auth');
/**
 * PUT updateMobilePaymentPayee
 * Summary: Update an existing mobile_payment_payee
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/mobile_payment_payee', 'MobilePaymentPayeeApi@updateMobilePaymentPayee')->middleware('jwt.auth');
/**
 * DELETE deleteMobilePaymentPayee
 * Summary: Deletes an mobile_payment_payee
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/mobile_payment_payee/{mobile_payment_payee_id}', 'MobilePaymentPayeeApi@deleteMobilePaymentPayee')->middleware('jwt.auth');
/**
 * GET getMobilePaymentPayeeById
 * Summary: Find mobile_payment_payee by ID
 * Notes: Returns a single mobile_payment_payee
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/mobile_payment_payee/{mobile_payment_payee_id}', 'MobilePaymentPayeeApi@getMobilePaymentPayeeById')->middleware('jwt.auth');
/**
 * GET mobilePaymentPayeesGet
 * Summary: mobile_payment_payees List
 * Notes: The mobile_payment_payee endpoint returns multiple mobile_payment_payees requested given the parameters injected.  

 */
Route::GET('/mobile_payment_payees', 'MobilePaymentPayeeApi@mobilePaymentPayeesGet')->middleware('jwt.auth');










































/**
 * POST addMobilePaymentStatus
 * Summary: Add a new mobile_payment_status
 * Notes: new mobile_payment_status
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/mobile_payment_status', 'MobilePaymentStatusApi@addMobilePaymentStatus')->middleware('jwt.auth');
/**
 * PUT updateMobilePaymentStatus
 * Summary: Update an existing mobile_payment_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/mobile_payment_status', 'MobilePaymentStatusApi@updateMobilePaymentStatus')->middleware('jwt.auth');
/**
 * DELETE deleteMobilePaymentStatus
 * Summary: Deletes an mobile_payment_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/mobile_payment_status/{mobile_payment_status_id}', 'MobilePaymentStatusApi@deleteMobilePaymentStatus')->middleware('jwt.auth');
/**
 * GET getMobilePaymentStatusById
 * Summary: Find mobile_payment_status by ID
 * Notes: Returns a single mobile_payment_status
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/mobile_payment_status/{mobile_payment_status_id}', 'MobilePaymentStatusApi@getMobilePaymentStatusById')->middleware('jwt.auth');
/**
 * GET mobilePaymentStatusesGet
 * Summary: mobile_payment_statuses List
 * Notes: The mobile_payment_status endpoint returns multiple mobile_payment_status requested given the parameters injected.  

 */
Route::GET('/mobile_payment_statuses', 'MobilePaymentStatusApi@mobilePaymentStatusesGet')->middleware('jwt.auth');
































/**
 * POST addMobilePaymentTariff
 * Summary: Add a new mobile_payment_tariff
 * Notes: new mobile_payment_tariff
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/mobile_payment_tariff', 'MobilePaymentTariffApi@addMobilePaymentTariff')->middleware('jwt.auth');
/**
 * PUT updateMobilePaymentTariff
 * Summary: Update an existing mobile_payment_tariff
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/mobile_payment_tariff', 'MobilePaymentTariffApi@updateMobilePaymentTariff')->middleware('jwt.auth');
/**
 * DELETE deleteMobilePaymentTariff
 * Summary: Deletes an mobile_payment_tariff
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/mobile_payment_tariff/{mobile_payment_tariff_id}', 'MobilePaymentTariffApi@deleteMobilePaymentTariff')->middleware('jwt.auth');
/**
 * GET getMobilePaymentTariffById
 * Summary: Find mobile_payment_tariff by ID
 * Notes: Returns a single mobile_payment_tariff
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/mobile_payment_tariff/{mobile_payment_tariff_id}', 'MobilePaymentTariffApi@getMobilePaymentTariffById')->middleware('jwt.auth');
/**
 * GET mobilePaymentTariffsGet
 * Summary: mobile_payment_tariffs List
 * Notes: The mobile_payment_tariff endpoint returns multiple mobile_payment_tariff requested given the parameters injected.  

 */
Route::GET('/mobile_payment_tariffs', 'MobilePaymentTariffApi@mobilePaymentTariffsGet')->middleware('jwt.auth');








































/**
 * POST addMobilePaymentType
 * Summary: Add a new mobile_payment_type
 * Notes: new mobile_payment_type
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/mobile_payment_type', 'MobilePaymentTypeApi@addMobilePaymentType')->middleware('jwt.auth');
/**
 * PUT updateMobilePaymentType
 * Summary: Update an existing mobile_payment_type
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/mobile_payment_type', 'MobilePaymentTypeApi@updateMobilePaymentType')->middleware('jwt.auth');
/**
 * DELETE deleteMobilePaymentType
 * Summary: Deletes an mobile_payment_type
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/mobile_payment_type/{mobile_payment_type_id}', 'MobilePaymentTypeApi@deleteMobilePaymentType')->middleware('jwt.auth');
/**
 * GET getMobilePaymentTypeById
 * Summary: Find mobile_payment_type by ID
 * Notes: Returns a single mobile_payment_type
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/mobile_payment_type/{mobile_payment_type_id}', 'MobilePaymentTypeApi@getMobilePaymentTypeById')->middleware('jwt.auth');
/**
 * GET mobilePaymentTypesGet
 * Summary: mobile_payment_types List
 * Notes: The mobile_payment_type endpoint returns multiple mobile_payment_type requested given the parameters injected.  

 */
Route::GET('/mobile_payment_types', 'MobilePaymentTypeApi@mobilePaymentTypesGet')->middleware('jwt.auth');












/**
 * POST addPayeesUploadMode
 * Summary: Add a new payees_upload_mode
 * Notes: new payees_upload_mode
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/payees_upload_mode', 'PayeesUploadModeApi@addPayeesUploadMode')->middleware('jwt.auth');
/**
 * PUT updatePayeesUploadMode
 * Summary: Update an existing payees_upload_mode
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/payees_upload_mode', 'PayeesUploadModeApi@updatePayeesUploadMode')->middleware('jwt.auth');
/**
 * DELETE deletePayeesUploadMode
 * Summary: Deletes an payees_upload_mode
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/payees_upload_mode/{payees_upload_mode_id}', 'PayeesUploadModeApi@deletePayeesUploadMode')->middleware('jwt.auth');
/**
 * GET getPayeesUploadModeById
 * Summary: Find payees_upload_mode by ID
 * Notes: Returns a single payees_upload_mode
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/payees_upload_mode/{payees_upload_mode_id}', 'PayeesUploadModeApi@getPayeesUploadModeById')->middleware('jwt.auth');
/**
 * GET getPayeesUploadModes
 * Summary: payees_upload_modes List
 * Notes: The payees_upload_mode endpoint returns multiple payees_upload_mode requested given the parameters injected.  

 */
Route::GET('/payees_upload_modes', 'PayeesUploadModeApi@getPayeesUploadModes')->middleware('jwt.auth');











/**
 * POST addAccount
 * Summary: Add a new account
 * Notes: new account
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/account', 'AccountApi@addAccount')->middleware('jwt.auth');
/**
 * PUT updateAccount
 * Summary: Update an existing account
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/account', 'AccountApi@updateAccount')->middleware('jwt.auth');
/**
 * DELETE deleteAccount
 * Summary: Deletes an account
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/account/{account_id}', 'AccountApi@deleteAccount')->middleware('jwt.auth');
/**
 * GET getAccountById
 * Summary: Find account by ID
 * Notes: Returns a single account
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/account/{account_id}', 'AccountApi@getAccountById')->middleware('jwt.auth');
/**
 * GET accountsGet
 * Summary: accounts List
 * Notes: The account endpoint returns multiple account requested given the parameters injected.  

 */
Route::GET('/accounts', 'AccountApi@accountsGet')->middleware('jwt.auth');

























/**
 * POST addClaim
 * Summary: Add a new claim
 * Notes: new claim
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/claim', 'ClaimApi@addClaim')->middleware('jwt.auth');
/**
 * PUT updateClaim
 * Summary: Update an existing claim
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/claim', 'ClaimApi@updateClaim')->middleware('jwt.auth');
/**
 * DELETE deleteClaim
 * Summary: Deletes an claim
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/claim/{claim_id}', 'ClaimApi@deleteClaim')->middleware('jwt.auth');
/**
 * GET getClaimById
 * Summary: Find claim by ID
 * Notes: Returns a single claim
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/claim/{claim_id}', 'ClaimApi@getClaimById')->middleware('jwt.auth');
/**
 * PATCH allocateClaim
 * Summary: Allocate claim by ID
 * Notes: Allocate Claim
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/claim/{claim_id}/allocate', 'ClaimApi@allocateClaim')->middleware('jwt.auth');
/**
 * PATCH approveClaim
 * Summary: Approve claim by ID
 * Notes: Approves Claim
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/claim/{claim_id}/approve', 'ClaimApi@approveClaim')->middleware('jwt.auth');
/**
 * PATCH rejectClaim
 * Summary: Reject claim by ID
 * Notes: Approves Claim
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/claim/{claim_id}/reject', 'ClaimApi@rejectClaim')->middleware('jwt.auth');
/**
 * GET getDocumentById
 * Summary: get claim document by ID
 * Notes: get Claim document
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/claim/{claim_id}/get_document', 'ClaimApi@getDocumentById')->middleware('jwt.auth');
/**
 * PATCH submitClaimForApproval
 * Summary: Submit claim by ID
 * Notes: Submits claim for approval
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/claim/{claim_id}/submit_for_approval', 'ClaimApi@submitClaimForApproval')->middleware('jwt.auth');
/**
 * GET getClaims
 * Summary: claims List
 * Notes: The claim endpoint returns multiple claim requested given the parameters injected.  

 */
Route::GET('/claims', 'ClaimApi@getClaims')->middleware('jwt.auth');
/**
 * PATCH approveSeveralClaims
 * Summary: Approve several Claims
 * Notes: Approve
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/claims/approve', 'ClaimApi@approveSeveralClaims')->middleware('jwt.auth');

























/**
 * POST addClaimStatus
 * Summary: Add a new claim_status
 * Notes: new claim_status
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/claim_status', 'ClaimStatusApi@addClaimStatus')->middleware('jwt.auth');
/**
 * PUT updateClaimStatus
 * Summary: Update an existing claim_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/claim_status', 'ClaimStatusApi@updateClaimStatus')->middleware('jwt.auth');
/**
 * DELETE deleteClaimStatus
 * Summary: Deletes an claim_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/claim_status/{claim_status_id}', 'ClaimStatusApi@deleteClaimStatus')->middleware('jwt.auth');
/**
 * GET getClaimStatusById
 * Summary: Find claim_status by ID
 * Notes: Returns a single claim_status
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/claim_status/{claim_status_id}', 'ClaimStatusApi@getClaimStatusById')->middleware('jwt.auth');
/**
 * GET getClaimStatuses
 * Summary: claim_statuses List
 * Notes: The claim_status endpoint returns multiple claim_status requested given the parameters injected.  

 */
Route::GET('/claim_statuses', 'ClaimStatusApi@getClaimStatuses')->middleware('jwt.auth');















/**
 * POST addClaimApproval
 * Summary: Add a new claim_approval
 * Notes: new claim_approval
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/claim_approval', 'ClaimApprovalApi@addClaimApproval')->middleware('jwt.auth');
/**
 * PUT updateClaimApproval
 * Summary: Update an existing claim_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/claim_approval', 'ClaimApprovalApi@updateClaimApproval')->middleware('jwt.auth');
/**
 * DELETE deleteClaimApproval
 * Summary: Deletes an claim_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/claim_approval/{claim_approval_id}', 'ClaimApprovalApi@deleteClaimApproval')->middleware('jwt.auth');
/**
 * GET getClaimApprovalById
 * Summary: Find claim_approval by ID
 * Notes: Returns a single claim_approval
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/claim_approval/{claim_approval_id}', 'ClaimApprovalApi@getClaimApprovalById')->middleware('jwt.auth');
/**
 * GET getClaimApprovals
 * Summary: claim_approvals List
 * Notes: The claim_approval endpoint returns multiple claim_approval requested given the parameters injected.  

 */
Route::GET('/claim_approvals', 'ClaimApprovalApi@getClaimApprovals')->middleware('jwt.auth');






















/**
 * POST addClaimAllocation
 * Summary: Add a new claim_allocation
 * Notes: new claim_allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/claim_allocation', 'ClaimAllocationApi@addClaimAllocation')->middleware('jwt.auth');
/**
 * PUT updateClaimAllocation
 * Summary: Update an existing claim_allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/claim_allocation', 'ClaimAllocationApi@updateClaimAllocation')->middleware('jwt.auth');
/**
 * DELETE deleteClaimAllocation
 * Summary: Deletes an claim_allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/claim_allocation/{claim_allocation_id}', 'ClaimAllocationApi@deleteClaimAllocation')->middleware('jwt.auth');
/**
 * GET getClaimAllocationById
 * Summary: Find claim_allocation by ID
 * Notes: Returns a single claim_allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/claim_allocation/{claim_allocation_id}', 'ClaimAllocationApi@getClaimAllocationById')->middleware('jwt.auth');
/**
 * GET claimAllocationsGet
 * Summary: claim_allocations List
 * Notes: The claim_allocation endpoint returns multiple claim_allocation requested given the parameters injected.  

 */
Route::GET('/claim_allocations', 'ClaimAllocationApi@claimAllocationsGet')->middleware('jwt.auth');



























/**
 * POST addAdvance
 * Summary: Add a new advance
 * Notes: new advance
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/advance', 'AdvanceApi@addAdvance')->middleware('jwt.auth');
/**
 * PUT updateAdvance
 * Summary: Update an existing advance
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/advance/update', 'AdvanceApi@updateAdvance')->middleware('jwt.auth');
/**
 * DELETE deleteAdvance
 * Summary: Deletes an advance
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/advance/{advance_id}', 'AdvanceApi@deleteAdvance')->middleware('jwt.auth');
/**
 * GET getAdvanceById
 * Summary: Find advance by ID
 * Notes: Returns a single advance
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/advance/{advance_id}', 'AdvanceApi@getAdvanceById')->middleware('jwt.auth');
/**
 * PATCH approveAdvance
 * Summary: Approve advance by ID
 * Notes: Approves Advance
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/advance/{advance_id}/approve', 'AdvanceApi@approveAdvance')->middleware('jwt.auth');
/**
 * PATCH rejectAdvance
 * Summary: Approve advance by ID
 * Notes: Rejects Advance
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/advance/{advance_id}/reject', 'AdvanceApi@rejectAdvance')->middleware('jwt.auth');
/**
 * PATCH submitAdvanceForApproval
 * Summary: Submit advance by ID
 * Notes: Submits advance for approval
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/advance/{advance_id}/submit_for_approval', 'AdvanceApi@submitAdvanceForApproval')->middleware('jwt.auth');
/**
 * GET getAdvances
 * Summary: advances List
 * Notes: The advance endpoint returns multiple advance requested given the parameters injected.  

 */
Route::GET('/advances', 'AdvanceApi@getAdvances')->middleware('jwt.auth');
/**
 * PATCH approveSeveralAdvances
 * Summary: Approve several Advances
 * Notes: Approve
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/advances/approve', 'AdvanceApi@approveSeveralAdvances')->middleware('jwt.auth');
/**
 * GET getAdvanceDocumentById
 * Summary: preview advance document by ID
 * Notes: Returns a single advance document
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/advance/{advance_id}/get_document', 'AdvanceApi@getAdvanceDocumentById')->middleware('jwt.auth');























/**
 * POST addAdvanceApproval
 * Summary: Add a new advance_approval
 * Notes: new advance_approval
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/advance_approval', 'AdvanceApprovalApi@addAdvanceApproval')->middleware('jwt.auth');
/**
 * PUT updateAdvanceApproval
 * Summary: Update an existing advance_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/advance_approval', 'AdvanceApprovalApi@updateAdvanceApproval')->middleware('jwt.auth');
/**
 * DELETE deleteAdvanceApproval
 * Summary: Deletes an advance_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/advance_approval/{advance_approval_id}', 'AdvanceApprovalApi@deleteAdvanceApproval')->middleware('jwt.auth');
/**
 * GET getAdvanceApprovalById
 * Summary: Find advance_approval by ID
 * Notes: Returns a single advance_approval
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/advance_approval/{advance_approval_id}', 'AdvanceApprovalApi@getAdvanceApprovalById')->middleware('jwt.auth');
/**
 * GET getAdvanceApprovals
 * Summary: advance_approvals List
 * Notes: The advance_approval endpoint returns multiple advance_approval requested given the parameters injected.  

 */
Route::GET('/advance_approvals', 'AdvanceApprovalApi@getAdvanceApprovals')->middleware('jwt.auth');























/**
 * POST addAdvanceAllocation
 * Summary: Add a new advance_allocation
 * Notes: new advance_allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/advance_allocation', 'AdvanceAllocationApi@addAdvanceAllocation')->middleware('jwt.auth');
/**
 * PUT updateAdvanceAllocation
 * Summary: Update an existing advance_allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/advance_allocation', 'AdvanceAllocationApi@updateAdvanceAllocation')->middleware('jwt.auth');
/**
 * DELETE deleteAdvanceAllocation
 * Summary: Deletes an advance_allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/advance_allocation/{advance_allocation_id}', 'AdvanceAllocationApi@deleteAdvanceAllocation')->middleware('jwt.auth');
/**
 * GET getAdvanceAllocationById
 * Summary: Find advance_allocation by ID
 * Notes: Returns a single advance_allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/advance_allocation/{advance_allocation_id}', 'AdvanceAllocationApi@getAdvanceAllocationById')->middleware('jwt.auth');
/**
 * GET advanceAllocationsGet
 * Summary: advance_allocations List
 * Notes: The advance_allocation endpoint returns multiple advance_allocation requested given the parameters injected.  

 */
Route::GET('/advance_allocations', 'AdvanceAllocationApi@advanceAllocationsGet')->middleware('jwt.auth');



















/**
 * POST addAdvanceStatus
 * Summary: Add a new advance_status
 * Notes: new advance_status
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/advance_status', 'AdvanceStatusApi@addAdvanceStatus')->middleware('jwt.auth');
/**
 * PUT updateAdvanceStatus
 * Summary: Update an existing advance_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/advance_status', 'AdvanceStatusApi@updateAdvanceStatus')->middleware('jwt.auth');
/**
 * DELETE deleteAdvanceStatus
 * Summary: Deletes an advance_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/advance_status/{advance_status_id}', 'AdvanceStatusApi@deleteAdvanceStatus')->middleware('jwt.auth');
/**
 * GET getAdvanceStatusById
 * Summary: Find advance_status by ID
 * Notes: Returns a single advance_status
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/advance_status/{advance_status_id}', 'AdvanceStatusApi@getAdvanceStatusById')->middleware('jwt.auth');
/**
 * GET getAdvanceStatuses
 * Summary: advance_statuses List
 * Notes: The advance_status endpoint returns multiple advance_status requested given the parameters injected.  

 */
Route::GET('/advance_statuses', 'AdvanceStatusApi@getAdvanceStatuses')->middleware('jwt.auth');















/**
 * POST addInvoice
 * Summary: Add a new invoice
 * Notes: new invoice
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/invoice', 'InvoiceApi@addInvoice')->middleware('jwt.auth');
/**
 * PUT updateInvoice
 * Summary: Update an existing invoice
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/invoice/update', 'InvoiceApi@updateInvoice')->middleware('jwt.auth');
/**
 * DELETE deleteInvoice
 * Summary: Deletes an invoice
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/invoice/{invoice_id}', 'InvoiceApi@deleteInvoice')->middleware('jwt.auth');
/**
 * GET getInvoiceById
 * Summary: Find invoice by ID
 * Notes: Returns a single invoice
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/invoice/{invoice_id}', 'InvoiceApi@getInvoiceById')->middleware('jwt.auth');
/**
 * PATCH allocateInvoice
 * Summary: Allocate invoice by ID
 * Notes: Allocate Invoice
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/invoice/{invoice_id}/allocate', 'InvoiceApi@allocateInvoice')->middleware('jwt.auth');
/**
 * PATCH rejectInvoice
 * Summary: Reject invoice by ID
 * Notes: Approves Invoice
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/invoice/{invoice_id}/reject', 'InvoiceApi@rejectInvoice')->middleware('jwt.auth');
/**
 * PATCH approveInvoice
 * Summary: Approve invoice by ID
 * Notes: Approves Invoice
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/invoice/{invoice_id}/approve', 'InvoiceApi@approveInvoice')->middleware('jwt.auth');
/**
 * GET getDocumentById
 * Summary: get invoice document by ID
 * Notes: get Invoice document
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/invoice/{invoice_id}/get_document', 'InvoiceApi@getDocumentById')->middleware('jwt.auth');
/**
 * GET getPaymentVoucherById
 * Summary: get payment Voucher by ID
 * Notes: get payment Voucher
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('invoice/{invoice_id}/get_payment_voucher', 'InvoiceApi@getPaymentVoucherById')->middleware('jwt.auth');
/**
 * PATCH submitInvoiceForApproval
 * Summary: Submit invoice by ID
 * Notes: Submits invoice for approval
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/invoice/{invoice_id}/submit_for_approval', 'InvoiceApi@submitInvoiceForApproval')->middleware('jwt.auth');
/**
 * GET getInvoices
 * Summary: invoices List
 * Notes: The invoice endpoint returns multiple invoice requested given the parameters injected.  

 */
Route::GET('/invoices', 'InvoiceApi@getInvoices')->middleware('jwt.auth');
/**
 * PATCH approveSeveralInvoices
 * Summary: Approve several Invoices
 * Notes: Approve
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/invoices/approve', 'InvoiceApi@approveSeveralInvoices')->middleware('jwt.auth');



























/**
 * POST addInvoiceApproval
 * Summary: Add a new invoice_approval
 * Notes: new invoice_approval
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/invoice_approval', 'InvoiceApprovalApi@addInvoiceApproval')->middleware('jwt.auth');
/**
 * PUT updateInvoiceApproval
 * Summary: Update an existing invoice_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/invoice_approval', 'InvoiceApprovalApi@updateInvoiceApproval')->middleware('jwt.auth');
/**
 * DELETE deleteInvoiceApproval
 * Summary: Deletes an invoice_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/invoice_approval/{invoice_approval_id}', 'InvoiceApprovalApi@deleteInvoiceApproval')->middleware('jwt.auth');
/**
 * GET getInvoiceApprovalById
 * Summary: Find invoice_approval by ID
 * Notes: Returns a single invoice_approval
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/invoice_approval/{invoice_approval_id}', 'InvoiceApprovalApi@getInvoiceApprovalById')->middleware('jwt.auth');
/**
 * GET getInvoiceApprovals
 * Summary: invoice_approvals List
 * Notes: The invoice_approval endpoint returns multiple invoice_approval requested given the parameters injected.  

 */
Route::GET('/invoice_approvals', 'InvoiceApprovalApi@getInvoiceApprovals')->middleware('jwt.auth');





















/**
 * POST addInvoiceAllocation
 * Summary: Add a new invoice_allocation
 * Notes: new invoice_allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/invoice_allocation', 'InvoiceAllocationApi@addInvoiceAllocation')->middleware('jwt.auth');
/**
 * PUT updateInvoiceAllocation
 * Summary: Update an existing invoice_allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/invoice_allocation', 'InvoiceAllocationApi@updateInvoiceAllocation')->middleware('jwt.auth');
/**
 * DELETE deleteInvoiceAllocation
 * Summary: Deletes an invoice_allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/invoice_allocation/{invoice_allocation_id}', 'InvoiceAllocationApi@deleteInvoiceAllocation')->middleware('jwt.auth');
/**
 * GET getInvoiceAllocationById
 * Summary: Find invoice_allocation by ID
 * Notes: Returns a single invoice_allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/invoice_allocation/{invoice_allocation_id}', 'InvoiceAllocationApi@getInvoiceAllocationById')->middleware('jwt.auth');
/**
 * GET invoiceAllocationsGet
 * Summary: invoice_allocations List
 * Notes: The invoice_allocation endpoint returns multiple invoice_allocation requested given the parameters injected.  

 */
Route::GET('/invoice_allocations', 'InvoiceApprovalApi@invoiceAllocationsGet')->middleware('jwt.auth');




















/**
 * POST addInvoiceStatus
 * Summary: Add a new invoice_status
 * Notes: new invoice_status
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/invoice_status', 'InvoiceStatusApi@addInvoiceStatus')->middleware('jwt.auth');
/**
 * PUT updateInvoiceStatus
 * Summary: Update an existing invoice_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/invoice_status', 'InvoiceStatusApi@updateInvoiceStatus')->middleware('jwt.auth');
/**
 * DELETE deleteInvoiceStatus
 * Summary: Deletes an invoice_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/invoice_status/{invoice_status_id}', 'InvoiceStatusApi@deleteInvoiceStatus')->middleware('jwt.auth');
/**
 * GET getInvoiceStatusById
 * Summary: Find invoice_status by ID
 * Notes: Returns a single invoice_status
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/invoice_status/{invoice_status_id}', 'InvoiceStatusApi@getInvoiceStatusById')->middleware('jwt.auth');
/**
 * GET getInvoiceStatuses
 * Summary: invoice_statuses List
 * Notes: The invoice_status endpoint returns multiple invoice_status requested given the parameters injected.  

 */
Route::GET('/invoice_statuses', 'InvoiceStatusApi@getInvoiceStatuses')->middleware('jwt.auth');

















/**
 * POST addPayment
 * Summary: Add a new payment
 * Notes: new payment
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/payment', 'PaymentApi@addPayment')->middleware('jwt.auth');
/**
 * PUT updatePayment
 * Summary: Update an existing payment
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/payment', 'PaymentApi@updatePayment')->middleware('jwt.auth');
/**
 * GET getPaymentById
 * Summary: Find payment by ID
 * Notes: Returns a single payment
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/payment/{payment_id}', 'PaymentApi@getPaymentById')->middleware('jwt.auth');
/**
 * DELETE deletePayment
 * Summary: Deletes an payment
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/payment/{payment_id}/get_voucher', 'PaymentApi@deletePayment')->middleware('jwt.auth');
/**
 * GET getDocumentById
 * Summary: get payment document by ID
 * Notes: get Payment document
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/payment/{payment_id}/get_voucher', 'PaymentApi@getDocumentById')->middleware('jwt.auth');
/**
 * GET getPayments
 * Summary: payments List
 * Notes: The payment endpoint returns multiple payment requested given the parameters injected.  

 */
Route::GET('/payments', 'PaymentApi@getPayments')->middleware('jwt.auth');


















/**
 * POST addPaymentBatch
 * Summary: Add a new payment_batch
 * Notes: new payment_batch
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/payment_batch', 'PaymentBatchApi@addPaymentBatch')->middleware('jwt.auth');
/**
 * PUT updatePaymentBatch
 * Summary: Update an existing payment_batch
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/payment_batch', 'PaymentBatchApi@updatePaymentBatch')->middleware('jwt.auth');
/**
 * DELETE deletePaymentBatch
 * Summary: Deletes an payment_batch
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/payment_batch/{payment_batch_id}', 'PaymentBatchApi@deletePaymentBatch')->middleware('jwt.auth');
/**
 * GET getPaymentBatchById
 * Summary: Find payment_batch by ID
 * Notes: Returns a single payment_batch
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/payment_batch/{payment_batch_id}', 'PaymentBatchApi@getPaymentBatchById')->middleware('jwt.auth');
/**
 * GET getPaymentBatches
 * Summary: payment_batches List
 * Notes: The payment_batch endpoint returns multiple payment_batch requested given the parameters injected.  

 */
Route::GET('/payment_batches', 'PaymentBatchApi@getPaymentBatches')->middleware('jwt.auth');
/**
 * POST completePaymentBatchUpload
 * Summary: Completes upload of a payment_batch
 * Notes: complete payment_batch upload
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/payment_batch/{payment_batch_id}', 'PaymentBatchApi@completePaymentBatchUpload')->middleware('jwt.auth');
/**
 * POST getCSVData
 * Summary: get data for CSV generation
 * Notes: get CSV data
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/payment_batch', 'PaymentBatchApi@getCSVData')->middleware('jwt.auth');





















/**
 * POST addPaymentMode
 * Summary: Add a new payment_mode
 * Notes: new payment_mode
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/payment_mode', 'PaymentModeApi@addPaymentMode')->middleware('jwt.auth');
/**
 * PUT updatePaymentMode
 * Summary: Update an existing payment_mode
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/payment_mode', 'PaymentModeApi@updatePaymentMode')->middleware('jwt.auth');
/**
 * DELETE deletePaymentMode
 * Summary: Deletes an payment_mode
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/payment_mode/{payment_mode_id}', 'PaymentModeApi@deletePaymentMode')->middleware('jwt.auth');
/**
 * GET getPaymentModeById
 * Summary: Find payment_mode by ID
 * Notes: Returns a single payment_mode
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/payment_mode/{payment_mode_id}', 'PaymentModeApi@getPaymentModeById')->middleware('jwt.auth');
/**
 * GET getPaymentModes
 * Summary: payment_modes List
 * Notes: The payment_mode endpoint returns multiple payment_mode requested given the parameters injected.  

 */
Route::GET('/payment_modes', 'PaymentModeApi@getPaymentModes')->middleware('jwt.auth');





















/**
 * POST addPaymentType
 * Summary: Add a new payment_type
 * Notes: new payment_type
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/payment_type', 'PaymentTypeApi@addPaymentType')->middleware('jwt.auth');
/**
 * PUT updatePaymentType
 * Summary: Update an existing payment_type
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/payment_type', 'PaymentTypeApi@updatePaymentType')->middleware('jwt.auth');
/**
 * DELETE deletePaymentType
 * Summary: Deletes an payment_type
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/payment_type/{payment_type_id}', 'PaymentTypeApi@deletePaymentType')->middleware('jwt.auth');
/**
 * GET getPaymentTypeById
 * Summary: Find payment_type by ID
 * Notes: Returns a single payment_type
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/payment_type/{payment_type_id}', 'PaymentTypeApi@getPaymentTypeById')->middleware('jwt.auth');
/**
 * GET getPaymentTypes
 * Summary: payment_types List
 * Notes: The payment_type endpoint returns multiple payment_type requested given the parameters injected.  

 */
Route::GET('/payment_types', 'PaymentTypeApi@getPaymentTypes')->middleware('jwt.auth');





























/**
 * POST addPaymentVoucher
 * Summary: Add a new payment_voucher
 * Notes: new payment_voucher
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/payment_voucher', 'PaymentVoucherApi@addPaymentVoucher')->middleware('jwt.auth');
/**
 * PUT updatePaymentVoucher
 * Summary: Update an existing payment_voucher
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/payment_voucher', 'PaymentVoucherApi@updatePaymentVoucher')->middleware('jwt.auth');
/**
 * GET getPaymentVoucherById
 * Summary: Find payment_voucher by ID
 * Notes: Returns a single payment_voucher
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/payment_voucher/{payment_voucher_id}', 'PaymentVoucherApi@getPaymentVoucherById')->middleware('jwt.auth');
/**
 * DELETE deletePaymentVoucher
 * Summary: Deletes an payment_voucher
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/payment_voucher/{payment_voucher_id}/get_document', 'PaymentVoucherApi@deletePaymentVoucher')->middleware('jwt.auth');
/**
 * GET getDocumentById
 * Summary: get payment_voucher document by ID
 * Notes: get Payment Voucher document
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/payment_voucher/{payment_voucher_id}/get_document', 'PaymentVoucherApi@getDocumentById')->middleware('jwt.auth');
/**
 * GET paymentVouchersGet
 * Summary: payment_vouchers List
 * Notes: The payment_voucher endpoint returns multiple payment_voucher requested given the parameters injected.  

 */
Route::GET('/payment_vouchers', 'PaymentVoucherApi@paymentVouchersGet')->middleware('jwt.auth');




























/**
 * POST addApproval
 * Summary: Add a new approval
 * Notes: new approval
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/approval', 'ApprovalApi@addApproval')->middleware('jwt.auth');
/**
 * PUT updateApproval
 * Summary: Update an existing approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/approval', 'ApprovalApi@updateApproval')->middleware('jwt.auth');
/**
 * DELETE deleteApproval
 * Summary: Deletes an approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/approval/{approval_id}', 'ApprovalApi@deleteApproval')->middleware('jwt.auth');
/**
 * GET getApprovalById
 * Summary: Find approval by ID
 * Notes: Returns a single approval
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/approval/{approval_id}', 'ApprovalApi@getApprovalById')->middleware('jwt.auth');
/**
 * GET getApprovals
 * Summary: approvals List
 * Notes: The approval endpoint returns multiple approval requested given the parameters injected.  

 */
Route::GET('/approvals', 'ApprovalApi@getApprovals')->middleware('jwt.auth');























/**
 * POST addAllocation
 * Summary: Add a new allocation
 * Notes: new allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/allocation', 'AllocationApi@addAllocation')->middleware('jwt.auth');
/**
 * PUT updateAllocation
 * Summary: Update an existing allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/allocation', 'AllocationApi@updateAllocation')->middleware('jwt.auth');
/**
 * DELETE deleteAllocation
 * Summary: Deletes an allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/allocation/{allocation_id}', 'AllocationApi@deleteAllocation')->middleware('jwt.auth');
/**
 * GET getAllocationById
 * Summary: Find allocation by ID
 * Notes: Returns a single allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/allocation/{allocation_id}', 'AllocationApi@getAllocationById')->middleware('jwt.auth');
/**
 * GET getAllocations
 * Summary: allocations List
 * Notes: The allocation endpoint returns multiple allocation requested given the parameters injected.  

 */
Route::GET('/allocations', 'AllocationApi@getAllocations')->middleware('jwt.auth');






























/**
 * GET getDeliveries
 * Summary: deliveries List
 * Notes: The delivery endpoint returns multiple delivery requested given the parameters injected.  

 */
Route::GET('/deliveries', 'DeliveryApi@getDeliveries')->middleware('jwt.auth');
/**
 * POST addDelivery
 * Summary: Add a new delivery
 * Notes: new delivery
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/delivery', 'DeliveryApi@addDelivery')->middleware('jwt.auth');
/**
 * PUT updateDelivery
 * Summary: Update an existing delivery
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/delivery', 'DeliveryApi@updateDelivery')->middleware('jwt.auth');
/**
 * DELETE deleteDelivery
 * Summary: Deletes an delivery
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/delivery/{delivery_id}', 'DeliveryApi@deleteDelivery')->middleware('jwt.auth');
/**
 * GET getDeliveryById
 * Summary: Find delivery by ID
 * Notes: Returns a single delivery
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/delivery/{delivery_id}', 'DeliveryApi@getDeliveryById')->middleware('jwt.auth');
/**
 * PATCH allocateDelivery
 * Summary: Allocate delivery by ID
 * Notes: Allocate Delivery
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/delivery/{delivery_id}/allocate', 'DeliveryApi@allocateDelivery')->middleware('jwt.auth');
/**
 * PATCH approveDelivery
 * Summary: Approve delivery by ID
 * Notes: Approves Delivery
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/delivery/{delivery_id}/approve', 'DeliveryApi@approveDelivery')->middleware('jwt.auth');
/**
 * GET getDocumentById
 * Summary: get delivery document by ID
 * Notes: get Delivery document
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/delivery/{delivery_id}/get_document', 'DeliveryApi@getDocumentById')->middleware('jwt.auth');
/**
 * PATCH submitDeliveryForApproval
 * Summary: Submit delivery by ID
 * Notes: Submits delivery for approval
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/delivery/{delivery_id}/submit_for_approval', 'DeliveryApi@submitDeliveryForApproval')->middleware('jwt.auth');









































/**
 * POST addDeliveryApproval
 * Summary: Add a new delivery_approval
 * Notes: new delivery_approval
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/delivery_approval', 'DeliveryApprovalApi@addDeliveryApproval')->middleware('jwt.auth');
/**
 * PUT updateDeliveryApproval
 * Summary: Update an existing delivery_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/delivery_approval', 'DeliveryApprovalApi@updateDeliveryApproval')->middleware('jwt.auth');
/**
 * DELETE deleteDeliveryApproval
 * Summary: Deletes an delivery_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/delivery_approval/{delivery_approval_id}', 'DeliveryApprovalApi@deleteDeliveryApproval')->middleware('jwt.auth');
/**
 * GET getDeliveryApprovalById
 * Summary: Find delivery_approval by ID
 * Notes: Returns a single delivery_approval
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/delivery_approval/{delivery_approval_id}', 'DeliveryApprovalApi@getDeliveryApprovalById')->middleware('jwt.auth');
/**
 * GET getDeliveryApprovals
 * Summary: delivery_approvals List
 * Notes: The delivery_approval endpoint returns multiple delivery_approval requested given the parameters injected.  

 */
Route::GET('/delivery_approvals', 'DeliveryApprovalApi@getDeliveryApprovals')->middleware('jwt.auth');









































/**
 * POST addDeliveryStatus
 * Summary: Add a new delivery_status
 * Notes: new delivery_status
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/delivery_status', 'DeliveryStatusApi@addDeliveryStatus')->middleware('jwt.auth');
/**
 * PUT updateDeliveryStatus
 * Summary: Update an existing delivery_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/delivery_status', 'DeliveryStatusApi@updateDeliveryStatus')->middleware('jwt.auth');
/**
 * DELETE deleteDeliveryStatus
 * Summary: Deletes an delivery_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/delivery_status/{delivery_status_id}', 'DeliveryStatusApi@deleteDeliveryStatus')->middleware('jwt.auth');
/**
 * GET getDeliveryStatusById
 * Summary: Find delivery_status by ID
 * Notes: Returns a single delivery_status
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/delivery_status/{delivery_status_id}', 'DeliveryStatusApi@getDeliveryStatusById')->middleware('jwt.auth');
/**
 * GET getDeliveryStatuses
 * Summary: delivery_statuses List
 * Notes: The delivery_status endpoint returns multiple delivery_status requested given the parameters injected.  

 */
Route::GET('/delivery_statuses', 'DeliveryStatusApi@getDeliveryStatuses')->middleware('jwt.auth');





















/**
 * POST addBank
 * Summary: Add a new bank
 * Notes: new bank
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/bank', 'BankApi@addBank')->middleware('jwt.auth');
/**
 * PUT updateBank
 * Summary: Update an existing bank
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/bank', 'BankApi@updateBank')->middleware('jwt.auth');
/**
 * DELETE deleteBank
 * Summary: Deletes an bank
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/bank/{bank_id}', 'BankApi@deleteBank')->middleware('jwt.auth');
/**
 * GET getBankById
 * Summary: Find bank by ID
 * Notes: Returns a single bank
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/bank/{bank_id}', 'BankApi@getBankById')->middleware('jwt.auth');
/**
 * GET banksGet
 * Summary: banks List
 * Notes: The bank endpoint returns multiple bank requested given the parameters injected.  

 */
Route::GET('/banks', 'BankApi@banksGet')->middleware('jwt.auth');





















/**
 * POST addBankAccount
 * Summary: Add a new bank_account
 * Notes: new bank_account
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/bank_account', 'BankAccountApi@addBankAccount')->middleware('jwt.auth');
/**
 * PUT updateBankAccount
 * Summary: Update an existing bank_account
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/bank_account', 'BankAccountApi@updateBankAccount')->middleware('jwt.auth');
/**
 * DELETE deleteBankAccount
 * Summary: Deletes an bank_account
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/bank_account/{bank_account_id}', 'BankAccountApi@deleteBankAccount')->middleware('jwt.auth');
/**
 * GET getBankAccountById
 * Summary: Find bank_account by ID
 * Notes: Returns a single bank_account
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/bank_account/{bank_account_id}', 'BankAccountApi@getBankAccountById')->middleware('jwt.auth');
/**
 * GET bankAccountsGet
 * Summary: bank_accounts List
 * Notes: The bank_account endpoint returns multiple bank_account requested given the parameters injected.  

 */
Route::GET('/bank_accounts', 'BankAccountApi@bankAccountsGet')->middleware('jwt.auth');





















/**
 * POST addBankBranch
 * Summary: Add a new bank_branch
 * Notes: new bank_branch
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/bank_branch', 'BankBranchApi@addBankBranch')->middleware('jwt.auth');
/**
 * PUT updateBankBranch
 * Summary: Update an existing bank_branch
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/bank_branch', 'BankBranchApi@updateBankBranch')->middleware('jwt.auth');
/**
 * DELETE deleteBankBranch
 * Summary: Deletes an bank_branch
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/bank_branch/{bank_branch_id}', 'BankBranchApi@deleteBankBranch')->middleware('jwt.auth');
/**
 * GET getBankBranchById
 * Summary: Find bank_branch by ID
 * Notes: Returns a single bank_branch
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/bank_branch/{bank_branch_id}', 'BankBranchApi@getBankBranchById')->middleware('jwt.auth');
/**
 * GET bankBranchesGet
 * Summary: bank_branches List
 * Notes: The bank_branch endpoint returns multiple bank_branch requested given the parameters injected.  

 */
Route::GET('/bank_branches', 'BankBranchApi@bankBranchesGet')->middleware('jwt.auth');





















/**
 * POST addBankCsv
 * Summary: Add a new bank_csv
 * Notes: new bank_csv
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/bank_csv', 'BankCSVApi@addBankCsv')->middleware('jwt.auth');
/**
 * PUT updateBankCsv
 * Summary: Update an existing bank_csv
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/bank_csv', 'BankCSVApi@updateBankCsv')->middleware('jwt.auth');
/**
 * DELETE deleteBankCsv
 * Summary: Deletes an bank_csv
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/bank_csv/{bank_csv_id}', 'BankCSVApi@deleteBankCsv')->middleware('jwt.auth');
/**
 * GET getBankCsvById
 * Summary: Find bank_csv by ID
 * Notes: Returns a single bank_csv
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/bank_csv/{bank_csv_id}', 'BankCSVApi@getBankCsvById')->middleware('jwt.auth');
/**
 * GET bankCsvsGet
 * Summary: bank_csvs List
 * Notes: The bank_csv endpoint returns multiple bank_csv requested given the parameters injected.  

 */
Route::GET('/bank_csvs', 'BankCSVApi@bankCsvsGet')->middleware('jwt.auth');





















/**
 * POST addBankTransaction
 * Summary: Add a new bank_transaction
 * Notes: new bank_transaction
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/bank_transaction', 'BankTransactionApi@addBankTransaction')->middleware('jwt.auth');
/**
 * PUT updateBankTransaction
 * Summary: Update an existing bank_transaction
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/bank_transaction', 'BankTransactionApi@updateBankTransaction')->middleware('jwt.auth');
/**
 * DELETE deleteBankTransaction
 * Summary: Deletes an bank_transaction
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/bank_transaction/{bank_transaction_id}', 'BankTransactionApi@deleteBankTransaction')->middleware('jwt.auth');
/**
 * GET getBankTransactionById
 * Summary: Find bank_transaction by ID
 * Notes: Returns a single bank_transaction
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/bank_transaction/{bank_transaction_id}', 'BankTransactionApi@getBankTransactionById')->middleware('jwt.auth');
/**
 * GET bankTransactionsGet
 * Summary: bank_transactions List
 * Notes: The bank_transaction endpoint returns multiple bank_transaction requested given the parameters injected.  

 */
Route::GET('/bank_transactions', 'BankTransactionApi@bankTransactionsGet')->middleware('jwt.auth');























/**
 * POST addProgram
 * Summary: Add a new program
 * Notes: new program
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/program', 'ProgramApi@addProgram')->middleware('jwt.auth');
/**
 * PUT updateProgram
 * Summary: Update an existing program
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/program', 'ProgramApi@updateProgram')->middleware('jwt.auth');
/**
 * DELETE deleteProgram
 * Summary: Deletes an program
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/program/{program_id}', 'ProgramApi@deleteProgram')->middleware('jwt.auth');
/**
 * GET getProgramById
 * Summary: Find program by ID
 * Notes: Returns a single program
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/program/{program_id}', 'ProgramApi@getProgramById')->middleware('jwt.auth');
/**
 * PATCH updateManagers
 * Summary: Update Program Managers by ID
 * Notes: Update Program Managers
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/program/{program_id}/managers', 'ProgramApi@updateManagers')->middleware('jwt.auth');
/**
 * GET programsGet
 * Summary: programs List
 * Notes: The program endpoint returns multiple program requested given the parameters injected.  

 */
Route::GET('/programs', 'ProgramApi@programsGet')->middleware('jwt.auth');




















/**
 * GET countriesGet
 * Summary: Countries List
 * Notes: The country endpoint returns multiple country requested given the parameters injected.  

 */
Route::GET('/countries', 'CountryApi@countriesGet')->middleware('jwt.auth');
/**
 * POST addCountry
 * Summary: Add a new country
 * Notes: new country
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/country', 'CountryApi@addCountry')->middleware('jwt.auth');
/**
 * PUT updateCountry
 * Summary: Update an existing country
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/country', 'CountryApi@updateCountry')->middleware('jwt.auth');
/**
 * DELETE deleteCountry
 * Summary: Deletes an country
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/country/{country_id}', 'CountryApi@deleteCountry')->middleware('jwt.auth');
/**
 * GET getCountryById
 * Summary: Find country by ID
 * Notes: Returns a single country
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/country/{country_id}', 'CountryApi@getCountryById')->middleware('jwt.auth');





































/**
 * POST addDonor
 * Summary: Add a new donor
 * Notes: new donor
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/donor', 'DonorApi@addDonor')->middleware('jwt.auth');
/**
 * PUT updateDonor
 * Summary: Update an existing donor
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/donor', 'DonorApi@updateDonor')->middleware('jwt.auth');
/**
 * DELETE deleteDonor
 * Summary: Deletes an donor
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/donor/{donor_id}', 'DonorApi@deleteDonor')->middleware('jwt.auth');
/**
 * GET getDonorById
 * Summary: Find donor by ID
 * Notes: Returns a single donor
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/donor/{donor_id}', 'DonorApi@getDonorById')->middleware('jwt.auth');
/**
 * GET donorsGet
 * Summary: Donors List
 * Notes: The donor endpoint returns multiple donor requested given the parameters injected.  

 */
Route::GET('/donors', 'DonorApi@donorsGet')->middleware('jwt.auth');






























/**
 * POST addGrant
 * Summary: Add a new grant
 * Notes: new grant
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/grant', 'GrantApi@addGrant')->middleware('jwt.auth');
/**
 * PUT updateGrant
 * Summary: Update an existing grant
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/grant', 'GrantApi@updateGrant')->middleware('jwt.auth');
/**
 * DELETE deleteGrant
 * Summary: Deletes an grant
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/grant/{grant_id}', 'GrantApi@deleteGrant')->middleware('jwt.auth');
/**
 * GET getGrantById
 * Summary: Find grant by ID
 * Notes: Returns a single grant
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/grant/{grant_id}', 'GrantApi@getGrantById')->middleware('jwt.auth');
/**
 * PATCH updateAccountRestrictions
 * Summary: Update Account Restrictions by ID
 * Notes: Update Account Restrictions
 * Output-Formats: [application/json, application/xml]
 */
Route::PATCH('/grant/{grant_id}/account_restrictions', 'GrantApi@updateAccountRestrictions')->middleware('jwt.auth');
/**
 * GET grantsGet
 * Summary: Grants List
 * Notes: The grant endpoint returns multiple grant requested given the parameters injected.  

 */
Route::GET('/grants', 'GrantApi@grantsGet')->middleware('jwt.auth');






















/**
 * GET getUserGuide
 * Summary: Donwloads the user guide
 * Notes: Download user guide
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/help/user_guide', 'HelpApi@getUserGuide')->middleware('jwt.auth');



















/**
 * POST addAccountClassification
 * Summary: Add a new account_classification
 * Notes: new account_classification
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/account_classification', 'AccountClassificationApi@addAccountClassification')->middleware('jwt.auth');
/**
 * PUT updateAccountClassification
 * Summary: Update an existing account_classification
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/account_classification', 'AccountClassificationApi@updateAccountClassification')->middleware('jwt.auth');
/**
 * DELETE deleteAccountClassification
 * Summary: Deletes an account_classification
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/account_classification/{account_classification_id}', 'AccountClassificationApi@deleteAccountClassification')->middleware('jwt.auth');
/**
 * GET getAccountClassificationById
 * Summary: Find account_classification by ID
 * Notes: Returns a single account_classification
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/account_classification/{account_classification_id}', 'AccountClassificationApi@getAccountClassificationById')->middleware('jwt.auth');
/**
 * GET accountClassificationsGet
 * Summary: Account Classifications List
 * Notes: The account_classification endpoint returns multiple account_classification requested given the parameters injected.  

 */
Route::GET('/account_classifications', 'AccountClassificationApi@accountClassificationsGet')->middleware('jwt.auth');


























/**
 * POST addAccountType
 * Summary: Add a new account_type
 * Notes: new account_type
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/account_type', 'AccountTypeApi@addAccountType')->middleware('jwt.auth');
/**
 * PUT updateAccountType
 * Summary: Update an existing account_type
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/account_type', 'AccountTypeApi@updateAccountType')->middleware('jwt.auth');
/**
 * DELETE deleteAccountType
 * Summary: Deletes an account_type
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/account_type/{account_type_id}', 'AccountTypeApi@deleteAccountType')->middleware('jwt.auth');
/**
 * GET getAccountTypeById
 * Summary: Find account_type by ID
 * Notes: Returns a single account_type
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/account_type/{account_type_id}', 'AccountTypeApi@getAccountTypeById')->middleware('jwt.auth');
/**
 * GET accountTypesGet
 * Summary: Account Types List
 * Notes: The account_type endpoint returns multiple account_type requested given the parameters injected.  

 */
Route::GET('/account_types', 'AccountTypeApi@accountTypesGet')->middleware('jwt.auth');





























/**
 * GET citiesGet
 * Summary: Cities List
 * Notes: The city endpoint returns multiple city requested given the parameters injected.  

 */
Route::GET('/cities', 'CityApi@citiesGet')->middleware('jwt.auth');
/**
 * POST addCity
 * Summary: Add a new city
 * Notes: new city
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/city', 'CityApi@addCity')->middleware('jwt.auth');
/**
 * PUT updateCity
 * Summary: Update an existing city
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/city', 'CityApi@updateCity')->middleware('jwt.auth');
/**
 * DELETE deleteCity
 * Summary: Deletes an city
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/city/{city_id}', 'CityApi@deleteCity')->middleware('jwt.auth');
/**
 * GET getCityById
 * Summary: Find city by ID
 * Notes: Returns a single city
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/city/{city_id}', 'CityApi@getCityById')->middleware('jwt.auth');





































/**
 * POST addApprovalLevel
 * Summary: Add a new approval_level
 * Notes: new approval_level
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/approval_level', 'ApprovalLevelApi@addApprovalLevel')->middleware('jwt.auth');
/**
 * PUT updateApprovalLevel
 * Summary: Update an existing approval_level
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/approval_level', 'ApprovalLevelApi@updateApprovalLevel')->middleware('jwt.auth');
/**
 * DELETE deleteApprovalLevel
 * Summary: Deletes an approval_level
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/approval_level/{approval_level_id}', 'ApprovalLevelApi@deleteApprovalLevel')->middleware('jwt.auth');
/**
 * GET getApprovalLevelById
 * Summary: Find approval_level by ID
 * Notes: Returns a single approval_level
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/approval_level/{approval_level_id}', 'ApprovalLevelApi@getApprovalLevelById')->middleware('jwt.auth');
/**
 * GET approvalLevelsGet
 * Summary: Approval Levels List
 * Notes: The approval_level endpoint returns multiple approval_level requested given the parameters injected.  

 */
Route::GET('/approval_levels', 'ApprovalLevelApi@approvalLevelsGet')->middleware('jwt.auth');






























/**
 * POST addGrantAllocation
 * Summary: Add a new grant_allocation
 * Notes: new grant_allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/grant_allocation', 'GrantAllocationApi@addGrantAllocation')->middleware('jwt.auth');
/**
 * PUT updateGrantAllocation
 * Summary: Update an existing grant_allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/grant_allocation', 'GrantAllocationApi@updateGrantAllocation')->middleware('jwt.auth');
/**
 * DELETE deleteGrantAllocation
 * Summary: Deletes an grant_allocation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/grant_allocation/{grant_allocation_id}', 'GrantAllocationApi@deleteGrantAllocation')->middleware('jwt.auth');
/**
 * GET getGrantAllocationById
 * Summary: Find grant_allocation by ID
 * Notes: Returns a single grant_allocation
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/grant_allocation/{grant_allocation_id}', 'GrantAllocationApi@getGrantAllocationById')->middleware('jwt.auth');
/**
 * GET grantAllocationsGet
 * Summary: Grant Allocations List
 * Notes: The grant_allocation endpoint returns multiple grant_allocation requested given the parameters injected.  

 */
Route::GET('/grant_allocations', 'GrantAllocationApi@grantAllocationsGet')->middleware('jwt.auth');






















/**
 * POST addBudget
 * Summary: Add a new budget
 * Notes: new budget
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/budget', 'BudgetApi@addBudget')->middleware('jwt.auth');
/**
 * PUT updateBudget
 * Summary: Update an existing budget
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/budget', 'BudgetApi@updateBudget')->middleware('jwt.auth');
/**
 * DELETE deleteBudget
 * Summary: Deletes an budget
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/budget/{budget_id}', 'BudgetApi@deleteBudget')->middleware('jwt.auth');
/**
 * GET getBudgetById
 * Summary: Find budget by ID
 * Notes: Returns a single budget
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/budget/{budget_id}', 'BudgetApi@getBudgetById')->middleware('jwt.auth');
/**
 * GET budgetsGet
 * Summary: Budgets List
 * Notes: The budget endpoint returns multiple budget requested given the parameters injected.  

 */
Route::GET('/budgets', 'BudgetApi@budgetsGet')->middleware('jwt.auth');






























/**
 * POST addBudgetItem
 * Summary: Add a new budget_item
 * Notes: new budget_item
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/budget_item', 'BudgetItemApi@addBudgetItem')->middleware('jwt.auth');
/**
 * PUT updateBudgetItem
 * Summary: Update an existing budget_item
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/budget_item', 'BudgetItemApi@updateBudgetItem')->middleware('jwt.auth');
/**
 * DELETE deleteBudgetItem
 * Summary: Deletes an budget_item
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/budget_item/{budget_item_id}', 'BudgetItemApi@deleteBudgetItem')->middleware('jwt.auth');
/**
 * GET getBudgetItemById
 * Summary: Find budget_item by ID
 * Notes: Returns a single budget_item
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/budget_item/{budget_item_id}', 'BudgetItemApi@getBudgetItemById')->middleware('jwt.auth');
/**
 * GET budgetItemsGet
 * Summary: Budget Items List
 * Notes: The budget_item endpoint returns multiple budget_item requested given the parameters injected.  

 */
Route::GET('/budget_items', 'BudgetItemApi@budgetItemsGet')->middleware('jwt.auth');