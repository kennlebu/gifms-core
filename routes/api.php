<?php

use Illuminate\Http\Request;

/**
 * Grants Information Management System
 * Finance management sysytem
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mwangikevinn@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Grants Information Management System
 * @version 1.0.0
 */





Route::get('/', function (Request $request) {
    return ["version"=>"1.0.0"];
});



Route::post('/authenticate', [	'uses' => 'ApiAuthController@authenticate']);



















/**
 * POST add
 * Summary: Add a new lpo request to the store
 * Notes: lpo awaits approvals from relevant parties
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo', 'LpoApi@add')->middleware('jwt.auth');
;
/**
 * PUT updateLpo
 * Summary: Update an existing LPO
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/lpo', 'LpoApi@updateLpo')->middleware('jwt.auth');
/**
 * DELETE deleteLpo
 * Summary: Deletes an lpo
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/lpo/{lpo_id}', 'LpoApi@deleteLpo')->middleware('jwt.auth');
/**
 * GET getLpoById
 * Summary: Find lpo by ID
 * Notes: Returns a single lpo
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo/{lpo_id}', 'LpoApi@getLpoById')->middleware('jwt.auth');
/**
 * POST updateLpoWithForm
 * Summary: Updates a lpo with form data
 * Notes: updates each field when not set as null
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo/{lpo_id}', 'LpoApi@updateLpoWithForm')->middleware('jwt.auth');
/**
 * GET lposGet
 * Summary: lpo List
 * Notes: The Lpos endpoint returns information about the LPO requested give the parameters injected. The response includes the Reference-No and other details about each lpo, and lists the products in the proper display order. 

 */
Route::GET('/lpos', 'LpoApi@lposGet')->middleware('jwt.auth');

























/**
 * POST addLpoStatus
 * Summary: Add a new lpo status to the store
 * Notes: lpo status
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/lpo_status', 'LPOStatusApi@addLpoStatus')->middleware('jwt.auth');
/**
 * PUT updateLpoStatus
 * Summary: Update an existing LPO Status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/lpo_status', 'LPOStatusApi@updateLpoStatus')->middleware('jwt.auth');
/**
 * DELETE deleteLpoStatus
 * Summary: Deletes an lpo_status
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/lpo_status/{lpo_status_id}', 'LPOStatusApi@deleteLpoStatus')->middleware('jwt.auth');
/**
 * GET getLpoStatusById
 * Summary: Find lpo by ID
 * Notes: Returns a single lpo
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/lpo_status/{lpo_status_id}', 'LPOStatusApi@getLpoStatusById')->middleware('jwt.auth');
/**
 * GET lpoStatusesGet
 * Summary: lpo statuses List
 * Notes: The Lpo Statuses endpoint returns information about the LPO statuses requested give the parameters injected.  

 */
Route::GET('/lpo_statuses', 'LPOStatusApi@lpoStatusesGet')->middleware('jwt.auth');





























/**
 * POST addLpoQuotation
 * Summary: Add a new lpo quotation
 * Notes: new lpo quotaion
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/api/lpo_quotation', 'LPOQuotationApi@addLpoQuotation')->middleware('jwt.auth');
/**
 * PUT updateLpoQuotation
 * Summary: Update an existing LPO Quotation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/api/lpo_quotation', 'LPOQuotationApi@updateLpoQuotation')->middleware('jwt.auth');
/**
 * DELETE deleteLpoQuotation
 * Summary: Deletes an lpo_quotation
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/api/lpo_quotation/{lpo_quotation_id}', 'LPOQuotationApi@deleteLpoQuotation')->middleware('jwt.auth');
/**
 * GET getLpoQuotationById
 * Summary: Find lpo quotation by ID
 * Notes: Returns a single lpo quotation
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/api/lpo_quotation/{lpo_quotation_id}', 'LPOQuotationApi@getLpoQuotationById')->middleware('jwt.auth');
/**
 * GET lpoQuotationsGet
 * Summary: lpo quotations List
 * Notes: The Lpo Quotations endpoint returns information about the LPO Quotation requested given the parameters injected.  

 */
Route::GET('/api/lpo_quotations', 'LPOQuotationApi@lpoQuotationsGet')->middleware('jwt.auth');






















/**
 * POST addLpoItem
 * Summary: Add a new lpo item
 * Notes: new lpo item
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/api/lpo_item', 'LPOItemApi@addLpoItem')->middleware('jwt.auth');
/**
 * PUT updateLpoItem
 * Summary: Update an existing LPO Item
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/api/lpo_item', 'LPOItemApi@updateLpoItem')->middleware('jwt.auth');
/**
 * DELETE deleteLpoItem
 * Summary: Deletes an lpo_item
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/api/lpo_item/{lpo_item_id}', 'LPOItemApi@deleteLpoItem')->middleware('jwt.auth');
/**
 * GET getLpoItemById
 * Summary: Find lpo item by ID
 * Notes: Returns a single lpo item
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/api/lpo_item/{lpo_item_id}', 'LPOItemApi@getLpoItemById')->middleware('jwt.auth');
/**
 * GET lpoItemsGet
 * Summary: lpo items List
 * Notes: The Lpo Items endpoint returns information about the LPO Item requested given the parameters injected.  

 */
Route::GET('/api/lpo_items', 'LPOItemApi@lpoItemsGet')->middleware('jwt.auth');






























/**
 * POST addLpoTerm
 * Summary: Add a new lpo term
 * Notes: new lpo term
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/api/lpo_term', 'LPOTermApi@addLpoTerm')->middleware('jwt.auth');
/**
 * PUT updateLpoTerm
 * Summary: Update an existing LPO Term
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/api/lpo_term', 'LPOTermApi@updateLpoTerm')->middleware('jwt.auth');
/**
 * DELETE deleteLpoTerm
 * Summary: Deletes an lpo_term
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/api/lpo_term/{lpo_term_id}', 'LPOTermApi@deleteLpoTerm')->middleware('jwt.auth');
/**
 * GET getLpoTermById
 * Summary: Find lpo term by ID
 * Notes: Returns a single lpo term
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/api/lpo_term/{lpo_term_id}', 'LPOTermApi@getLpoTermById')->middleware('jwt.auth');
/**
 * GET lpoTermsGet
 * Summary: lpo terms List
 * Notes: The Lpo Terms endpoint returns information about the LPO Term requested given the parameters injected.  

 */
Route::GET('/api/lpo_terms', 'LPOTermApi@lpoTermsGet')->middleware('jwt.auth');


































/**
 * POST addLpoComment
 * Summary: Add a new lpo comment
 * Notes: new lpo comment
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/api/lpo_comment', 'LPOCommentApi@addLpoComment')->middleware('jwt.auth');
/**
 * PUT updateLpoComment
 * Summary: Update an existing LPO Comment
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/api/lpo_comment', 'LPOCommentApi@updateLpoComment')->middleware('jwt.auth');
/**
 * DELETE deleteLpoComment
 * Summary: Deletes an lpo_comment
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/api/lpo_comment/{lpo_comment_id}', 'LPOCommentApi@deleteLpoComment')->middleware('jwt.auth');
/**
 * GET getLpoCommentById
 * Summary: Find lpo comment by ID
 * Notes: Returns a single lpo comment
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/api/lpo_comment/{lpo_comment_id}', 'LPOCommentApi@getLpoCommentById')->middleware('jwt.auth');
/**
 * GET lpoCommentsGet
 * Summary: lpo comments List
 * Notes: The Lpo Comments endpoint returns information about the LPO Comment requested given the parameters injected.  

 */
Route::GET('/api/lpo_comments', 'LPOCommentApi@lpoCommentsGet')->middleware('jwt.auth');
























/**
 * POST addLpoApproval
 * Summary: Add a new lpo approval
 * Notes: new lpo approval
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/api/lpo_approval', 'LPOApprovalApi@addLpoApproval')->middleware('jwt.auth');
/**
 * PUT updateLpoApproval
 * Summary: Update an existing LPO Approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/api/lpo_approval', 'LPOApprovalApi@updateLpoApproval')->middleware('jwt.auth');
/**
 * DELETE deleteLpoApproval
 * Summary: Deletes an lpo_approval
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/api/lpo_approval/{lpo_approval_id}', 'LPOApprovalApi@deleteLpoApproval')->middleware('jwt.auth');
/**
 * GET getLpoApprovalById
 * Summary: Find lpo approval by ID
 * Notes: Returns a single lpo approval
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/api/lpo_approval/{lpo_approval_id}', 'LPOApprovalApi@getLpoApprovalById')->middleware('jwt.auth');
/**
 * GET lpoApprovalsGet
 * Summary: lpo approvals List
 * Notes: The Lpo Approvals endpoint returns information about the LPO Approval requested given the parameters injected.  

 */
Route::GET('/api/lpo_approvals', 'LPOApprovalApi@lpoApprovalsGet')->middleware('jwt.auth');

























/**
 * POST addDepartment
 * Summary: Add a new department
 * Notes: new department
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/api/department', 'DepartmentApi@addDepartment')->middleware('jwt.auth');
/**
 * PUT updateDepartment
 * Summary: Update an existing department
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/api/department', 'DepartmentApi@updateDepartment')->middleware('jwt.auth');
/**
 * DELETE deleteDepartment
 * Summary: Deletes an department
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/api/department/{department_id}', 'DepartmentApi@deleteDepartment')->middleware('jwt.auth');
/**
 * GET getDepartmentById
 * Summary: Find department by ID
 * Notes: Returns a single department
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/api/department/{department_id}', 'DepartmentApi@getDepartmentById')->middleware('jwt.auth');
/**
 * GET departmentsGet
 * Summary: departments List
 * Notes: The department endpoint returns multiple department requested given the parameters injected.  

 */
Route::GET('/api/departments', 'DepartmentApi@departmentsGet')->middleware('jwt.auth');


























/**
 * POST addRight
 * Summary: Add a new right
 * Notes: new right
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/api/right', 'RightsApi@addRight')->middleware('jwt.auth');
/**
 * PUT updateRight
 * Summary: Update an existing right
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/api/right', 'RightsApi@updateRight')->middleware('jwt.auth');
/**
 * DELETE deleteRight
 * Summary: Deletes an right
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/api/right/{right_id}', 'RightsApi@deleteRight')->middleware('jwt.auth');
/**
 * GET getRightById
 * Summary: Find right by ID
 * Notes: Returns a single right
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/api/right/{right_id}', 'RightsApi@getRightById')->middleware('jwt.auth');
/**
 * GET rightsGet
 * Summary: rights List
 * Notes: The right endpoint returns multiple right requested given the parameters injected.  

 */
Route::GET('/api/rights', 'RightsApi@rightsGet')->middleware('jwt.auth');


































/**
 * POST addRole
 * Summary: Add a new role
 * Notes: new role
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/api/role', 'RolesApi@addRole')->middleware('jwt.auth');
/**
 * PUT updateRole
 * Summary: Update an existing role
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/api/role', 'RolesApi@updateRole')->middleware('jwt.auth');
/**
 * DELETE deleteRole
 * Summary: Deletes an role
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/api/role/{role_id}', 'RolesApi@deleteRole')->middleware('jwt.auth');
/**
 * GET getRoleById
 * Summary: Find role by ID
 * Notes: Returns a single role
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/api/role/{role_id}', 'RolesApi@getRoleById')->middleware('jwt.auth');
/**
 * GET rolesGet
 * Summary: roles List
 * Notes: The role endpoint returns multiple role requested given the parameters injected.  

 */
Route::GET('/api/roles', 'RolesApi@rolesGet')->middleware('jwt.auth');




































/**
 * POST addStaff
 * Summary: Add a new staff
 * Notes: new staff
 * Output-Formats: [application/json, application/xml]
 */
Route::POST('/api/staff', 'StaffApi@addStaff')->middleware('jwt.auth');
/**
 * PUT updateStaff
 * Summary: Update an existing staff
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::PUT('/api/staff', 'StaffApi@updateStaff')->middleware('jwt.auth');
/**
 * DELETE deleteStaff
 * Summary: Deletes an staff
 * Notes: 
 * Output-Formats: [application/json, application/xml]
 */
Route::DELETE('/api/staff/{staff_id}', 'StaffApi@deleteStaff')->middleware('jwt.auth');
/**
 * GET getStaffById
 * Summary: Find staff by ID
 * Notes: Returns a single staff
 * Output-Formats: [application/json, application/xml]
 */
Route::GET('/api/staff/{staff_id}', 'StaffApi@getStaffById')->middleware('jwt.auth');
/**
 * GET staffsGet
 * Summary: staffs List
 * Notes: The staff endpoint returns multiple staff requested given the parameters injected.  

 */
Route::GET('/api/staffs', 'StaffApi@staffsGet')->middleware('jwt.auth');

